2023-08-24 14:25:50:312 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-24 14:25:50:332 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-24 14:25:50:988 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, $block.blk) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 14:25:51:000 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, $block.blk) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 14:25:51:005 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER ELSE LLAVEIZQ block LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, $block.blk) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-24 14:25:51:008 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-24 14:25:51:051 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=390> expr<tokenIndex=392> PARDER<tokenIndex=394> { $e = $expr.e } 
        | list=listArray<tokenIndex=402> { $e = $list.p} 
        | CORIZQ<tokenIndex=408> listParams<tokenIndex=410> CORDER<tokenIndex=412> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=418>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=424>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=430> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=436> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=265>|DIV<tokenIndex=267>) right=expr<tokenIndex=272,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=285>|SUB<tokenIndex=287>) right=expr<tokenIndex=292,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=305>|MAYOR<tokenIndex=307>) right=expr<tokenIndex=312,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=325>|MENOR<tokenIndex=327>) right=expr<tokenIndex=332,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=345>|DIF<tokenIndex=347>) right=expr<tokenIndex=352,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=364> right=expr<tokenIndex=368,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=380> right=expr<tokenIndex=384,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-24 14:25:51:078 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 390))) (expr (ELEMENT_OPTIONS (= tokenIndex 392))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 394))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 402)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 408))) (listParams (ELEMENT_OPTIONS (= tokenIndex 410))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 412))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 418))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 424))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 430))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 436))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 265))) (DIV (ELEMENT_OPTIONS (= tokenIndex 267))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 272) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 285))) (SUB (ELEMENT_OPTIONS (= tokenIndex 287))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 292) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 305))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 307))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 312) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 325))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 327))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 332) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 345))) (DIF (ELEMENT_OPTIONS (= tokenIndex 347))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 352) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 364)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 368) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 380)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 384) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-24 14:25:51:081 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=461> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=453> expr<tokenIndex=455> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-24 14:25:51:083 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 461))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 453))) (expr (ELEMENT_OPTIONS (= tokenIndex 455))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-24 14:25:51:083 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=490> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=480> expr<tokenIndex=482> CORDER<tokenIndex=484> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-24 14:25:51:088 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 490))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 480))) (expr (ELEMENT_OPTIONS (= tokenIndex 482))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 484))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-24 14:25:51:101 grammar LogManager.java:25 import INT=1
2023-08-24 14:25:51:106 grammar LogManager.java:25 import FLOAT=2
2023-08-24 14:25:51:106 grammar LogManager.java:25 import BOOL=3
2023-08-24 14:25:51:106 grammar LogManager.java:25 import STR=4
2023-08-24 14:25:51:106 grammar LogManager.java:25 import TRU=5
2023-08-24 14:25:51:106 grammar LogManager.java:25 import FAL=6
2023-08-24 14:25:51:106 grammar LogManager.java:25 import PRINT=7
2023-08-24 14:25:51:108 grammar LogManager.java:25 import IF=8
2023-08-24 14:25:51:108 grammar LogManager.java:25 import ELSE=9
2023-08-24 14:25:51:108 grammar LogManager.java:25 import WHILE=10
2023-08-24 14:25:51:108 grammar LogManager.java:25 import VAR=11
2023-08-24 14:25:51:108 grammar LogManager.java:25 import NUMBER=12
2023-08-24 14:25:51:108 grammar LogManager.java:25 import STRING=13
2023-08-24 14:25:51:108 grammar LogManager.java:25 import ID=14
2023-08-24 14:25:51:108 grammar LogManager.java:25 import DIF=15
2023-08-24 14:25:51:108 grammar LogManager.java:25 import IG_IG=16
2023-08-24 14:25:51:108 grammar LogManager.java:25 import NOT=17
2023-08-24 14:25:51:108 grammar LogManager.java:25 import OR=18
2023-08-24 14:25:51:108 grammar LogManager.java:25 import AND=19
2023-08-24 14:25:51:108 grammar LogManager.java:25 import IG=20
2023-08-24 14:25:51:108 grammar LogManager.java:25 import MAY_IG=21
2023-08-24 14:25:51:108 grammar LogManager.java:25 import MEN_IG=22
2023-08-24 14:25:51:108 grammar LogManager.java:25 import MAYOR=23
2023-08-24 14:25:51:108 grammar LogManager.java:25 import MENOR=24
2023-08-24 14:25:51:111 grammar LogManager.java:25 import MUL=25
2023-08-24 14:25:51:111 grammar LogManager.java:25 import DIV=26
2023-08-24 14:25:51:111 grammar LogManager.java:25 import ADD=27
2023-08-24 14:25:51:111 grammar LogManager.java:25 import SUB=28
2023-08-24 14:25:51:111 grammar LogManager.java:25 import PARIZQ=29
2023-08-24 14:25:51:111 grammar LogManager.java:25 import PARDER=30
2023-08-24 14:25:51:111 grammar LogManager.java:25 import LLAVEIZQ=31
2023-08-24 14:25:51:111 grammar LogManager.java:25 import LLAVEDER=32
2023-08-24 14:25:51:111 grammar LogManager.java:25 import D_PTS=33
2023-08-24 14:25:51:111 grammar LogManager.java:25 import CORIZQ=34
2023-08-24 14:25:51:111 grammar LogManager.java:25 import CORDER=35
2023-08-24 14:25:51:111 grammar LogManager.java:25 import COMA=36
2023-08-24 14:25:51:111 grammar LogManager.java:25 import WHITESPACE=37
2023-08-24 14:25:51:111 grammar LogManager.java:25 import COMMENT=38
2023-08-24 14:25:51:111 grammar LogManager.java:25 import LINE_COMMENT=39
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'Int'=1
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'Float'=2
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'Bool'=3
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'String'=4
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'true'=5
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'false'=6
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'print'=7
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'if'=8
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'else'=9
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'while'=10
2023-08-24 14:25:51:111 grammar LogManager.java:25 import 'var'=11
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '!='=15
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '=='=16
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '!'=17
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '||'=18
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '&&'=19
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '='=20
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '>='=21
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '<='=22
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '>'=23
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '<'=24
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '*'=25
2023-08-24 14:25:51:111 grammar LogManager.java:25 import '/'=26
2023-08-24 14:25:51:116 grammar LogManager.java:25 import '+'=27
2023-08-24 14:25:51:116 grammar LogManager.java:25 import '-'=28
2023-08-24 14:25:51:116 grammar LogManager.java:25 import '('=29
2023-08-24 14:25:51:116 grammar LogManager.java:25 import ')'=30
2023-08-24 14:25:51:116 grammar LogManager.java:25 import '{'=31
2023-08-24 14:25:51:116 grammar LogManager.java:25 import '}'=32
2023-08-24 14:25:51:116 grammar LogManager.java:25 import ':'=33
2023-08-24 14:25:51:116 grammar LogManager.java:25 import '['=34
2023-08-24 14:25:51:116 grammar LogManager.java:25 import ']'=35
2023-08-24 14:25:51:116 grammar LogManager.java:25 import ','=36
2023-08-24 14:25:51:118 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, NUMBER=12, STRING=13, ID=14, DIF=15, IG_IG=16, NOT=17, OR=18, AND=19, IG=20, MAY_IG=21, MEN_IG=22, MAYOR=23, MENOR=24, MUL=25, DIV=26, ADD=27, SUB=28, PARIZQ=29, PARDER=30, LLAVEIZQ=31, LLAVEDER=32, D_PTS=33, CORIZQ=34, CORDER=35, COMA=36, WHITESPACE=37, COMMENT=38, LINE_COMMENT=39, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, '!='=15, '=='=16, '!'=17, '||'=18, '&&'=19, '='=20, '>='=21, '<='=22, '>'=23, '<'=24, '*'=25, '/'=26, '+'=27, '-'=28, '('=29, ')'=30, '{'=31, '}'=32, ':'=33, '['=34, ']'=35, ','=36}
2023-08-24 14:25:51:118 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, VAR=11, NUMBER=12, STRING=13, ID=14, DIF=15, IG_IG=16, NOT=17, OR=18, AND=19, IG=20, MAY_IG=21, MEN_IG=22, MAYOR=23, MENOR=24, MUL=25, DIV=26, ADD=27, SUB=28, PARIZQ=29, PARDER=30, LLAVEIZQ=31, LLAVEDER=32, D_PTS=33, CORIZQ=34, CORDER=35, COMA=36, WHITESPACE=37, COMMENT=38, LINE_COMMENT=39}
2023-08-24 14:25:51:118 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'var'=11, '!='=15, '=='=16, '!'=17, '||'=18, '&&'=19, '='=20, '>='=21, '<='=22, '>'=23, '<'=24, '*'=25, '/'=26, '+'=27, '-'=28, '('=29, ')'=30, '{'=31, '}'=32, ':'=33, '['=34, ']'=35, ','=36}
2023-08-24 14:25:51:163 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-24 14:25:51:163 LL1 LogManager.java:25 look=[{7..8, 10..11, 14}, {<EOF>, 32}]
2023-08-24 14:25:51:163 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:25:51:167 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-24 14:25:51:167 LL1 LogManager.java:25 look=[7, 8, 11, 14, 10]
2023-08-24 14:25:51:167 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:25:51:167 LL1 LogManager.java:25 
DECISION 2 in rule types
2023-08-24 14:25:51:167 LL1 LogManager.java:25 look=[1, 2, 4, 3, 34]
2023-08-24 14:25:51:167 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:25:51:167 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-24 14:25:51:167 LL1 LogManager.java:25 look=[29, 14, 34, 12, 13, 5, 6]
2023-08-24 14:25:51:167 LL1 LogManager.java:25 LL(1)? true
2023-08-24 14:25:51:168 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-24 14:25:51:168 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-24 14:25:51:168 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:25:51:168 LL1 LogManager.java:25 
DECISION 5 in rule expr
2023-08-24 14:25:51:168 LL1 LogManager.java:25 look=[null, null]
2023-08-24 14:25:51:168 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:25:51:168 LL1 LogManager.java:25 
DECISION 6 in rule listParams
2023-08-24 14:25:51:168 LL1 LogManager.java:25 look=[null, 35]
2023-08-24 14:25:51:168 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:25:51:168 LL1 LogManager.java:25 
DECISION 7 in rule listArray
2023-08-24 14:25:51:168 LL1 LogManager.java:25 look=[null, null]
2023-08-24 14:25:51:168 LL1 LogManager.java:25 LL(1)? false
2023-08-24 14:25:51:177 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:25:51:192 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-24 14:25:51:192 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-24 14:25:51:192 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-24 14:25:51:197 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-24 14:25:51:197 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-24 14:25:51:202 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-24 14:25:51:202 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-24 14:25:51:202 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-24 14:25:51:202 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-24 14:25:51:207 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-24 14:25:51:207 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-24 14:25:51:208 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-08-24 14:25:51:208 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-08-24 14:25:51:208 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,42:23].[@-1,21:25='asign',<0>,42:34]
2023-08-24 14:25:51:208 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-08-24 14:25:51:208 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-24 14:25:51:208 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:25='whiles',<0>,43:32]
2023-08-24 14:25:51:212 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-24 14:25:51:212 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,47:29]
2023-08-24 14:25:51:212 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,47:59].[@-1,38:41='line',<0>,47:65]
2023-08-24 14:25:51:212 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,47:71].[@-1,50:52='pos',<0>,47:77]
2023-08-24 14:25:51:212 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,47:82].[@-1,60:60='e',<0>,47:87]
2023-08-24 14:25:51:218 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, $block.blk) 
2023-08-24 14:25:51:218 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,51:63]
2023-08-24 14:25:51:218 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,51:92].[@-1,33:36='line',<0>,51:95]
2023-08-24 14:25:51:218 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,51:102].[@-1,43:45='pos',<0>,51:105]
2023-08-24 14:25:51:218 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,51:111].[@-1,54:54='e',<0>,51:116]
2023-08-24 14:25:51:222 action-translator LogManager.java:25 qattr [@-1,58:62='block',<0>,51:120].[@-1,64:66='blk',<0>,51:126]
2023-08-24 14:25:51:222 action-translator LogManager.java:25 qattr [@-1,75:79='block',<0>,51:137].[@-1,81:83='blk',<0>,51:143]
2023-08-24 14:25:51:222 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-24 14:25:51:222 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,55:39]
2023-08-24 14:25:51:222 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,55:71].[@-1,40:43='line',<0>,55:77]
2023-08-24 14:25:51:222 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,55:84].[@-1,53:55='pos',<0>,55:90]
2023-08-24 14:25:51:227 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,55:96].[@-1,64:64='e',<0>,55:101]
2023-08-24 14:25:51:227 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,55:105].[@-1,74:76='blk',<0>,55:111]
2023-08-24 14:25:51:228 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e) 
2023-08-24 14:25:51:228 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,59:32]
2023-08-24 14:25:51:228 action-translator LogManager.java:25 qattr [@-1,37:39='VAR',<0>,59:67].[@-1,41:44='line',<0>,59:71]
2023-08-24 14:25:51:228 action-translator LogManager.java:25 qattr [@-1,48:50='VAR',<0>,59:78].[@-1,52:54='pos',<0>,59:82]
2023-08-24 14:25:51:228 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,59:88].[@-1,61:64='text',<0>,59:91]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 qattr [@-1,68:72='types',<0>,59:98].[@-1,74:75='ty',<0>,59:104]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,59:109].[@-1,84:84='e',<0>,59:114]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-08-24 14:25:51:232 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,63:15]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,63:51].[@-1,41:44='line',<0>,63:54]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,63:61].[@-1,51:53='pos',<0>,63:64]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,63:70].[@-1,60:63='text',<0>,63:73]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,63:80].[@-1,72:72='e',<0>,63:85]
2023-08-24 14:25:51:232 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-24 14:25:51:232 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,69:8]
2023-08-24 14:25:51:237 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-24 14:25:51:237 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,70:10]
2023-08-24 14:25:51:237 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-24 14:25:51:238 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,71:8]
2023-08-24 14:25:51:238 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-24 14:25:51:238 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,72:9]
2023-08-24 14:25:51:238 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-24 14:25:51:238 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,73:18]
2023-08-24 14:25:51:242 action-translator LogManager.java:25 translate 
2023-08-24 14:25:51:242 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-24 14:25:51:242 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-24 14:25:51:242 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-24 14:25:51:247 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-24 14:25:51:247 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-24 14:25:51:247 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-24 14:25:51:248 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-24 14:25:51:248 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-24 14:25:51:248 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-24 14:25:51:248 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-24 14:25:51:248 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-24 14:25:51:248 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-24 14:25:51:248 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-24 14:25:51:248 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-24 14:25:51:252 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-24 14:25:51:252 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-24 14:25:51:253 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-24 14:25:51:253 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-24 14:25:51:257 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-24 14:25:51:257 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-24 14:25:51:258 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-24 14:25:51:258 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-24 14:25:51:258 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-24 14:25:51:258 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-24 14:25:51:258 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-24 14:25:51:258 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-24 14:25:51:258 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-24 14:25:51:258 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 14:25:51:262 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:262 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 14:25:51:262 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:262 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-24 14:25:51:262 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-24 14:25:51:267 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-24 14:25:51:267 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 14:25:51:268 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:268 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-24 14:25:51:268 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 14:25:51:272 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:272 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 14:25:51:272 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:272 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-24 14:25:51:272 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-24 14:25:51:277 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-24 14:25:51:277 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-24 14:25:51:277 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 14:25:51:277 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:277 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 14:25:51:278 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-24 14:25:51:278 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-24 14:25:51:278 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate 
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-24 14:25:51:283 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:25:51:283 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-24 14:25:51:283 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-24 14:25:51:283 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-24 14:25:51:288 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:25:51:288 action-translator LogManager.java:25 translate 
2023-08-24 14:25:51:288 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-24 14:25:51:288 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-24 14:25:51:288 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-24 14:25:51:288 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-24 14:25:51:288 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-24 14:25:51:288 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:25:51:293 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-24 14:25:51:293 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-24 14:25:51:293 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-24 14:25:51:293 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-24 14:25:51:293 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-24 14:25:51:293 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-24 14:25:51:293 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-24 14:25:51:606 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:25:51:606 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:25:51:678 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-24 14:25:51:678 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

