2023-08-20 21:15:54:060 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE VAR (BLOCK (ALT 'var'))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSP (BLOCK (ALT ':'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-20 21:15:54:085 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE VAR (BLOCK (ALT 'var'))) (RULE INT (BLOCK (ALT 'int'))) (RULE FLOAT (BLOCK (ALT 'float'))) (RULE BOOL (BLOCK (ALT 'bool'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE DOSP (BLOCK (ALT ':'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-20 21:15:54:670 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declaration {$inst = $declaration.decla}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declaration (returns interfaces.Instruction decla) (BLOCK (ALT VAR ID DOSP INT IG expr {$decla = instructions.NewDecla($VAR.line, $VAR.pos, INTEGER, $ID.text, $expr.e);}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })))))
2023-08-20 21:15:54:675 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declaration {$inst = $declaration.decla}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declaration (returns interfaces.Instruction decla) (BLOCK (ALT VAR ID DOSP INT IG expr {$decla = instructions.NewDecla($VAR.line, $VAR.pos, INTEGER, $ID.text, $expr.e);}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })))))
2023-08-20 21:15:54:680 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT declaration {$inst = $declaration.decla}) (ALT ifstmt { }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE declaration (returns interfaces.Instruction decla) (BLOCK (ALT VAR ID DOSP INT IG expr {$decla = instructions.NewDecla($VAR.line, $VAR.pos, INTEGER, $ID.text, $expr.e);}))) (RULE ifstmt (BLOCK (ALT IF PARIZQ expr PARDER LLAVEIZQ block LLAVEDER))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })))))
2023-08-20 21:15:54:680 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-20 21:15:54:720 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=290> expr<tokenIndex=292> PARDER<tokenIndex=294> { $e = $expr.e } 
        | NUMBER<tokenIndex=300>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=306>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=312> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=318> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MUL<tokenIndex=165>|DIV<tokenIndex=167>) right=expr<tokenIndex=172,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(ADD<tokenIndex=185>|SUB<tokenIndex=187>) right=expr<tokenIndex=192,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(MAY_IG<tokenIndex=205>|MAYOR<tokenIndex=207>) right=expr<tokenIndex=212,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=(MEN_IG<tokenIndex=225>|MENOR<tokenIndex=227>) right=expr<tokenIndex=232,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=(IG_IG<tokenIndex=245>|DIF<tokenIndex=247>) right=expr<tokenIndex=252,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 7)}?<p=7> op=AND<tokenIndex=264> right=expr<tokenIndex=268,p=8> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 6)}?<p=6> op=OR<tokenIndex=280> right=expr<tokenIndex=284,p=7> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-20 21:15:54:745 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 290))) (expr (ELEMENT_OPTIONS (= tokenIndex 292))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 294))) { $e = $expr.e }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 300))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 306))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 312))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 318))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 165))) (DIV (ELEMENT_OPTIONS (= tokenIndex 167))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 172) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 185))) (SUB (ELEMENT_OPTIONS (= tokenIndex 187))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 192) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 205))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 207))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 212) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 225))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 227))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 232) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 245))) (DIF (ELEMENT_OPTIONS (= tokenIndex 247))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 252) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 7)}? (ELEMENT_OPTIONS (= p 7))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 264)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 268) (= p 8)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 6)}? (ELEMENT_OPTIONS (= p 6))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 280)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 284) (= p 7)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-20 21:15:54:765 grammar LogManager.java:25 import VAR=1
2023-08-20 21:15:54:765 grammar LogManager.java:25 import INT=2
2023-08-20 21:15:54:765 grammar LogManager.java:25 import FLOAT=3
2023-08-20 21:15:54:765 grammar LogManager.java:25 import BOOL=4
2023-08-20 21:15:54:765 grammar LogManager.java:25 import TRU=5
2023-08-20 21:15:54:765 grammar LogManager.java:25 import FAL=6
2023-08-20 21:15:54:765 grammar LogManager.java:25 import PRINT=7
2023-08-20 21:15:54:765 grammar LogManager.java:25 import IF=8
2023-08-20 21:15:54:765 grammar LogManager.java:25 import ELSE=9
2023-08-20 21:15:54:765 grammar LogManager.java:25 import WHILE=10
2023-08-20 21:15:54:765 grammar LogManager.java:25 import NUMBER=11
2023-08-20 21:15:54:765 grammar LogManager.java:25 import STRING=12
2023-08-20 21:15:54:765 grammar LogManager.java:25 import ID=13
2023-08-20 21:15:54:765 grammar LogManager.java:25 import DIF=14
2023-08-20 21:15:54:765 grammar LogManager.java:25 import IG_IG=15
2023-08-20 21:15:54:765 grammar LogManager.java:25 import NOT=16
2023-08-20 21:15:54:765 grammar LogManager.java:25 import OR=17
2023-08-20 21:15:54:765 grammar LogManager.java:25 import AND=18
2023-08-20 21:15:54:765 grammar LogManager.java:25 import IG=19
2023-08-20 21:15:54:769 grammar LogManager.java:25 import MAY_IG=20
2023-08-20 21:15:54:769 grammar LogManager.java:25 import MEN_IG=21
2023-08-20 21:15:54:769 grammar LogManager.java:25 import MAYOR=22
2023-08-20 21:15:54:769 grammar LogManager.java:25 import MENOR=23
2023-08-20 21:15:54:769 grammar LogManager.java:25 import MUL=24
2023-08-20 21:15:54:769 grammar LogManager.java:25 import DIV=25
2023-08-20 21:15:54:769 grammar LogManager.java:25 import ADD=26
2023-08-20 21:15:54:769 grammar LogManager.java:25 import SUB=27
2023-08-20 21:15:54:769 grammar LogManager.java:25 import PARIZQ=28
2023-08-20 21:15:54:769 grammar LogManager.java:25 import PARDER=29
2023-08-20 21:15:54:769 grammar LogManager.java:25 import LLAVEIZQ=30
2023-08-20 21:15:54:770 grammar LogManager.java:25 import LLAVEDER=31
2023-08-20 21:15:54:770 grammar LogManager.java:25 import DOSP=32
2023-08-20 21:15:54:770 grammar LogManager.java:25 import WHITESPACE=33
2023-08-20 21:15:54:770 grammar LogManager.java:25 import COMMENT=34
2023-08-20 21:15:54:770 grammar LogManager.java:25 import LINE_COMMENT=35
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'var'=1
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'int'=2
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'float'=3
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'bool'=4
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'true'=5
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'false'=6
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'print'=7
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'if'=8
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'else'=9
2023-08-20 21:15:54:770 grammar LogManager.java:25 import 'while'=10
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '!='=14
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '=='=15
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '!'=16
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '||'=17
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '&&'=18
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '='=19
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '>='=20
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '<='=21
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '>'=22
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '<'=23
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '*'=24
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '/'=25
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '+'=26
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '-'=27
2023-08-20 21:15:54:770 grammar LogManager.java:25 import '('=28
2023-08-20 21:15:54:775 grammar LogManager.java:25 import ')'=29
2023-08-20 21:15:54:775 grammar LogManager.java:25 import '{'=30
2023-08-20 21:15:54:775 grammar LogManager.java:25 import '}'=31
2023-08-20 21:15:54:775 grammar LogManager.java:25 import ':'=32
2023-08-20 21:15:54:775 grammar LogManager.java:25 tokens={VAR=1, INT=2, FLOAT=3, BOOL=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, NUMBER=11, STRING=12, ID=13, DIF=14, IG_IG=15, NOT=16, OR=17, AND=18, IG=19, MAY_IG=20, MEN_IG=21, MAYOR=22, MENOR=23, MUL=24, DIV=25, ADD=26, SUB=27, PARIZQ=28, PARDER=29, LLAVEIZQ=30, LLAVEDER=31, DOSP=32, WHITESPACE=33, COMMENT=34, LINE_COMMENT=35, 'var'=1, 'int'=2, 'float'=3, 'bool'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, '!='=14, '=='=15, '!'=16, '||'=17, '&&'=18, '='=19, '>='=20, '<='=21, '>'=22, '<'=23, '*'=24, '/'=25, '+'=26, '-'=27, '('=28, ')'=29, '{'=30, '}'=31, ':'=32}
2023-08-20 21:15:54:775 semantics LogManager.java:25 tokens={EOF=-1, VAR=1, INT=2, FLOAT=3, BOOL=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, NUMBER=11, STRING=12, ID=13, DIF=14, IG_IG=15, NOT=16, OR=17, AND=18, IG=19, MAY_IG=20, MEN_IG=21, MAYOR=22, MENOR=23, MUL=24, DIV=25, ADD=26, SUB=27, PARIZQ=28, PARDER=29, LLAVEIZQ=30, LLAVEDER=31, DOSP=32, WHITESPACE=33, COMMENT=34, LINE_COMMENT=35}
2023-08-20 21:15:54:775 semantics LogManager.java:25 strings={'var'=1, 'int'=2, 'float'=3, 'bool'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, '!='=14, '=='=15, '!'=16, '||'=17, '&&'=18, '='=19, '>='=20, '<='=21, '>'=22, '<'=23, '*'=24, '/'=25, '+'=26, '-'=27, '('=28, ')'=29, '{'=30, '}'=31, ':'=32}
2023-08-20 21:15:54:810 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-20 21:15:54:810 LL1 LogManager.java:25 look=[{1, 7..8}, {<EOF>, 31}]
2023-08-20 21:15:54:810 LL1 LogManager.java:25 LL(1)? true
2023-08-20 21:15:54:810 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-20 21:15:54:815 LL1 LogManager.java:25 look=[7, 1, 8]
2023-08-20 21:15:54:815 LL1 LogManager.java:25 LL(1)? true
2023-08-20 21:15:54:815 LL1 LogManager.java:25 
DECISION 2 in rule expr
2023-08-20 21:15:54:815 LL1 LogManager.java:25 look=[28, 11, 12, 5, 6]
2023-08-20 21:15:54:815 LL1 LogManager.java:25 LL(1)? true
2023-08-20 21:15:54:815 LL1 LogManager.java:25 
DECISION 3 in rule expr
2023-08-20 21:15:54:815 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-20 21:15:54:815 LL1 LogManager.java:25 LL(1)? false
2023-08-20 21:15:54:815 LL1 LogManager.java:25 
DECISION 4 in rule expr
2023-08-20 21:15:54:815 LL1 LogManager.java:25 look=[null, null]
2023-08-20 21:15:54:815 LL1 LogManager.java:25 LL(1)? false
2023-08-20 21:15:54:820 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-20 21:15:54:840 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-20 21:15:54:840 action-translator LogManager.java:25 attr [@-1,14:17='code',<0>,20:9]
2023-08-20 21:15:54:840 action-translator LogManager.java:25 qattr [@-1,22:26='block',<0>,20:17].[@-1,28:30='blk',<0>,20:23]
2023-08-20 21:15:54:840 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-20 21:15:54:840 action-translator LogManager.java:25 attr [@-1,7:9='blk',<0>,26:5]
2023-08-20 21:15:54:845 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-20 21:15:54:845 action-translator LogManager.java:25 attr [@-1,105:107='blk',<0>,33:13]
2023-08-20 21:15:54:845 action-translator LogManager.java:25 attr [@-1,119:121='blk',<0>,33:27]
2023-08-20 21:15:54:845 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-20 21:15:54:845 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-20 21:15:54:845 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-20 21:15:54:845 action-translator LogManager.java:25 translate $inst = $declaration.decla
2023-08-20 21:15:54:845 action-translator LogManager.java:25 attr [@-1,1:4='inst',<0>,40:15]
2023-08-20 21:15:54:845 action-translator LogManager.java:25 qattr [@-1,9:19='declaration',<0>,40:23].[@-1,21:25='decla',<0>,40:35]
2023-08-20 21:15:54:850 action-translator LogManager.java:25 translate  
2023-08-20 21:15:54:850 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-20 21:15:54:850 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,45:29]
2023-08-20 21:15:54:850 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,45:59].[@-1,38:41='line',<0>,45:65]
2023-08-20 21:15:54:855 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,45:71].[@-1,50:52='pos',<0>,45:77]
2023-08-20 21:15:54:855 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,45:82].[@-1,60:60='e',<0>,45:87]
2023-08-20 21:15:54:855 action-translator LogManager.java:25 translate $decla = instructions.NewDecla($VAR.line, $VAR.pos, INTEGER, $ID.text, $expr.e);
2023-08-20 21:15:54:855 action-translator LogManager.java:25 setAttr [@-1,1:5='decla',<0>,49:27] [@-1,8:78=' instructions.NewDecla($VAR.line, $VAR.pos, INTEGER, $ID.text, $expr.e)',<0>,49:34]
2023-08-20 21:15:54:855 action-translator LogManager.java:25 translate  instructions.NewDecla($VAR.line, $VAR.pos, INTEGER, $ID.text, $expr.e)
2023-08-20 21:15:54:860 action-translator LogManager.java:25 qattr [@-1,24:26='VAR',<0>,49:50].[@-1,28:31='line',<0>,49:54]
2023-08-20 21:15:54:860 action-translator LogManager.java:25 qattr [@-1,35:37='VAR',<0>,49:61].[@-1,39:41='pos',<0>,49:65]
2023-08-20 21:15:54:860 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,49:80].[@-1,57:60='text',<0>,49:83]
2023-08-20 21:15:54:860 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,49:90].[@-1,69:69='e',<0>,49:95]
2023-08-20 21:15:54:865 action-translator LogManager.java:25 translate 
2023-08-20 21:15:54:865 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-20 21:15:54:870 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,5:30].[@-1,39:42='text',<0>,5:37]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,6:43].[@-1,102:105='text',<0>,6:50]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,10:13]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,10:43].[@-1,240:243='line',<0>,10:50]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,10:56].[@-1,253:255='pos',<0>,10:63]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,12:37].[@-1,341:344='text',<0>,12:44]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,16:13]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,16:43].[@-1,474:477='line',<0>,16:50]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,16:56].[@-1,487:489='pos',<0>,16:63]
2023-08-20 21:15:54:870 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-20 21:15:54:870 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,21:16].[@-1,25:28='text',<0>,21:23]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,22:9]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,22:39].[@-1,77:80='line',<0>,22:46]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,22:53].[@-1,91:93='pos',<0>,22:60]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-20 21:15:54:875 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,24:32]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,24:62].[@-1,36:39='line',<0>,24:66]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,24:73].[@-1,47:49='pos',<0>,24:77]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-20 21:15:54:875 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,25:32]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,25:62].[@-1,36:39='line',<0>,25:66]
2023-08-20 21:15:54:875 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,25:73].[@-1,47:49='pos',<0>,25:77]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-20 21:15:54:880 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:880 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:139]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,28:169].[@-1,37:41='start',<0>,28:174]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,28:192].[@-1,60:64='start',<0>,28:197]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,28:217].[@-1,85:85='e',<0>,28:222]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,28:226].[@-1,92:95='text',<0>,28:229]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,28:236].[@-1,105:105='e',<0>,28:242]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-20 21:15:54:880 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:880 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:149]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,29:179].[@-1,37:41='start',<0>,29:184]
2023-08-20 21:15:54:880 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,29:202].[@-1,60:64='start',<0>,29:207]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,29:227].[@-1,85:85='e',<0>,29:232]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,29:236].[@-1,92:95='text',<0>,29:239]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,29:246].[@-1,105:105='e',<0>,29:252]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-20 21:15:54:885 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:885 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:154]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:184].[@-1,37:41='start',<0>,30:189]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:207].[@-1,60:64='start',<0>,30:212]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:232].[@-1,85:85='e',<0>,30:237]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:241].[@-1,92:95='text',<0>,30:244]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:251].[@-1,105:105='e',<0>,30:257]
2023-08-20 21:15:54:885 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-20 21:15:54:885 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:890 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:152]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:182].[@-1,37:41='start',<0>,31:187]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:205].[@-1,60:64='start',<0>,31:210]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:230].[@-1,85:85='e',<0>,31:235]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:239].[@-1,92:95='text',<0>,31:242]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:249].[@-1,105:105='e',<0>,31:255]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-20 21:15:54:890 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:890 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:148]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:178].[@-1,37:41='start',<0>,32:183]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:201].[@-1,60:64='start',<0>,32:206]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:226].[@-1,85:85='e',<0>,32:231]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:235].[@-1,92:95='text',<0>,32:238]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:245].[@-1,105:105='e',<0>,32:251]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-20 21:15:54:890 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:890 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:124]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:154].[@-1,37:41='start',<0>,33:159]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:177].[@-1,60:64='start',<0>,33:182]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:202].[@-1,85:85='e',<0>,33:207]
2023-08-20 21:15:54:890 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:211].[@-1,92:95='text',<0>,33:214]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:221].[@-1,105:105='e',<0>,33:227]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-20 21:15:54:895 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:123]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:153].[@-1,37:41='start',<0>,34:158]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:176].[@-1,60:64='start',<0>,34:181]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:201].[@-1,85:85='e',<0>,34:206]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:210].[@-1,92:95='text',<0>,34:213]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:220].[@-1,105:105='e',<0>,34:226]
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 7)
2023-08-20 21:15:54:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 6)
2023-08-20 21:15:55:250 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-20 21:15:55:250 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-20 21:15:55:335 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-20 21:15:55:335 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

