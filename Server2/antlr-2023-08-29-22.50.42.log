2023-08-29 22:50:40:878 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-29 22:50:40:916 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-29 22:50:41:764 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 22:50:41:781 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 22:50:41:785 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 22:50:41:785 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-29 22:50:41:823 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=311>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=305> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-08-29 22:50:41:832 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 311))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 305))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-08-29 22:50:41:837 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=446>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=440> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-08-29 22:50:41:842 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 446))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 440))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-08-29 22:50:41:853 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=719> expr<tokenIndex=721> PARDER<tokenIndex=723> { $e = $expr.e } 
        | list=listArray<tokenIndex=731> { $e = $list.p} 
        | INT<tokenIndex=737> PARIZQ<tokenIndex=739> expr<tokenIndex=741> PARDER<tokenIndex=743> { $e = expressions.NewConversion($expr.e, environment.INTEGER) } 
        | STR<tokenIndex=749> PARIZQ<tokenIndex=751> expr<tokenIndex=753> PARDER<tokenIndex=755> { $e = expressions.NewConversion($expr.e, environment.STRING) } 
        | FLOAT<tokenIndex=761> PARIZQ<tokenIndex=763> expr<tokenIndex=765> PARDER<tokenIndex=767> { $e = expressions.NewConversion($expr.e, environment.FLOAT) } 
        | CORIZQ<tokenIndex=773> listParams<tokenIndex=775> CORDER<tokenIndex=777> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=783>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=789>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=795> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=801> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MUL<tokenIndex=594>|DIV<tokenIndex=596>) right=expr<tokenIndex=601,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(ADD<tokenIndex=614>|SUB<tokenIndex=616>) right=expr<tokenIndex=621,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MAY_IG<tokenIndex=634>|MAYOR<tokenIndex=636>) right=expr<tokenIndex=641,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MEN_IG<tokenIndex=654>|MENOR<tokenIndex=656>) right=expr<tokenIndex=661,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(IG_IG<tokenIndex=674>|DIF<tokenIndex=676>) right=expr<tokenIndex=681,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=693> right=expr<tokenIndex=697,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=709> right=expr<tokenIndex=713,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-29 22:50:41:903 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 719))) (expr (ELEMENT_OPTIONS (= tokenIndex 721))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 723))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 731)))) { $e = $list.p}) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 737))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 739))) (expr (ELEMENT_OPTIONS (= tokenIndex 741))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 743))) { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT (STR (ELEMENT_OPTIONS (= tokenIndex 749))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 751))) (expr (ELEMENT_OPTIONS (= tokenIndex 753))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 755))) { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 761))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 763))) (expr (ELEMENT_OPTIONS (= tokenIndex 765))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 767))) { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 773))) (listParams (ELEMENT_OPTIONS (= tokenIndex 775))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 777))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 783))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 789))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 795))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 801))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 594))) (DIV (ELEMENT_OPTIONS (= tokenIndex 596))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 601) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 614))) (SUB (ELEMENT_OPTIONS (= tokenIndex 616))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 621) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 634))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 636))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 641) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 654))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 656))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 661) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 674))) (DIF (ELEMENT_OPTIONS (= tokenIndex 676))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 681) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 693)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 697) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 709)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 713) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-29 22:50:41:908 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=826> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=818> expr<tokenIndex=820> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-29 22:50:41:913 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 826))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 818))) (expr (ELEMENT_OPTIONS (= tokenIndex 820))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-29 22:50:41:913 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=855> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=845> expr<tokenIndex=847> CORDER<tokenIndex=849> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-29 22:50:41:918 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 855))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 845))) (expr (ELEMENT_OPTIONS (= tokenIndex 847))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 849))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-29 22:50:41:958 grammar LogManager.java:25 import INT=1
2023-08-29 22:50:41:958 grammar LogManager.java:25 import FLOAT=2
2023-08-29 22:50:41:958 grammar LogManager.java:25 import BOOL=3
2023-08-29 22:50:41:958 grammar LogManager.java:25 import STR=4
2023-08-29 22:50:41:958 grammar LogManager.java:25 import TRU=5
2023-08-29 22:50:41:958 grammar LogManager.java:25 import FAL=6
2023-08-29 22:50:41:958 grammar LogManager.java:25 import PRINT=7
2023-08-29 22:50:41:958 grammar LogManager.java:25 import IF=8
2023-08-29 22:50:41:958 grammar LogManager.java:25 import ELSE=9
2023-08-29 22:50:41:958 grammar LogManager.java:25 import WHILE=10
2023-08-29 22:50:41:958 grammar LogManager.java:25 import FOR=11
2023-08-29 22:50:41:958 grammar LogManager.java:25 import SWITCH=12
2023-08-29 22:50:41:963 grammar LogManager.java:25 import CASE=13
2023-08-29 22:50:41:963 grammar LogManager.java:25 import DEFAULT=14
2023-08-29 22:50:41:963 grammar LogManager.java:25 import IN=15
2023-08-29 22:50:41:963 grammar LogManager.java:25 import VAR=16
2023-08-29 22:50:41:963 grammar LogManager.java:25 import BREAK=17
2023-08-29 22:50:41:963 grammar LogManager.java:25 import CONTINUE=18
2023-08-29 22:50:41:963 grammar LogManager.java:25 import RETURN=19
2023-08-29 22:50:41:963 grammar LogManager.java:25 import GUARD=20
2023-08-29 22:50:41:963 grammar LogManager.java:25 import NUMBER=21
2023-08-29 22:50:41:963 grammar LogManager.java:25 import STRING=22
2023-08-29 22:50:41:963 grammar LogManager.java:25 import ID=23
2023-08-29 22:50:41:963 grammar LogManager.java:25 import DIF=24
2023-08-29 22:50:41:963 grammar LogManager.java:25 import IG_IG=25
2023-08-29 22:50:41:963 grammar LogManager.java:25 import NOT=26
2023-08-29 22:50:41:963 grammar LogManager.java:25 import OR=27
2023-08-29 22:50:41:963 grammar LogManager.java:25 import AND=28
2023-08-29 22:50:41:963 grammar LogManager.java:25 import IG=29
2023-08-29 22:50:41:963 grammar LogManager.java:25 import MAY_IG=30
2023-08-29 22:50:41:963 grammar LogManager.java:25 import MEN_IG=31
2023-08-29 22:50:41:963 grammar LogManager.java:25 import MAYOR=32
2023-08-29 22:50:41:963 grammar LogManager.java:25 import MENOR=33
2023-08-29 22:50:41:963 grammar LogManager.java:25 import MUL=34
2023-08-29 22:50:41:963 grammar LogManager.java:25 import DIV=35
2023-08-29 22:50:41:963 grammar LogManager.java:25 import ADD=36
2023-08-29 22:50:41:963 grammar LogManager.java:25 import SUB=37
2023-08-29 22:50:41:963 grammar LogManager.java:25 import PARIZQ=38
2023-08-29 22:50:41:963 grammar LogManager.java:25 import PARDER=39
2023-08-29 22:50:41:963 grammar LogManager.java:25 import LLAVEIZQ=40
2023-08-29 22:50:41:963 grammar LogManager.java:25 import LLAVEDER=41
2023-08-29 22:50:41:963 grammar LogManager.java:25 import D_PTS=42
2023-08-29 22:50:41:963 grammar LogManager.java:25 import CORIZQ=43
2023-08-29 22:50:41:963 grammar LogManager.java:25 import CORDER=44
2023-08-29 22:50:41:963 grammar LogManager.java:25 import COMA=45
2023-08-29 22:50:41:963 grammar LogManager.java:25 import PUNTO=46
2023-08-29 22:50:41:968 grammar LogManager.java:25 import WHITESPACE=47
2023-08-29 22:50:41:968 grammar LogManager.java:25 import COMMENT=48
2023-08-29 22:50:41:968 grammar LogManager.java:25 import LINE_COMMENT=49
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'Int'=1
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'Float'=2
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'Bool'=3
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'String'=4
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'true'=5
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'false'=6
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'print'=7
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'if'=8
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'else'=9
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'while'=10
2023-08-29 22:50:41:968 grammar LogManager.java:25 import 'for'=11
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'switch'=12
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'case'=13
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'default'=14
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'in'=15
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'var'=16
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'break'=17
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'continue'=18
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'return'=19
2023-08-29 22:50:41:973 grammar LogManager.java:25 import 'guard'=20
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '!='=24
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '=='=25
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '!'=26
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '||'=27
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '&&'=28
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '='=29
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '>='=30
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '<='=31
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '>'=32
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '<'=33
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '*'=34
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '/'=35
2023-08-29 22:50:41:973 grammar LogManager.java:25 import '+'=36
2023-08-29 22:50:41:978 grammar LogManager.java:25 import '-'=37
2023-08-29 22:50:41:978 grammar LogManager.java:25 import '('=38
2023-08-29 22:50:41:978 grammar LogManager.java:25 import ')'=39
2023-08-29 22:50:41:978 grammar LogManager.java:25 import '{'=40
2023-08-29 22:50:41:978 grammar LogManager.java:25 import '}'=41
2023-08-29 22:50:41:978 grammar LogManager.java:25 import ':'=42
2023-08-29 22:50:41:978 grammar LogManager.java:25 import '['=43
2023-08-29 22:50:41:978 grammar LogManager.java:25 import ']'=44
2023-08-29 22:50:41:978 grammar LogManager.java:25 import ','=45
2023-08-29 22:50:41:978 grammar LogManager.java:25 import '.'=46
2023-08-29 22:50:41:978 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, BREAK=17, CONTINUE=18, RETURN=19, GUARD=20, NUMBER=21, STRING=22, ID=23, DIF=24, IG_IG=25, NOT=26, OR=27, AND=28, IG=29, MAY_IG=30, MEN_IG=31, MAYOR=32, MENOR=33, MUL=34, DIV=35, ADD=36, SUB=37, PARIZQ=38, PARDER=39, LLAVEIZQ=40, LLAVEDER=41, D_PTS=42, CORIZQ=43, CORDER=44, COMA=45, PUNTO=46, WHITESPACE=47, COMMENT=48, LINE_COMMENT=49, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'break'=17, 'continue'=18, 'return'=19, 'guard'=20, '!='=24, '=='=25, '!'=26, '||'=27, '&&'=28, '='=29, '>='=30, '<='=31, '>'=32, '<'=33, '*'=34, '/'=35, '+'=36, '-'=37, '('=38, ')'=39, '{'=40, '}'=41, ':'=42, '['=43, ']'=44, ','=45, '.'=46}
2023-08-29 22:50:41:978 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, BREAK=17, CONTINUE=18, RETURN=19, GUARD=20, NUMBER=21, STRING=22, ID=23, DIF=24, IG_IG=25, NOT=26, OR=27, AND=28, IG=29, MAY_IG=30, MEN_IG=31, MAYOR=32, MENOR=33, MUL=34, DIV=35, ADD=36, SUB=37, PARIZQ=38, PARDER=39, LLAVEIZQ=40, LLAVEDER=41, D_PTS=42, CORIZQ=43, CORDER=44, COMA=45, PUNTO=46, WHITESPACE=47, COMMENT=48, LINE_COMMENT=49}
2023-08-29 22:50:41:978 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'break'=17, 'continue'=18, 'return'=19, 'guard'=20, '!='=24, '=='=25, '!'=26, '||'=27, '&&'=28, '='=29, '>='=30, '<='=31, '>'=32, '<'=33, '*'=34, '/'=35, '+'=36, '-'=37, '('=38, ')'=39, '{'=40, '}'=41, ':'=42, '['=43, ']'=44, ','=45, '.'=46}
2023-08-29 22:50:42:033 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-29 22:50:42:033 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..18, 20, 23}, null]
2023-08-29 22:50:42:033 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:033 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-29 22:50:42:033 LL1 LogManager.java:25 look=[7, 8, 16, 23, 10, 11, 12, 17, 18, 20]
2023-08-29 22:50:42:033 LL1 LogManager.java:25 LL(1)? true
2023-08-29 22:50:42:033 LL1 LogManager.java:25 
DECISION 2 in rule forstmt
2023-08-29 22:50:42:033 LL1 LogManager.java:25 look=[11, 11]
2023-08-29 22:50:42:033 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:033 LL1 LogManager.java:25 
DECISION 3 in rule caselist
2023-08-29 22:50:42:033 LL1 LogManager.java:25 look=[null, 14]
2023-08-29 22:50:42:033 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:033 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-29 22:50:42:033 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-08-29 22:50:42:033 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:033 LL1 LogManager.java:25 
DECISION 5 in rule elseiflist
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[null, null]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:038 LL1 LogManager.java:25 
DECISION 6 in rule types
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[1, 2, 4, 3, 43]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? true
2023-08-29 22:50:42:038 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[38, 23, 1, 4, 2, 43, 21, 22, 5, 6]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? true
2023-08-29 22:50:42:038 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:038 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[null, null]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:038 LL1 LogManager.java:25 
DECISION 10 in rule listParams
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[null, 44]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:038 LL1 LogManager.java:25 
DECISION 11 in rule listArray
2023-08-29 22:50:42:038 LL1 LogManager.java:25 look=[null, null]
2023-08-29 22:50:42:038 LL1 LogManager.java:25 LL(1)? false
2023-08-29 22:50:42:048 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 22:50:42:073 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-29 22:50:42:073 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-29 22:50:42:073 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-29 22:50:42:073 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-29 22:50:42:073 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-29 22:50:42:078 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-29 22:50:42:078 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-29 22:50:42:078 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-29 22:50:42:078 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-29 22:50:42:078 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-29 22:50:42:078 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-29 22:50:42:078 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-29 22:50:42:078 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-29 22:50:42:083 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-08-29 22:50:42:083 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,42:23].[@-1,21:25='asign',<0>,42:34]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-08-29 22:50:42:083 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:25='whiles',<0>,43:32]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-08-29 22:50:42:083 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:21='fors',<0>,44:28]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-08-29 22:50:42:083 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-08-29 22:50:42:083 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,45:22].[@-1,20:24='swtch',<0>,45:32]
2023-08-29 22:50:42:088 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-08-29 22:50:42:088 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:13]
2023-08-29 22:50:42:088 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,46:21].[@-1,19:23='break',<0>,46:30]
2023-08-29 22:50:42:090 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-08-29 22:50:42:090 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:15]
2023-08-29 22:50:42:090 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,47:23].[@-1,22:29='continue',<0>,47:35]
2023-08-29 22:50:42:090 action-translator LogManager.java:25 translate  $inst = $guardtmt.guard 
2023-08-29 22:50:42:090 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:13]
2023-08-29 22:50:42:090 action-translator LogManager.java:25 qattr [@-1,10:17='guardtmt',<0>,48:21].[@-1,19:23='guard',<0>,48:30]
2023-08-29 22:50:42:093 action-translator LogManager.java:25 translate $guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )
2023-08-29 22:50:42:093 action-translator LogManager.java:25 attr [@-1,1:5='guard',<0>,52:43]
2023-08-29 22:50:42:093 action-translator LogManager.java:25 qattr [@-1,33:37='GUARD',<0>,52:75].[@-1,39:42='line',<0>,52:81]
2023-08-29 22:50:42:093 action-translator LogManager.java:25 qattr [@-1,46:50='GUARD',<0>,52:88].[@-1,52:54='pos',<0>,52:94]
2023-08-29 22:50:42:093 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,52:100].[@-1,63:63='e',<0>,52:105]
2023-08-29 22:50:42:093 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,52:109].[@-1,73:75='blk',<0>,52:115]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-08-29 22:50:42:098 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,56:10]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,56:41].[@-1,39:42='line',<0>,56:47]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,56:54].[@-1,52:54='pos',<0>,56:60]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-08-29 22:50:42:098 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,60:13]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,60:50].[@-1,48:51='line',<0>,60:59]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,60:66].[@-1,64:66='pos',<0>,60:75]
2023-08-29 22:50:42:098 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-29 22:50:42:103 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,64:29]
2023-08-29 22:50:42:103 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,64:59].[@-1,38:41='line',<0>,64:65]
2023-08-29 22:50:42:103 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,64:71].[@-1,50:52='pos',<0>,64:77]
2023-08-29 22:50:42:103 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,64:82].[@-1,60:60='e',<0>,64:87]
2023-08-29 22:50:42:103 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-08-29 22:50:42:103 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,70:74]
2023-08-29 22:50:42:108 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,70:102].[@-1,34:37='line',<0>,70:106]
2023-08-29 22:50:42:108 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,70:113].[@-1,45:47='pos',<0>,70:117]
2023-08-29 22:50:42:108 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,70:123].[@-1,54:57='text',<0>,70:126]
2023-08-29 22:50:42:108 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,70:133].[@-1,64:64='e',<0>,70:136]
2023-08-29 22:50:42:108 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,70:139].[@-1,70:70='e',<0>,70:142]
2023-08-29 22:50:42:108 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,70:152].[@-1,86:88='blk',<0>,70:158]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-08-29 22:50:42:113 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,71:56]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,71:84].[@-1,34:37='line',<0>,71:88]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,71:95].[@-1,45:47='pos',<0>,71:99]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,71:105].[@-1,54:57='text',<0>,71:108]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,71:124].[@-1,74:77='text',<0>,71:128]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,71:135].[@-1,87:89='blk',<0>,71:141]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-08-29 22:50:42:113 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,75:64]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,75:97].[@-1,42:45='line',<0>,75:104]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,75:111].[@-1,56:58='pos',<0>,75:118]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,75:124].[@-1,67:67='e',<0>,75:129]
2023-08-29 22:50:42:113 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,75:132].[@-1,79:83='cases',<0>,75:141]
2023-08-29 22:50:42:118 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,75:149].[@-1,93:95='blk',<0>,75:155]
2023-08-29 22:50:42:118 action-translator LogManager.java:25 translate 
2023-08-29 22:50:42:118 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-08-29 22:50:42:118 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-08-29 22:50:42:118 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-08-29 22:50:42:118 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-08-29 22:50:42:118 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:123 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-08-29 22:50:42:123 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:123 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-08-29 22:50:42:123 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,90:26]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,90:57].[@-1,38:41='line',<0>,90:62]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,90:69].[@-1,50:52='pos',<0>,90:74]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,90:79].[@-1,60:60='e',<0>,90:84]
2023-08-29 22:50:42:123 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,90:88].[@-1,70:72='blk',<0>,90:94]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-29 22:50:42:128 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,94:36]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,94:65].[@-1,34:37='line',<0>,94:68]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,94:75].[@-1,44:46='pos',<0>,94:78]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,94:84].[@-1,55:55='e',<0>,94:89]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,94:93].[@-1,65:67='blk',<0>,94:99]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-08-29 22:50:42:128 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,95:69]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,95:98].[@-1,33:36='line',<0>,95:101]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,95:108].[@-1,43:45='pos',<0>,95:111]
2023-08-29 22:50:42:128 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,95:117].[@-1,54:54='e',<0>,95:122]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,95:126].[@-1,61:63='blk',<0>,95:129]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,95:140].[@-1,75:77='blk',<0>,95:143]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-08-29 22:50:42:133 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,96:47]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,96:76].[@-1,34:37='line',<0>,96:79]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,96:86].[@-1,44:46='pos',<0>,96:89]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,96:95].[@-1,55:55='e',<0>,96:100]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,96:104].[@-1,65:67='blk',<0>,96:110]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,96:116].[@-1,82:93='else_if_list',<0>,96:127]
2023-08-29 22:50:42:133 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-08-29 22:50:42:133 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,97:82]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,97:111].[@-1,34:37='line',<0>,97:114]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,97:121].[@-1,44:46='pos',<0>,97:124]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,97:130].[@-1,55:55='e',<0>,97:135]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,97:139].[@-1,62:64='blk',<0>,97:142]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,97:148].[@-1,79:90='else_if_list',<0>,97:159]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,97:174].[@-1,97:99='blk',<0>,97:177]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 translate 
2023-08-29 22:50:42:138 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-08-29 22:50:42:138 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-08-29 22:50:42:138 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:143 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-08-29 22:50:42:143 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:143 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-29 22:50:42:143 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,114:41]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,114:70].[@-1,34:37='line',<0>,114:73]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,114:80].[@-1,44:46='pos',<0>,114:83]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,114:89].[@-1,55:55='e',<0>,114:94]
2023-08-29 22:50:42:143 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,114:98].[@-1,65:67='blk',<0>,114:104]
2023-08-29 22:50:42:148 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-29 22:50:42:148 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,119:39]
2023-08-29 22:50:42:148 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,119:71].[@-1,40:43='line',<0>,119:77]
2023-08-29 22:50:42:148 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,119:84].[@-1,53:55='pos',<0>,119:90]
2023-08-29 22:50:42:148 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,119:96].[@-1,64:64='e',<0>,119:101]
2023-08-29 22:50:42:148 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,119:105].[@-1,74:76='blk',<0>,119:111]
2023-08-29 22:50:42:148 action-translator LogManager.java:25 translate 
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    
2023-08-29 22:50:42:153 action-translator LogManager.java:25 setAttr [@-1,10:12='dec',<0>,125:9] [@-1,15:93=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)',<0>,125:14]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)
2023-08-29 22:50:42:153 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,124:34].[@-1,34:37='line',<0>,124:38]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,124:45].[@-1,45:47='pos',<0>,124:49]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,124:55].[@-1,54:57='text',<0>,124:58]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,124:65].[@-1,67:68='ty',<0>,124:71]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,124:76].[@-1,77:77='e',<0>,124:81]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-08-29 22:50:42:153 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,132:15]
2023-08-29 22:50:42:153 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,132:51].[@-1,41:44='line',<0>,132:54]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,132:61].[@-1,51:53='pos',<0>,132:64]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,132:70].[@-1,60:63='text',<0>,132:73]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,132:80].[@-1,72:72='e',<0>,132:85]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-29 22:50:42:158 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,138:8]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-29 22:50:42:158 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,139:10]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-29 22:50:42:158 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,140:8]
2023-08-29 22:50:42:158 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-29 22:50:42:158 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,141:9]
2023-08-29 22:50:42:163 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-29 22:50:42:163 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,142:18]
2023-08-29 22:50:42:169 action-translator LogManager.java:25 translate 
2023-08-29 22:50:42:169 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-29 22:50:42:170 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-29 22:50:42:170 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-29 22:50:42:170 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-29 22:50:42:171 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-29 22:50:42:171 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-29 22:50:42:172 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, environment.INTEGER) 
2023-08-29 22:50:42:172 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:99]
2023-08-29 22:50:42:172 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,4:130].[@-1,38:38='e',<0>,4:135]
2023-08-29 22:50:42:173 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, environment.STRING) 
2023-08-29 22:50:42:173 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:99]
2023-08-29 22:50:42:173 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,5:130].[@-1,38:38='e',<0>,5:135]
2023-08-29 22:50:42:173 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, environment.FLOAT) 
2023-08-29 22:50:42:173 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:101]
2023-08-29 22:50:42:174 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,6:132].[@-1,38:38='e',<0>,6:137]
2023-08-29 22:50:42:174 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-29 22:50:42:174 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:85]
2023-08-29 22:50:42:174 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:111].[@-1,35:38='line',<0>,7:118]
2023-08-29 22:50:42:174 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:125].[@-1,49:51='pos',<0>,7:132]
2023-08-29 22:50:42:174 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:138].[@-1,66:66='l',<0>,7:149]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,10:30].[@-1,39:42='text',<0>,10:37]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,11:43].[@-1,102:105='text',<0>,11:50]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,15:13]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,15:43].[@-1,240:243='line',<0>,15:50]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,15:56].[@-1,253:255='pos',<0>,15:63]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,17:37].[@-1,341:344='text',<0>,17:44]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,21:13]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,21:43].[@-1,474:477='line',<0>,21:50]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,21:56].[@-1,487:489='pos',<0>,21:63]
2023-08-29 22:50:42:175 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-29 22:50:42:175 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,26:16].[@-1,25:28='text',<0>,26:23]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,27:9]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,27:39].[@-1,77:80='line',<0>,27:46]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,27:53].[@-1,91:93='pos',<0>,27:60]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-29 22:50:42:178 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-29 22:50:42:178 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-08-29 22:50:42:178 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 22:50:42:183 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:183 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:139]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:169].[@-1,37:41='start',<0>,33:174]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:192].[@-1,60:64='start',<0>,33:197]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:217].[@-1,85:85='e',<0>,33:222]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:226].[@-1,92:95='text',<0>,33:229]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:236].[@-1,105:105='e',<0>,33:242]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 22:50:42:183 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:183 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:149]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:179].[@-1,37:41='start',<0>,34:184]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:202].[@-1,60:64='start',<0>,34:207]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:227].[@-1,85:85='e',<0>,34:232]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:236].[@-1,92:95='text',<0>,34:239]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:246].[@-1,105:105='e',<0>,34:252]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 22:50:42:183 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:183 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-08-29 22:50:42:183 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 22:50:42:188 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:188 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:154]
2023-08-29 22:50:42:188 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:184].[@-1,37:41='start',<0>,36:189]
2023-08-29 22:50:42:188 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:207].[@-1,60:64='start',<0>,36:212]
2023-08-29 22:50:42:188 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:232].[@-1,85:85='e',<0>,36:237]
2023-08-29 22:50:42:188 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:241].[@-1,92:95='text',<0>,36:244]
2023-08-29 22:50:42:188 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:251].[@-1,105:105='e',<0>,36:257]
2023-08-29 22:50:42:188 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 22:50:42:190 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:190 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:151]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:181].[@-1,37:41='start',<0>,37:186]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:204].[@-1,60:64='start',<0>,37:209]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:229].[@-1,85:85='e',<0>,37:234]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:238].[@-1,92:95='text',<0>,37:241]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:248].[@-1,105:105='e',<0>,37:254]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-29 22:50:42:190 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:190 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:127]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:157].[@-1,37:41='start',<0>,38:162]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:180].[@-1,60:64='start',<0>,38:185]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:205].[@-1,85:85='e',<0>,38:210]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:214].[@-1,92:95='text',<0>,38:217]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:224].[@-1,105:105='e',<0>,38:230]
2023-08-29 22:50:42:190 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 22:50:42:193 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:126]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:156].[@-1,37:41='start',<0>,39:161]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:179].[@-1,60:64='start',<0>,39:184]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:204].[@-1,85:85='e',<0>,39:209]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:213].[@-1,92:95='text',<0>,39:216]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:223].[@-1,105:105='e',<0>,39:229]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate 
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-29 22:50:42:193 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-29 22:50:42:193 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:198 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:198 action-translator LogManager.java:25 translate 
2023-08-29 22:50:42:198 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-29 22:50:42:198 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:198 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-29 22:50:42:198 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-29 22:50:42:198 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-29 22:50:42:203 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-29 22:50:42:203 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 22:50:42:663 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 22:50:42:663 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 22:50:42:749 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 22:50:42:753 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

