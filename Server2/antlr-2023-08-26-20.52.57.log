2023-08-26 20:52:55:602 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-26 20:52:55:627 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-26 20:52:56:217 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"", "", $block.blk) }) (ALT FOR ID IN STRING LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", $STRING.text, "" ,$block.blk ) }) (ALT FOR ID IN (= id2 ID) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", "", $id2.text, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-26 20:52:56:232 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"", "", $block.blk) }) (ALT FOR ID IN STRING LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", $STRING.text, "" ,$block.blk ) }) (ALT FOR ID IN (= id2 ID) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", "", $id2.text, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-26 20:52:56:237 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"", "", $block.blk) }) (ALT FOR ID IN STRING LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", $STRING.text, "" ,$block.blk ) }) (ALT FOR ID IN (= id2 ID) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", "", $id2.text, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-26 20:52:56:237 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-26 20:52:56:272 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=312>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=306> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-08-26 20:52:56:287 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 312))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 306))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-08-26 20:52:56:292 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=585> expr<tokenIndex=587> PARDER<tokenIndex=589> { $e = $expr.e } 
        | list=listArray<tokenIndex=597> { $e = $list.p} 
        | CORIZQ<tokenIndex=603> listParams<tokenIndex=605> CORDER<tokenIndex=607> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=613>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=619>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=625> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=631> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=460>|DIV<tokenIndex=462>) right=expr<tokenIndex=467,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=480>|SUB<tokenIndex=482>) right=expr<tokenIndex=487,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=500>|MAYOR<tokenIndex=502>) right=expr<tokenIndex=507,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=520>|MENOR<tokenIndex=522>) right=expr<tokenIndex=527,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=540>|DIF<tokenIndex=542>) right=expr<tokenIndex=547,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=559> right=expr<tokenIndex=563,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=575> right=expr<tokenIndex=579,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-26 20:52:56:317 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 585))) (expr (ELEMENT_OPTIONS (= tokenIndex 587))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 589))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 597)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 603))) (listParams (ELEMENT_OPTIONS (= tokenIndex 605))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 607))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 613))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 619))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 625))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 631))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 460))) (DIV (ELEMENT_OPTIONS (= tokenIndex 462))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 467) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 480))) (SUB (ELEMENT_OPTIONS (= tokenIndex 482))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 487) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 500))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 502))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 507) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 520))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 522))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 527) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 540))) (DIF (ELEMENT_OPTIONS (= tokenIndex 542))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 547) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 559)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 563) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 575)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 579) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-26 20:52:56:317 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=656> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=648> expr<tokenIndex=650> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-26 20:52:56:317 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 656))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 648))) (expr (ELEMENT_OPTIONS (= tokenIndex 650))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-26 20:52:56:317 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=685> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=675> expr<tokenIndex=677> CORDER<tokenIndex=679> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-26 20:52:56:322 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 685))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 675))) (expr (ELEMENT_OPTIONS (= tokenIndex 677))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 679))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-26 20:52:56:362 grammar LogManager.java:25 import INT=1
2023-08-26 20:52:56:362 grammar LogManager.java:25 import FLOAT=2
2023-08-26 20:52:56:362 grammar LogManager.java:25 import BOOL=3
2023-08-26 20:52:56:362 grammar LogManager.java:25 import STR=4
2023-08-26 20:52:56:362 grammar LogManager.java:25 import TRU=5
2023-08-26 20:52:56:362 grammar LogManager.java:25 import FAL=6
2023-08-26 20:52:56:362 grammar LogManager.java:25 import PRINT=7
2023-08-26 20:52:56:362 grammar LogManager.java:25 import IF=8
2023-08-26 20:52:56:362 grammar LogManager.java:25 import ELSE=9
2023-08-26 20:52:56:362 grammar LogManager.java:25 import WHILE=10
2023-08-26 20:52:56:362 grammar LogManager.java:25 import FOR=11
2023-08-26 20:52:56:362 grammar LogManager.java:25 import IN=12
2023-08-26 20:52:56:362 grammar LogManager.java:25 import VAR=13
2023-08-26 20:52:56:362 grammar LogManager.java:25 import NUMBER=14
2023-08-26 20:52:56:362 grammar LogManager.java:25 import STRING=15
2023-08-26 20:52:56:362 grammar LogManager.java:25 import ID=16
2023-08-26 20:52:56:362 grammar LogManager.java:25 import DIF=17
2023-08-26 20:52:56:367 grammar LogManager.java:25 import IG_IG=18
2023-08-26 20:52:56:367 grammar LogManager.java:25 import NOT=19
2023-08-26 20:52:56:367 grammar LogManager.java:25 import OR=20
2023-08-26 20:52:56:367 grammar LogManager.java:25 import AND=21
2023-08-26 20:52:56:367 grammar LogManager.java:25 import IG=22
2023-08-26 20:52:56:367 grammar LogManager.java:25 import MAY_IG=23
2023-08-26 20:52:56:367 grammar LogManager.java:25 import MEN_IG=24
2023-08-26 20:52:56:367 grammar LogManager.java:25 import MAYOR=25
2023-08-26 20:52:56:367 grammar LogManager.java:25 import MENOR=26
2023-08-26 20:52:56:367 grammar LogManager.java:25 import MUL=27
2023-08-26 20:52:56:367 grammar LogManager.java:25 import DIV=28
2023-08-26 20:52:56:367 grammar LogManager.java:25 import ADD=29
2023-08-26 20:52:56:367 grammar LogManager.java:25 import SUB=30
2023-08-26 20:52:56:367 grammar LogManager.java:25 import PARIZQ=31
2023-08-26 20:52:56:367 grammar LogManager.java:25 import PARDER=32
2023-08-26 20:52:56:367 grammar LogManager.java:25 import LLAVEIZQ=33
2023-08-26 20:52:56:367 grammar LogManager.java:25 import LLAVEDER=34
2023-08-26 20:52:56:367 grammar LogManager.java:25 import D_PTS=35
2023-08-26 20:52:56:367 grammar LogManager.java:25 import CORIZQ=36
2023-08-26 20:52:56:367 grammar LogManager.java:25 import CORDER=37
2023-08-26 20:52:56:367 grammar LogManager.java:25 import COMA=38
2023-08-26 20:52:56:367 grammar LogManager.java:25 import PUNTO=39
2023-08-26 20:52:56:367 grammar LogManager.java:25 import WHITESPACE=40
2023-08-26 20:52:56:372 grammar LogManager.java:25 import COMMENT=41
2023-08-26 20:52:56:372 grammar LogManager.java:25 import LINE_COMMENT=42
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'Int'=1
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'Float'=2
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'Bool'=3
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'String'=4
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'true'=5
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'false'=6
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'print'=7
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'if'=8
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'else'=9
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'while'=10
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'for'=11
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'in'=12
2023-08-26 20:52:56:372 grammar LogManager.java:25 import 'var'=13
2023-08-26 20:52:56:372 grammar LogManager.java:25 import '!='=17
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '=='=18
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '!'=19
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '||'=20
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '&&'=21
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '='=22
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '>='=23
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '<='=24
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '>'=25
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '<'=26
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '*'=27
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '/'=28
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '+'=29
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '-'=30
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '('=31
2023-08-26 20:52:56:377 grammar LogManager.java:25 import ')'=32
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '{'=33
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '}'=34
2023-08-26 20:52:56:377 grammar LogManager.java:25 import ':'=35
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '['=36
2023-08-26 20:52:56:377 grammar LogManager.java:25 import ']'=37
2023-08-26 20:52:56:377 grammar LogManager.java:25 import ','=38
2023-08-26 20:52:56:377 grammar LogManager.java:25 import '.'=39
2023-08-26 20:52:56:377 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, NUMBER=14, STRING=15, ID=16, DIF=17, IG_IG=18, NOT=19, OR=20, AND=21, IG=22, MAY_IG=23, MEN_IG=24, MAYOR=25, MENOR=26, MUL=27, DIV=28, ADD=29, SUB=30, PARIZQ=31, PARDER=32, LLAVEIZQ=33, LLAVEDER=34, D_PTS=35, CORIZQ=36, CORDER=37, COMA=38, PUNTO=39, WHITESPACE=40, COMMENT=41, LINE_COMMENT=42, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, '!='=17, '=='=18, '!'=19, '||'=20, '&&'=21, '='=22, '>='=23, '<='=24, '>'=25, '<'=26, '*'=27, '/'=28, '+'=29, '-'=30, '('=31, ')'=32, '{'=33, '}'=34, ':'=35, '['=36, ']'=37, ','=38, '.'=39}
2023-08-26 20:52:56:382 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, IN=12, VAR=13, NUMBER=14, STRING=15, ID=16, DIF=17, IG_IG=18, NOT=19, OR=20, AND=21, IG=22, MAY_IG=23, MEN_IG=24, MAYOR=25, MENOR=26, MUL=27, DIV=28, ADD=29, SUB=30, PARIZQ=31, PARDER=32, LLAVEIZQ=33, LLAVEDER=34, D_PTS=35, CORIZQ=36, CORDER=37, COMA=38, PUNTO=39, WHITESPACE=40, COMMENT=41, LINE_COMMENT=42}
2023-08-26 20:52:56:382 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'in'=12, 'var'=13, '!='=17, '=='=18, '!'=19, '||'=20, '&&'=21, '='=22, '>='=23, '<='=24, '>'=25, '<'=26, '*'=27, '/'=28, '+'=29, '-'=30, '('=31, ')'=32, '{'=33, '}'=34, ':'=35, '['=36, ']'=37, ','=38, '.'=39}
2023-08-26 20:52:56:432 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[{7..8, 10..11, 13, 16}, {<EOF>, 34}]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? true
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[7, 8, 13, 16, 10, 11]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? true
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 2 in rule forstmt
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[11, 11, 11]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 3 in rule ifstmt
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 4 in rule elseiflist
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[null, {<EOF>, 7..11, 13, 16, 34}]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 5 in rule types
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[1, 2, 4, 3, 36]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? true
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 6 in rule expr
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[31, 16, 36, 14, 15, 5, 6]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? true
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-26 20:52:56:437 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-26 20:52:56:437 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:437 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-26 20:52:56:442 LL1 LogManager.java:25 look=[null, null]
2023-08-26 20:52:56:442 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:442 LL1 LogManager.java:25 
DECISION 9 in rule listParams
2023-08-26 20:52:56:442 LL1 LogManager.java:25 look=[null, 37]
2023-08-26 20:52:56:442 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:442 LL1 LogManager.java:25 
DECISION 10 in rule listArray
2023-08-26 20:52:56:442 LL1 LogManager.java:25 look=[null, null]
2023-08-26 20:52:56:442 LL1 LogManager.java:25 LL(1)? false
2023-08-26 20:52:56:452 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-26 20:52:56:472 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-26 20:52:56:472 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-26 20:52:56:477 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-26 20:52:56:477 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-26 20:52:56:477 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-26 20:52:56:482 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-26 20:52:56:482 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-26 20:52:56:482 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-26 20:52:56:482 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-26 20:52:56:482 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-26 20:52:56:482 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-26 20:52:56:482 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-26 20:52:56:487 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-26 20:52:56:487 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-26 20:52:56:487 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-26 20:52:56:487 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-26 20:52:56:487 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-26 20:52:56:487 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-08-26 20:52:56:490 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-08-26 20:52:56:490 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,42:23].[@-1,21:25='asign',<0>,42:34]
2023-08-26 20:52:56:490 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-08-26 20:52:56:490 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-26 20:52:56:490 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:25='whiles',<0>,43:32]
2023-08-26 20:52:56:490 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-08-26 20:52:56:490 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-08-26 20:52:56:490 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:21='fors',<0>,44:28]
2023-08-26 20:52:56:492 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-26 20:52:56:492 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,48:29]
2023-08-26 20:52:56:492 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,48:59].[@-1,38:41='line',<0>,48:65]
2023-08-26 20:52:56:497 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,48:71].[@-1,50:52='pos',<0>,48:77]
2023-08-26 20:52:56:497 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,48:82].[@-1,60:60='e',<0>,48:87]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"", "", $block.blk) 
2023-08-26 20:52:56:507 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,52:74]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,52:102].[@-1,34:37='line',<0>,52:106]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,52:113].[@-1,45:47='pos',<0>,52:117]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,52:123].[@-1,54:57='text',<0>,52:126]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,52:133].[@-1,64:64='e',<0>,52:136]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,52:139].[@-1,70:70='e',<0>,52:142]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,52:153].[@-1,87:89='blk',<0>,52:159]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", $STRING.text, "" ,$block.blk ) 
2023-08-26 20:52:56:507 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,53:45]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,53:73].[@-1,34:37='line',<0>,53:77]
2023-08-26 20:52:56:507 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,53:84].[@-1,45:47='pos',<0>,53:88]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,53:94].[@-1,54:57='text',<0>,53:97]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,68:73='STRING',<0>,53:111].[@-1,75:78='text',<0>,53:118]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,86:90='block',<0>,53:129].[@-1,92:94='blk',<0>,53:135]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, "","", "", $id2.text, $block.blk ) 
2023-08-26 20:52:56:512 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,54:46]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,54:74].[@-1,34:37='line',<0>,54:78]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,54:85].[@-1,45:47='pos',<0>,54:89]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,54:95].[@-1,54:57='text',<0>,54:98]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,72:74='id2',<0>,54:116].[@-1,76:79='text',<0>,54:120]
2023-08-26 20:52:56:512 action-translator LogManager.java:25 qattr [@-1,83:87='block',<0>,54:127].[@-1,89:91='blk',<0>,54:133]
2023-08-26 20:52:56:517 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-26 20:52:56:517 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,58:36]
2023-08-26 20:52:56:517 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,58:65].[@-1,34:37='line',<0>,58:68]
2023-08-26 20:52:56:517 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,58:75].[@-1,44:46='pos',<0>,58:78]
2023-08-26 20:52:56:517 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,58:84].[@-1,55:55='e',<0>,58:89]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,58:93].[@-1,65:67='blk',<0>,58:99]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-08-26 20:52:56:522 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,59:69]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,59:98].[@-1,33:36='line',<0>,59:101]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,59:108].[@-1,43:45='pos',<0>,59:111]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,59:117].[@-1,54:54='e',<0>,59:122]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,59:126].[@-1,61:63='blk',<0>,59:129]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,59:140].[@-1,75:77='blk',<0>,59:143]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-08-26 20:52:56:522 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,60:47]
2023-08-26 20:52:56:522 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,60:76].[@-1,34:37='line',<0>,60:79]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,60:86].[@-1,44:46='pos',<0>,60:89]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,60:95].[@-1,55:55='e',<0>,60:100]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,60:104].[@-1,65:67='blk',<0>,60:110]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,60:116].[@-1,82:93='else_if_list',<0>,60:127]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-08-26 20:52:56:527 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,61:82]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,61:111].[@-1,34:37='line',<0>,61:114]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,61:121].[@-1,44:46='pos',<0>,61:124]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,61:130].[@-1,55:55='e',<0>,61:135]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,61:139].[@-1,62:64='blk',<0>,61:142]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,61:148].[@-1,79:90='else_if_list',<0>,61:159]
2023-08-26 20:52:56:527 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,61:174].[@-1,97:99='blk',<0>,61:177]
2023-08-26 20:52:56:532 action-translator LogManager.java:25 translate 
2023-08-26 20:52:56:532 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-08-26 20:52:56:532 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-08-26 20:52:56:532 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-08-26 20:52:56:532 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-08-26 20:52:56:532 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-08-26 20:52:56:532 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 20:52:56:537 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-08-26 20:52:56:537 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-08-26 20:52:56:537 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-08-26 20:52:56:537 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-08-26 20:52:56:537 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 20:52:56:537 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-26 20:52:56:537 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,78:41]
2023-08-26 20:52:56:537 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,78:70].[@-1,34:37='line',<0>,78:73]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,78:80].[@-1,44:46='pos',<0>,78:83]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,78:89].[@-1,55:55='e',<0>,78:94]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,78:98].[@-1,65:67='blk',<0>,78:104]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-26 20:52:56:542 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,83:39]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,83:71].[@-1,40:43='line',<0>,83:77]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,83:84].[@-1,53:55='pos',<0>,83:90]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,83:96].[@-1,64:64='e',<0>,83:101]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,83:105].[@-1,74:76='blk',<0>,83:111]
2023-08-26 20:52:56:542 action-translator LogManager.java:25 translate 
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        
2023-08-26 20:52:56:547 action-translator LogManager.java:25 setAttr [@-1,14:16='dec',<0>,89:13] [@-1,19:97=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)',<0>,89:18]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,88:38].[@-1,34:37='line',<0>,88:42]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,88:49].[@-1,45:47='pos',<0>,88:53]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,88:59].[@-1,54:57='text',<0>,88:62]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,88:69].[@-1,67:68='ty',<0>,88:75]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,88:80].[@-1,77:77='e',<0>,88:85]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-08-26 20:52:56:547 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,95:15]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,95:51].[@-1,41:44='line',<0>,95:54]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,95:61].[@-1,51:53='pos',<0>,95:64]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,95:70].[@-1,60:63='text',<0>,95:73]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,95:80].[@-1,72:72='e',<0>,95:85]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-26 20:52:56:547 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,101:8]
2023-08-26 20:52:56:547 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-26 20:52:56:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,102:10]
2023-08-26 20:52:56:552 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-26 20:52:56:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,103:8]
2023-08-26 20:52:56:552 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-26 20:52:56:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,104:9]
2023-08-26 20:52:56:552 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-26 20:52:56:552 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,105:18]
2023-08-26 20:52:56:552 action-translator LogManager.java:25 translate 
2023-08-26 20:52:56:552 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-26 20:52:56:552 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-26 20:52:56:552 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-26 20:52:56:552 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-26 20:52:56:552 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-26 20:52:56:557 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-26 20:52:56:557 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-26 20:52:56:562 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-26 20:52:56:562 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 20:52:56:562 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:562 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-26 20:52:56:562 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 20:52:56:567 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:567 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 20:52:56:567 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:567 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-26 20:52:56:567 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 20:52:56:572 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:572 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-26 20:52:56:572 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:572 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-26 20:52:56:572 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-26 20:52:56:577 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:577 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-26 20:52:56:577 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-26 20:52:56:577 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-26 20:52:56:577 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate 
2023-08-26 20:52:56:582 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-26 20:52:56:582 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-26 20:52:56:582 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-26 20:52:56:587 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-26 20:52:56:587 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 20:52:56:587 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-26 20:52:56:587 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-26 20:52:56:587 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-26 20:52:56:587 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-26 20:52:56:587 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 20:52:56:587 action-translator LogManager.java:25 translate 
2023-08-26 20:52:56:587 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-26 20:52:56:590 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-26 20:52:56:590 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-26 20:52:56:590 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-26 20:52:56:590 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-26 20:52:56:590 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 20:52:56:590 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-26 20:52:56:592 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-26 20:52:56:592 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-26 20:52:56:592 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-26 20:52:56:592 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-26 20:52:56:592 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-26 20:52:56:592 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-26 20:52:57:047 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-26 20:52:57:047 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-26 20:52:57:183 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-26 20:52:57:183 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

