2023-08-31 17:26:41:952 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-31 17:26:42:097 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-31 17:26:43:721 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
	var rootNode = environment.NewNodo("Init")
	Ast.SetRaiz(rootNode)
    


  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
            
        }
        
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e);
                            
                            nodo1 := environment.NewNodo("PRINT")
                            Ast.GetRaiz().Hijos = append(Ast.GetRaiz().Hijos, nodo1)
                            labels := []string{"a"}
                            nodo1.GenerateProduction(labels)
                            println(Ast.GenerateDot())
                            }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-31 17:26:43:735 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
	var rootNode = environment.NewNodo("Init")
	Ast.SetRaiz(rootNode)
    


  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
            
        }
        
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e);
                            
                            nodo1 := environment.NewNodo("PRINT")
                            Ast.GetRaiz().Hijos = append(Ast.GetRaiz().Hijos, nodo1)
                            labels := []string{"a"}
                            nodo1.GenerateProduction(labels)
                            println(Ast.GenerateDot())
                            }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-31 17:26:43:744 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
	var rootNode = environment.NewNodo("Init")
	Ast.SetRaiz(rootNode)
    


  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
            
        }
        
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e);
                            
                            nodo1 := environment.NewNodo("PRINT")
                            Ast.GetRaiz().Hijos = append(Ast.GetRaiz().Hijos, nodo1)
                            labels := []string{"a"}
                            nodo1.GenerateProduction(labels)
                            println(Ast.GenerateDot())
                            }))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-31 17:26:43:744 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST
}) RULES)
2023-08-31 17:26:43:786 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=311>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=305> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-08-31 17:26:43:801 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 311))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 305))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-08-31 17:26:43:802 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=446>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=440> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-08-31 17:26:43:807 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 446))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 440))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-08-31 17:26:43:821 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=729> expr<tokenIndex=731> PARDER<tokenIndex=733> { $e = $expr.e } 
        | list=listArray<tokenIndex=741> { $e = $list.p} 
        | INT<tokenIndex=747> PARIZQ<tokenIndex=749> expr<tokenIndex=751> PARDER<tokenIndex=753> { $e = expressions.NewConversion($expr.e, environment.INTEGER) } 
        | STR<tokenIndex=759> PARIZQ<tokenIndex=761> expr<tokenIndex=763> PARDER<tokenIndex=765> { $e = expressions.NewConversion($expr.e, environment.STRING) } 
        | FLOAT<tokenIndex=771> PARIZQ<tokenIndex=773> expr<tokenIndex=775> PARDER<tokenIndex=777> { $e = expressions.NewConversion($expr.e, environment.FLOAT) } 
        | CORIZQ<tokenIndex=783> listParams<tokenIndex=785> CORDER<tokenIndex=787> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=793>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=799>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=805> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=811> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MUL<tokenIndex=604>|DIV<tokenIndex=606>) right=expr<tokenIndex=611,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(ADD<tokenIndex=624>|SUB<tokenIndex=626>) right=expr<tokenIndex=631,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MAY_IG<tokenIndex=644>|MAYOR<tokenIndex=646>) right=expr<tokenIndex=651,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MEN_IG<tokenIndex=664>|MENOR<tokenIndex=666>) right=expr<tokenIndex=671,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(IG_IG<tokenIndex=684>|DIF<tokenIndex=686>) right=expr<tokenIndex=691,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=AND<tokenIndex=703> right=expr<tokenIndex=707,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=OR<tokenIndex=719> right=expr<tokenIndex=723,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-31 17:26:43:853 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 729))) (expr (ELEMENT_OPTIONS (= tokenIndex 731))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 733))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 741)))) { $e = $list.p}) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 747))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 749))) (expr (ELEMENT_OPTIONS (= tokenIndex 751))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 753))) { $e = expressions.NewConversion($expr.e, environment.INTEGER) }) (ALT (STR (ELEMENT_OPTIONS (= tokenIndex 759))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 761))) (expr (ELEMENT_OPTIONS (= tokenIndex 763))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 765))) { $e = expressions.NewConversion($expr.e, environment.STRING) }) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 771))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 773))) (expr (ELEMENT_OPTIONS (= tokenIndex 775))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 777))) { $e = expressions.NewConversion($expr.e, environment.FLOAT) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 783))) (listParams (ELEMENT_OPTIONS (= tokenIndex 785))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 787))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 793))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 799))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 805))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 811))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 604))) (DIV (ELEMENT_OPTIONS (= tokenIndex 606))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 611) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 624))) (SUB (ELEMENT_OPTIONS (= tokenIndex 626))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 631) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 644))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 646))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 651) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 664))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 666))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 671) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 684))) (DIF (ELEMENT_OPTIONS (= tokenIndex 686))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 691) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 703)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 707) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 719)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 723) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-31 17:26:43:853 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=836> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=828> expr<tokenIndex=830> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-31 17:26:43:860 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 836))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 828))) (expr (ELEMENT_OPTIONS (= tokenIndex 830))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-31 17:26:43:862 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=865> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=855> expr<tokenIndex=857> CORDER<tokenIndex=859> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-31 17:26:43:867 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 865))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 855))) (expr (ELEMENT_OPTIONS (= tokenIndex 857))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 859))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-31 17:26:43:892 grammar LogManager.java:25 import INT=1
2023-08-31 17:26:43:893 grammar LogManager.java:25 import FLOAT=2
2023-08-31 17:26:43:893 grammar LogManager.java:25 import BOOL=3
2023-08-31 17:26:43:893 grammar LogManager.java:25 import STR=4
2023-08-31 17:26:43:893 grammar LogManager.java:25 import TRU=5
2023-08-31 17:26:43:893 grammar LogManager.java:25 import FAL=6
2023-08-31 17:26:43:894 grammar LogManager.java:25 import PRINT=7
2023-08-31 17:26:43:894 grammar LogManager.java:25 import IF=8
2023-08-31 17:26:43:894 grammar LogManager.java:25 import ELSE=9
2023-08-31 17:26:43:894 grammar LogManager.java:25 import WHILE=10
2023-08-31 17:26:43:894 grammar LogManager.java:25 import FOR=11
2023-08-31 17:26:43:894 grammar LogManager.java:25 import SWITCH=12
2023-08-31 17:26:43:894 grammar LogManager.java:25 import CASE=13
2023-08-31 17:26:43:894 grammar LogManager.java:25 import DEFAULT=14
2023-08-31 17:26:43:895 grammar LogManager.java:25 import IN=15
2023-08-31 17:26:43:895 grammar LogManager.java:25 import VAR=16
2023-08-31 17:26:43:895 grammar LogManager.java:25 import BREAK=17
2023-08-31 17:26:43:895 grammar LogManager.java:25 import CONTINUE=18
2023-08-31 17:26:43:896 grammar LogManager.java:25 import RETURN=19
2023-08-31 17:26:43:896 grammar LogManager.java:25 import GUARD=20
2023-08-31 17:26:43:896 grammar LogManager.java:25 import NUMBER=21
2023-08-31 17:26:43:898 grammar LogManager.java:25 import STRING=22
2023-08-31 17:26:43:898 grammar LogManager.java:25 import ID=23
2023-08-31 17:26:43:898 grammar LogManager.java:25 import DIF=24
2023-08-31 17:26:43:898 grammar LogManager.java:25 import IG_IG=25
2023-08-31 17:26:43:898 grammar LogManager.java:25 import NOT=26
2023-08-31 17:26:43:898 grammar LogManager.java:25 import OR=27
2023-08-31 17:26:43:898 grammar LogManager.java:25 import AND=28
2023-08-31 17:26:43:898 grammar LogManager.java:25 import IG=29
2023-08-31 17:26:43:900 grammar LogManager.java:25 import MAY_IG=30
2023-08-31 17:26:43:900 grammar LogManager.java:25 import MEN_IG=31
2023-08-31 17:26:43:900 grammar LogManager.java:25 import MAYOR=32
2023-08-31 17:26:43:900 grammar LogManager.java:25 import MENOR=33
2023-08-31 17:26:43:900 grammar LogManager.java:25 import MUL=34
2023-08-31 17:26:43:900 grammar LogManager.java:25 import DIV=35
2023-08-31 17:26:43:900 grammar LogManager.java:25 import ADD=36
2023-08-31 17:26:43:900 grammar LogManager.java:25 import SUB=37
2023-08-31 17:26:43:900 grammar LogManager.java:25 import PARIZQ=38
2023-08-31 17:26:43:900 grammar LogManager.java:25 import PARDER=39
2023-08-31 17:26:43:903 grammar LogManager.java:25 import LLAVEIZQ=40
2023-08-31 17:26:43:903 grammar LogManager.java:25 import LLAVEDER=41
2023-08-31 17:26:43:903 grammar LogManager.java:25 import D_PTS=42
2023-08-31 17:26:43:903 grammar LogManager.java:25 import CORIZQ=43
2023-08-31 17:26:43:903 grammar LogManager.java:25 import CORDER=44
2023-08-31 17:26:43:903 grammar LogManager.java:25 import COMA=45
2023-08-31 17:26:43:903 grammar LogManager.java:25 import PUNTO=46
2023-08-31 17:26:43:903 grammar LogManager.java:25 import WHITESPACE=47
2023-08-31 17:26:43:903 grammar LogManager.java:25 import COMMENT=48
2023-08-31 17:26:43:903 grammar LogManager.java:25 import LINE_COMMENT=49
2023-08-31 17:26:43:903 grammar LogManager.java:25 import 'Int'=1
2023-08-31 17:26:43:903 grammar LogManager.java:25 import 'Float'=2
2023-08-31 17:26:43:903 grammar LogManager.java:25 import 'Bool'=3
2023-08-31 17:26:43:903 grammar LogManager.java:25 import 'String'=4
2023-08-31 17:26:43:903 grammar LogManager.java:25 import 'true'=5
2023-08-31 17:26:43:903 grammar LogManager.java:25 import 'false'=6
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'print'=7
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'if'=8
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'else'=9
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'while'=10
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'for'=11
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'switch'=12
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'case'=13
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'default'=14
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'in'=15
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'var'=16
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'break'=17
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'continue'=18
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'return'=19
2023-08-31 17:26:43:905 grammar LogManager.java:25 import 'guard'=20
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '!='=24
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '=='=25
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '!'=26
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '||'=27
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '&&'=28
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '='=29
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '>='=30
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '<='=31
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '>'=32
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '<'=33
2023-08-31 17:26:43:905 grammar LogManager.java:25 import '*'=34
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '/'=35
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '+'=36
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '-'=37
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '('=38
2023-08-31 17:26:43:908 grammar LogManager.java:25 import ')'=39
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '{'=40
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '}'=41
2023-08-31 17:26:43:908 grammar LogManager.java:25 import ':'=42
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '['=43
2023-08-31 17:26:43:908 grammar LogManager.java:25 import ']'=44
2023-08-31 17:26:43:908 grammar LogManager.java:25 import ','=45
2023-08-31 17:26:43:908 grammar LogManager.java:25 import '.'=46
2023-08-31 17:26:43:908 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, BREAK=17, CONTINUE=18, RETURN=19, GUARD=20, NUMBER=21, STRING=22, ID=23, DIF=24, IG_IG=25, NOT=26, OR=27, AND=28, IG=29, MAY_IG=30, MEN_IG=31, MAYOR=32, MENOR=33, MUL=34, DIV=35, ADD=36, SUB=37, PARIZQ=38, PARDER=39, LLAVEIZQ=40, LLAVEDER=41, D_PTS=42, CORIZQ=43, CORDER=44, COMA=45, PUNTO=46, WHITESPACE=47, COMMENT=48, LINE_COMMENT=49, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'break'=17, 'continue'=18, 'return'=19, 'guard'=20, '!='=24, '=='=25, '!'=26, '||'=27, '&&'=28, '='=29, '>='=30, '<='=31, '>'=32, '<'=33, '*'=34, '/'=35, '+'=36, '-'=37, '('=38, ')'=39, '{'=40, '}'=41, ':'=42, '['=43, ']'=44, ','=45, '.'=46}
2023-08-31 17:26:43:910 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, BREAK=17, CONTINUE=18, RETURN=19, GUARD=20, NUMBER=21, STRING=22, ID=23, DIF=24, IG_IG=25, NOT=26, OR=27, AND=28, IG=29, MAY_IG=30, MEN_IG=31, MAYOR=32, MENOR=33, MUL=34, DIV=35, ADD=36, SUB=37, PARIZQ=38, PARDER=39, LLAVEIZQ=40, LLAVEDER=41, D_PTS=42, CORIZQ=43, CORDER=44, COMA=45, PUNTO=46, WHITESPACE=47, COMMENT=48, LINE_COMMENT=49}
2023-08-31 17:26:43:910 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'break'=17, 'continue'=18, 'return'=19, 'guard'=20, '!='=24, '=='=25, '!'=26, '||'=27, '&&'=28, '='=29, '>='=30, '<='=31, '>'=32, '<'=33, '*'=34, '/'=35, '+'=36, '-'=37, '('=38, ')'=39, '{'=40, '}'=41, ':'=42, '['=43, ']'=44, ','=45, '.'=46}
2023-08-31 17:26:43:973 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-31 17:26:43:973 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..18, 20, 23}, null]
2023-08-31 17:26:43:975 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:975 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-31 17:26:43:975 LL1 LogManager.java:25 look=[7, 8, 16, 23, 10, 11, 12, 17, 18, 20]
2023-08-31 17:26:43:975 LL1 LogManager.java:25 LL(1)? true
2023-08-31 17:26:43:975 LL1 LogManager.java:25 
DECISION 2 in rule forstmt
2023-08-31 17:26:43:975 LL1 LogManager.java:25 look=[11, 11]
2023-08-31 17:26:43:975 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:975 LL1 LogManager.java:25 
DECISION 3 in rule caselist
2023-08-31 17:26:43:975 LL1 LogManager.java:25 look=[null, 14]
2023-08-31 17:26:43:975 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:975 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-31 17:26:43:975 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-08-31 17:26:43:975 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:975 LL1 LogManager.java:25 
DECISION 5 in rule elseiflist
2023-08-31 17:26:43:975 LL1 LogManager.java:25 look=[null, null]
2023-08-31 17:26:43:978 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:978 LL1 LogManager.java:25 
DECISION 6 in rule types
2023-08-31 17:26:43:978 LL1 LogManager.java:25 look=[1, 2, 4, 3, 43, 43]
2023-08-31 17:26:43:978 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:978 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-31 17:26:43:978 LL1 LogManager.java:25 look=[38, 23, 1, 4, 2, 43, 21, 22, 5, 6]
2023-08-31 17:26:43:980 LL1 LogManager.java:25 LL(1)? true
2023-08-31 17:26:43:980 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-31 17:26:43:980 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-31 17:26:43:980 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:980 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-31 17:26:43:980 LL1 LogManager.java:25 look=[null, null]
2023-08-31 17:26:43:980 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:980 LL1 LogManager.java:25 
DECISION 10 in rule listParams
2023-08-31 17:26:43:980 LL1 LogManager.java:25 look=[null, 44]
2023-08-31 17:26:43:980 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:980 LL1 LogManager.java:25 
DECISION 11 in rule listArray
2023-08-31 17:26:43:980 LL1 LogManager.java:25 look=[null, null]
2023-08-31 17:26:43:980 LL1 LogManager.java:25 LL(1)? false
2023-08-31 17:26:43:993 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST

2023-08-31 17:26:44:013 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-31 17:26:44:015 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,23:9]
2023-08-31 17:26:44:015 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,23:17].[@-1,27:29='blk',<0>,23:23]
2023-08-31 17:26:44:020 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
	var rootNode = environment.NewNodo("Init")
	Ast.SetRaiz(rootNode)
    


  
2023-08-31 17:26:44:020 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,29:5]
2023-08-31 17:26:44:023 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
            
            
        }
        
    
2023-08-31 17:26:44:025 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,42:13]
2023-08-31 17:26:44:025 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,42:27]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-31 17:26:44:028 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:14]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,51:22].[@-1,20:23='prnt',<0>,51:32]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-31 17:26:44:028 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:11]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,52:19].[@-1,17:22='ifinst',<0>,52:26]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-31 17:26:44:028 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:20]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,53:28].[@-1,26:28='dec',<0>,53:44]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-08-31 17:26:44:028 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:15]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,54:23].[@-1,21:25='asign',<0>,54:34]
2023-08-31 17:26:44:028 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-08-31 17:26:44:033 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,55:14]
2023-08-31 17:26:44:033 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,55:22].[@-1,20:25='whiles',<0>,55:32]
2023-08-31 17:26:44:033 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-08-31 17:26:44:033 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,56:12]
2023-08-31 17:26:44:033 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,56:20].[@-1,18:21='fors',<0>,56:28]
2023-08-31 17:26:44:033 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-08-31 17:26:44:035 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,57:14]
2023-08-31 17:26:44:035 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,57:22].[@-1,20:24='swtch',<0>,57:32]
2023-08-31 17:26:44:035 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-08-31 17:26:44:035 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,58:13]
2023-08-31 17:26:44:035 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,58:21].[@-1,19:23='break',<0>,58:30]
2023-08-31 17:26:44:035 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-08-31 17:26:44:035 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,59:15]
2023-08-31 17:26:44:035 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,59:23].[@-1,22:29='continue',<0>,59:35]
2023-08-31 17:26:44:039 action-translator LogManager.java:25 translate  $inst = $guardtmt.guard 
2023-08-31 17:26:44:039 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,60:13]
2023-08-31 17:26:44:039 action-translator LogManager.java:25 qattr [@-1,10:17='guardtmt',<0>,60:21].[@-1,19:23='guard',<0>,60:30]
2023-08-31 17:26:44:039 action-translator LogManager.java:25 translate $guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )
2023-08-31 17:26:44:039 action-translator LogManager.java:25 attr [@-1,1:5='guard',<0>,64:43]
2023-08-31 17:26:44:039 action-translator LogManager.java:25 qattr [@-1,33:37='GUARD',<0>,64:75].[@-1,39:42='line',<0>,64:81]
2023-08-31 17:26:44:044 action-translator LogManager.java:25 qattr [@-1,46:50='GUARD',<0>,64:88].[@-1,52:54='pos',<0>,64:94]
2023-08-31 17:26:44:044 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,64:100].[@-1,63:63='e',<0>,64:105]
2023-08-31 17:26:44:044 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,64:109].[@-1,73:75='blk',<0>,64:115]
2023-08-31 17:26:44:046 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-08-31 17:26:44:046 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,68:10]
2023-08-31 17:26:44:046 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,68:41].[@-1,39:42='line',<0>,68:47]
2023-08-31 17:26:44:046 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,68:54].[@-1,52:54='pos',<0>,68:60]
2023-08-31 17:26:44:046 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-08-31 17:26:44:049 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,72:13]
2023-08-31 17:26:44:049 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,72:50].[@-1,48:51='line',<0>,72:59]
2023-08-31 17:26:44:049 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,72:66].[@-1,64:66='pos',<0>,72:75]
2023-08-31 17:26:44:051 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e);
                            
                            nodo1 := environment.NewNodo("PRINT")
                            Ast.GetRaiz().Hijos = append(Ast.GetRaiz().Hijos, nodo1)
                            labels := []string{"a"}
                            nodo1.GenerateProduction(labels)
                            println(Ast.GenerateDot())
                            
2023-08-31 17:26:44:051 action-translator LogManager.java:25 setAttr [@-1,2:5='prnt',<0>,76:29] [@-1,8:61=' instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)',<0>,76:35]
2023-08-31 17:26:44:051 action-translator LogManager.java:25 translate  instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-31 17:26:44:051 action-translator LogManager.java:25 qattr [@-1,24:28='PRINT',<0>,76:51].[@-1,30:33='line',<0>,76:57]
2023-08-31 17:26:44:051 action-translator LogManager.java:25 qattr [@-1,36:40='PRINT',<0>,76:63].[@-1,42:44='pos',<0>,76:69]
2023-08-31 17:26:44:051 action-translator LogManager.java:25 qattr [@-1,47:50='expr',<0>,76:74].[@-1,52:52='e',<0>,76:79]
2023-08-31 17:26:44:055 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-08-31 17:26:44:055 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,89:74]
2023-08-31 17:26:44:055 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,89:102].[@-1,34:37='line',<0>,89:106]
2023-08-31 17:26:44:055 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,89:113].[@-1,45:47='pos',<0>,89:117]
2023-08-31 17:26:44:059 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,89:123].[@-1,54:57='text',<0>,89:126]
2023-08-31 17:26:44:059 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,89:133].[@-1,64:64='e',<0>,89:136]
2023-08-31 17:26:44:059 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,89:139].[@-1,70:70='e',<0>,89:142]
2023-08-31 17:26:44:059 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,89:152].[@-1,86:88='blk',<0>,89:158]
2023-08-31 17:26:44:059 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-08-31 17:26:44:059 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,90:56]
2023-08-31 17:26:44:064 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,90:84].[@-1,34:37='line',<0>,90:88]
2023-08-31 17:26:44:064 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,90:95].[@-1,45:47='pos',<0>,90:99]
2023-08-31 17:26:44:064 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,90:105].[@-1,54:57='text',<0>,90:108]
2023-08-31 17:26:44:064 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,90:124].[@-1,74:77='text',<0>,90:128]
2023-08-31 17:26:44:064 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,90:135].[@-1,87:89='blk',<0>,90:141]
2023-08-31 17:26:44:065 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-08-31 17:26:44:065 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,94:64]
2023-08-31 17:26:44:065 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,94:97].[@-1,42:45='line',<0>,94:104]
2023-08-31 17:26:44:065 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,94:111].[@-1,56:58='pos',<0>,94:118]
2023-08-31 17:26:44:065 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,94:124].[@-1,67:67='e',<0>,94:129]
2023-08-31 17:26:44:065 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,94:132].[@-1,79:83='cases',<0>,94:141]
2023-08-31 17:26:44:065 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,94:149].[@-1,93:95='blk',<0>,94:155]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 translate 
2023-08-31 17:26:44:069 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-08-31 17:26:44:069 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:069 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-08-31 17:26:44:069 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-08-31 17:26:44:069 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-08-31 17:26:44:074 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:075 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-08-31 17:26:44:075 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,109:26]
2023-08-31 17:26:44:075 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,109:57].[@-1,38:41='line',<0>,109:62]
2023-08-31 17:26:44:075 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,109:69].[@-1,50:52='pos',<0>,109:74]
2023-08-31 17:26:44:075 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,109:79].[@-1,60:60='e',<0>,109:84]
2023-08-31 17:26:44:075 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,109:88].[@-1,70:72='blk',<0>,109:94]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-31 17:26:44:079 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,113:36]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,113:65].[@-1,34:37='line',<0>,113:68]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,113:75].[@-1,44:46='pos',<0>,113:78]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,113:84].[@-1,55:55='e',<0>,113:89]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,113:93].[@-1,65:67='blk',<0>,113:99]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-08-31 17:26:44:079 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,114:69]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,114:98].[@-1,33:36='line',<0>,114:101]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,114:108].[@-1,43:45='pos',<0>,114:111]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,114:117].[@-1,54:54='e',<0>,114:122]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,114:126].[@-1,61:63='blk',<0>,114:129]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,114:140].[@-1,75:77='blk',<0>,114:143]
2023-08-31 17:26:44:079 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-08-31 17:26:44:084 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,115:47]
2023-08-31 17:26:44:084 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,115:76].[@-1,34:37='line',<0>,115:79]
2023-08-31 17:26:44:084 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,115:86].[@-1,44:46='pos',<0>,115:89]
2023-08-31 17:26:44:084 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,115:95].[@-1,55:55='e',<0>,115:100]
2023-08-31 17:26:44:084 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,115:104].[@-1,65:67='blk',<0>,115:110]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,115:116].[@-1,82:93='else_if_list',<0>,115:127]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-08-31 17:26:44:085 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,116:82]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,116:111].[@-1,34:37='line',<0>,116:114]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,116:121].[@-1,44:46='pos',<0>,116:124]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,116:130].[@-1,55:55='e',<0>,116:135]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,116:139].[@-1,62:64='blk',<0>,116:142]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,116:148].[@-1,79:90='else_if_list',<0>,116:159]
2023-08-31 17:26:44:085 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,116:174].[@-1,97:99='blk',<0>,116:177]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 translate 
2023-08-31 17:26:44:089 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-08-31 17:26:44:089 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:089 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-08-31 17:26:44:089 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-08-31 17:26:44:089 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:092 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-31 17:26:44:092 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,133:41]
2023-08-31 17:26:44:092 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,133:70].[@-1,34:37='line',<0>,133:73]
2023-08-31 17:26:44:092 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,133:80].[@-1,44:46='pos',<0>,133:83]
2023-08-31 17:26:44:094 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,133:89].[@-1,55:55='e',<0>,133:94]
2023-08-31 17:26:44:094 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,133:98].[@-1,65:67='blk',<0>,133:104]
2023-08-31 17:26:44:094 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-31 17:26:44:094 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,138:39]
2023-08-31 17:26:44:094 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,138:71].[@-1,40:43='line',<0>,138:77]
2023-08-31 17:26:44:094 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,138:84].[@-1,53:55='pos',<0>,138:90]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,138:96].[@-1,64:64='e',<0>,138:101]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,138:105].[@-1,74:76='blk',<0>,138:111]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 translate 
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    
2023-08-31 17:26:44:095 action-translator LogManager.java:25 setAttr [@-1,10:12='dec',<0>,144:9] [@-1,15:93=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)',<0>,144:14]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,143:34].[@-1,34:37='line',<0>,143:38]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,143:45].[@-1,45:47='pos',<0>,143:49]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,143:55].[@-1,54:57='text',<0>,143:58]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,143:65].[@-1,67:68='ty',<0>,143:71]
2023-08-31 17:26:44:095 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,143:76].[@-1,77:77='e',<0>,143:81]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-08-31 17:26:44:099 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,151:15]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,151:51].[@-1,41:44='line',<0>,151:54]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,151:61].[@-1,51:53='pos',<0>,151:64]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,151:70].[@-1,60:63='text',<0>,151:73]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,151:80].[@-1,72:72='e',<0>,151:85]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-31 17:26:44:099 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,157:8]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-31 17:26:44:099 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,158:10]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-31 17:26:44:099 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,159:8]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-31 17:26:44:099 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,160:9]
2023-08-31 17:26:44:099 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-31 17:26:44:104 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,161:24]
2023-08-31 17:26:44:104 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-31 17:26:44:104 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,162:19]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 translate 
2023-08-31 17:26:44:109 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-31 17:26:44:109 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-31 17:26:44:109 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, environment.INTEGER) 
2023-08-31 17:26:44:109 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:99]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,4:130].[@-1,38:38='e',<0>,4:135]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, environment.STRING) 
2023-08-31 17:26:44:109 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:99]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,5:130].[@-1,38:38='e',<0>,5:135]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, environment.FLOAT) 
2023-08-31 17:26:44:109 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:101]
2023-08-31 17:26:44:109 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,6:132].[@-1,38:38='e',<0>,6:137]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-31 17:26:44:114 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:85]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,7:111].[@-1,35:38='line',<0>,7:118]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,7:125].[@-1,49:51='pos',<0>,7:132]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,7:138].[@-1,66:66='l',<0>,7:149]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-31 17:26:44:114 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,10:30].[@-1,39:42='text',<0>,10:37]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,11:43].[@-1,102:105='text',<0>,11:50]
2023-08-31 17:26:44:114 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,15:13]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,15:43].[@-1,240:243='line',<0>,15:50]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,15:56].[@-1,253:255='pos',<0>,15:63]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,17:37].[@-1,341:344='text',<0>,17:44]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,21:13]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,21:43].[@-1,474:477='line',<0>,21:50]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,21:56].[@-1,487:489='pos',<0>,21:63]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,26:16].[@-1,25:28='text',<0>,26:23]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,27:9]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,27:39].[@-1,77:80='line',<0>,27:46]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,27:53].[@-1,91:93='pos',<0>,27:60]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-31 17:26:44:116 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,29:32]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,29:62].[@-1,36:39='line',<0>,29:66]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,29:73].[@-1,47:49='pos',<0>,29:77]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-31 17:26:44:116 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:32]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,30:62].[@-1,36:39='line',<0>,30:66]
2023-08-31 17:26:44:116 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,30:73].[@-1,47:49='pos',<0>,30:77]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:119 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:139]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:169].[@-1,37:41='start',<0>,33:174]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:192].[@-1,60:64='start',<0>,33:197]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:217].[@-1,85:85='e',<0>,33:222]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:226].[@-1,92:95='text',<0>,33:229]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:236].[@-1,105:105='e',<0>,33:242]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:119 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:149]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:179].[@-1,37:41='start',<0>,34:184]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:202].[@-1,60:64='start',<0>,34:207]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:227].[@-1,85:85='e',<0>,34:232]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:236].[@-1,92:95='text',<0>,34:239]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:246].[@-1,105:105='e',<0>,34:252]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:119 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:154]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:184].[@-1,37:41='start',<0>,35:189]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:207].[@-1,60:64='start',<0>,35:212]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:232].[@-1,85:85='e',<0>,35:237]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:241].[@-1,92:95='text',<0>,35:244]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:251].[@-1,105:105='e',<0>,35:257]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-31 17:26:44:119 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:119 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:154]
2023-08-31 17:26:44:119 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:184].[@-1,37:41='start',<0>,36:189]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:207].[@-1,60:64='start',<0>,36:212]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:232].[@-1,85:85='e',<0>,36:237]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:241].[@-1,92:95='text',<0>,36:244]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:251].[@-1,105:105='e',<0>,36:257]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-31 17:26:44:124 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:124 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:151]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:181].[@-1,37:41='start',<0>,37:186]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:204].[@-1,60:64='start',<0>,37:209]
2023-08-31 17:26:44:124 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:229].[@-1,85:85='e',<0>,37:234]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:238].[@-1,92:95='text',<0>,37:241]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:248].[@-1,105:105='e',<0>,37:254]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-31 17:26:44:126 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:126 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:127]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:157].[@-1,37:41='start',<0>,38:162]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:180].[@-1,60:64='start',<0>,38:185]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:205].[@-1,85:85='e',<0>,38:210]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:214].[@-1,92:95='text',<0>,38:217]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:224].[@-1,105:105='e',<0>,38:230]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-31 17:26:44:126 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-31 17:26:44:126 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:126]
2023-08-31 17:26:44:126 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:156].[@-1,37:41='start',<0>,39:161]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:179].[@-1,60:64='start',<0>,39:184]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:204].[@-1,85:85='e',<0>,39:209]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:213].[@-1,92:95='text',<0>,39:216]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:223].[@-1,105:105='e',<0>,39:229]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate 
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-31 17:26:44:129 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate 
2023-08-31 17:26:44:129 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-31 17:26:44:129 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-31 17:26:44:134 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-31 17:26:44:134 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-31 17:26:44:135 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-31 17:26:44:135 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:135 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-31 17:26:44:136 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-31 17:26:44:136 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-31 17:26:44:136 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-31 17:26:44:136 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-31 17:26:44:136 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-31 17:26:44:137 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-31 17:26:44:887 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST

2023-08-31 17:26:44:887 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST

2023-08-31 17:26:45:017 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST

2023-08-31 17:26:45:017 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"


    var Ast environment.AST

