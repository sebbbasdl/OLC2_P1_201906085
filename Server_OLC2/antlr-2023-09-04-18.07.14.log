2023-09-04 18:07:12:543 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-04 18:07:12:574 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'IsEmpty'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-04 18:07:13:244 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT appendtmt { $inst = $appendtmt.append}) (ALT removelastmt { $inst = $removelastmt.removelast }) (ALT removetmt { $inst = $removetmt.remove }))) (RULE removetmt (returns interfaces.Instruction remove) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expr PARDER { $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE removelastmt (returns interfaces.Instruction removelast) (BLOCK (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE appendtmt (returns interfaces.Instruction append) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT ID PUNTO COUNT PARIZQ PARDER { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY PARIZQ PARDER { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-04 18:07:13:264 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT appendtmt { $inst = $appendtmt.append}) (ALT removelastmt { $inst = $removelastmt.removelast }) (ALT removetmt { $inst = $removetmt.remove }))) (RULE removetmt (returns interfaces.Instruction remove) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expr PARDER { $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE removelastmt (returns interfaces.Instruction removelast) (BLOCK (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE appendtmt (returns interfaces.Instruction append) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT ID PUNTO COUNT PARIZQ PARDER { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY PARIZQ PARDER { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-04 18:07:13:271 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT appendtmt { $inst = $appendtmt.append}) (ALT removelastmt { $inst = $removelastmt.removelast }) (ALT removetmt { $inst = $removetmt.remove }))) (RULE removetmt (returns interfaces.Instruction remove) (BLOCK (ALT ID PUNTO REMOVE PARIZQ expr PARDER { $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE removelastmt (returns interfaces.Instruction removelast) (BLOCK (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE appendtmt (returns interfaces.Instruction append) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT ID PUNTO COUNT PARIZQ PARDER { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY PARIZQ PARDER { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-09-04 18:07:13:272 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-09-04 18:07:13:321 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=398>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=392> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-09-04 18:07:13:333 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 398))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 392))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-09-04 18:07:13:334 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=533>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=527> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-09-04 18:07:13:338 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 533))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 527))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-09-04 18:07:13:345 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=832> expr<tokenIndex=834> PARDER<tokenIndex=836> { $e = $expr.e } 
        | list=listArray<tokenIndex=844> { $e = $list.p} 
        | INT<tokenIndex=850> PARIZQ<tokenIndex=852> expr<tokenIndex=854> PARDER<tokenIndex=856> { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) } 
        | STR<tokenIndex=862> PARIZQ<tokenIndex=864> expr<tokenIndex=866> PARDER<tokenIndex=868> { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) } 
        | FLOAT<tokenIndex=874> PARIZQ<tokenIndex=876> expr<tokenIndex=878> PARDER<tokenIndex=880> { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) } 
        | ID<tokenIndex=886> PUNTO<tokenIndex=888> COUNT<tokenIndex=890> PARIZQ<tokenIndex=892>  PARDER<tokenIndex=894> { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=900> PUNTO<tokenIndex=902> ISEMPTY<tokenIndex=904> PARIZQ<tokenIndex=906>  PARDER<tokenIndex=908> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | CORIZQ<tokenIndex=914> listParams<tokenIndex=916> CORDER<tokenIndex=918> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=924>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=930>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=936> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=942> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MUL<tokenIndex=707>|DIV<tokenIndex=709>) right=expr<tokenIndex=714,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(ADD<tokenIndex=727>|SUB<tokenIndex=729>) right=expr<tokenIndex=734,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=(MAY_IG<tokenIndex=747>|MAYOR<tokenIndex=749>) right=expr<tokenIndex=754,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=(MEN_IG<tokenIndex=767>|MENOR<tokenIndex=769>) right=expr<tokenIndex=774,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(IG_IG<tokenIndex=787>|DIF<tokenIndex=789>) right=expr<tokenIndex=794,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=AND<tokenIndex=806> right=expr<tokenIndex=810,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=OR<tokenIndex=822> right=expr<tokenIndex=826,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-04 18:07:13:371 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 832))) (expr (ELEMENT_OPTIONS (= tokenIndex 834))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 836))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 844)))) { $e = $list.p}) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 850))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 852))) (expr (ELEMENT_OPTIONS (= tokenIndex 854))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 856))) { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT (STR (ELEMENT_OPTIONS (= tokenIndex 862))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 864))) (expr (ELEMENT_OPTIONS (= tokenIndex 866))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 868))) { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 874))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 876))) (expr (ELEMENT_OPTIONS (= tokenIndex 878))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 880))) { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 886))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 888))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 890))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 892))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 894))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 900))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 902))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 904))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 906))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 908))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 914))) (listParams (ELEMENT_OPTIONS (= tokenIndex 916))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 918))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 924))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 930))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 936))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 942))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 707))) (DIV (ELEMENT_OPTIONS (= tokenIndex 709))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 714) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 727))) (SUB (ELEMENT_OPTIONS (= tokenIndex 729))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 734) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 747))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 749))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 754) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 767))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 769))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 774) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 787))) (DIF (ELEMENT_OPTIONS (= tokenIndex 789))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 794) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 806)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 810) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 822)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 826) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-04 18:07:13:373 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=967> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=959> expr<tokenIndex=961> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-04 18:07:13:376 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 967))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 959))) (expr (ELEMENT_OPTIONS (= tokenIndex 961))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-04 18:07:13:378 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=996> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=986> expr<tokenIndex=988> CORDER<tokenIndex=990> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-09-04 18:07:13:383 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 996))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 986))) (expr (ELEMENT_OPTIONS (= tokenIndex 988))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 990))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-09-04 18:07:13:412 grammar LogManager.java:25 import INT=1
2023-09-04 18:07:13:412 grammar LogManager.java:25 import FLOAT=2
2023-09-04 18:07:13:412 grammar LogManager.java:25 import BOOL=3
2023-09-04 18:07:13:413 grammar LogManager.java:25 import STR=4
2023-09-04 18:07:13:413 grammar LogManager.java:25 import TRU=5
2023-09-04 18:07:13:413 grammar LogManager.java:25 import FAL=6
2023-09-04 18:07:13:414 grammar LogManager.java:25 import PRINT=7
2023-09-04 18:07:13:414 grammar LogManager.java:25 import IF=8
2023-09-04 18:07:13:414 grammar LogManager.java:25 import ELSE=9
2023-09-04 18:07:13:415 grammar LogManager.java:25 import WHILE=10
2023-09-04 18:07:13:415 grammar LogManager.java:25 import FOR=11
2023-09-04 18:07:13:416 grammar LogManager.java:25 import SWITCH=12
2023-09-04 18:07:13:416 grammar LogManager.java:25 import CASE=13
2023-09-04 18:07:13:416 grammar LogManager.java:25 import DEFAULT=14
2023-09-04 18:07:13:417 grammar LogManager.java:25 import IN=15
2023-09-04 18:07:13:417 grammar LogManager.java:25 import VAR=16
2023-09-04 18:07:13:417 grammar LogManager.java:25 import LET=17
2023-09-04 18:07:13:417 grammar LogManager.java:25 import BREAK=18
2023-09-04 18:07:13:418 grammar LogManager.java:25 import CONTINUE=19
2023-09-04 18:07:13:418 grammar LogManager.java:25 import RETURN=20
2023-09-04 18:07:13:418 grammar LogManager.java:25 import GUARD=21
2023-09-04 18:07:13:419 grammar LogManager.java:25 import APPEND=22
2023-09-04 18:07:13:419 grammar LogManager.java:25 import REMOVELAST=23
2023-09-04 18:07:13:419 grammar LogManager.java:25 import REMOVE=24
2023-09-04 18:07:13:419 grammar LogManager.java:25 import COUNT=25
2023-09-04 18:07:13:419 grammar LogManager.java:25 import ISEMPTY=26
2023-09-04 18:07:13:419 grammar LogManager.java:25 import NUMBER=27
2023-09-04 18:07:13:419 grammar LogManager.java:25 import STRING=28
2023-09-04 18:07:13:419 grammar LogManager.java:25 import ID=29
2023-09-04 18:07:13:420 grammar LogManager.java:25 import DIF=30
2023-09-04 18:07:13:420 grammar LogManager.java:25 import IG_IG=31
2023-09-04 18:07:13:420 grammar LogManager.java:25 import NOT=32
2023-09-04 18:07:13:421 grammar LogManager.java:25 import OR=33
2023-09-04 18:07:13:421 grammar LogManager.java:25 import AND=34
2023-09-04 18:07:13:421 grammar LogManager.java:25 import IG=35
2023-09-04 18:07:13:422 grammar LogManager.java:25 import MAY_IG=36
2023-09-04 18:07:13:422 grammar LogManager.java:25 import MEN_IG=37
2023-09-04 18:07:13:422 grammar LogManager.java:25 import MAYOR=38
2023-09-04 18:07:13:422 grammar LogManager.java:25 import MENOR=39
2023-09-04 18:07:13:422 grammar LogManager.java:25 import MUL=40
2023-09-04 18:07:13:422 grammar LogManager.java:25 import DIV=41
2023-09-04 18:07:13:423 grammar LogManager.java:25 import ADD=42
2023-09-04 18:07:13:423 grammar LogManager.java:25 import SUB=43
2023-09-04 18:07:13:423 grammar LogManager.java:25 import PARIZQ=44
2023-09-04 18:07:13:423 grammar LogManager.java:25 import PARDER=45
2023-09-04 18:07:13:423 grammar LogManager.java:25 import LLAVEIZQ=46
2023-09-04 18:07:13:423 grammar LogManager.java:25 import LLAVEDER=47
2023-09-04 18:07:13:423 grammar LogManager.java:25 import D_PTS=48
2023-09-04 18:07:13:423 grammar LogManager.java:25 import CORIZQ=49
2023-09-04 18:07:13:424 grammar LogManager.java:25 import CORDER=50
2023-09-04 18:07:13:424 grammar LogManager.java:25 import COMA=51
2023-09-04 18:07:13:424 grammar LogManager.java:25 import PUNTO=52
2023-09-04 18:07:13:424 grammar LogManager.java:25 import WHITESPACE=53
2023-09-04 18:07:13:424 grammar LogManager.java:25 import COMMENT=54
2023-09-04 18:07:13:424 grammar LogManager.java:25 import LINE_COMMENT=55
2023-09-04 18:07:13:424 grammar LogManager.java:25 import 'Int'=1
2023-09-04 18:07:13:424 grammar LogManager.java:25 import 'Float'=2
2023-09-04 18:07:13:424 grammar LogManager.java:25 import 'Bool'=3
2023-09-04 18:07:13:425 grammar LogManager.java:25 import 'String'=4
2023-09-04 18:07:13:425 grammar LogManager.java:25 import 'true'=5
2023-09-04 18:07:13:425 grammar LogManager.java:25 import 'false'=6
2023-09-04 18:07:13:425 grammar LogManager.java:25 import 'print'=7
2023-09-04 18:07:13:425 grammar LogManager.java:25 import 'if'=8
2023-09-04 18:07:13:425 grammar LogManager.java:25 import 'else'=9
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'while'=10
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'for'=11
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'switch'=12
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'case'=13
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'default'=14
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'in'=15
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'var'=16
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'let'=17
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'break'=18
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'continue'=19
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'return'=20
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'guard'=21
2023-09-04 18:07:13:426 grammar LogManager.java:25 import 'append'=22
2023-09-04 18:07:13:427 grammar LogManager.java:25 import 'removeLast'=23
2023-09-04 18:07:13:427 grammar LogManager.java:25 import 'remove'=24
2023-09-04 18:07:13:427 grammar LogManager.java:25 import 'count'=25
2023-09-04 18:07:13:427 grammar LogManager.java:25 import 'IsEmpty'=26
2023-09-04 18:07:13:427 grammar LogManager.java:25 import '!='=30
2023-09-04 18:07:13:427 grammar LogManager.java:25 import '=='=31
2023-09-04 18:07:13:427 grammar LogManager.java:25 import '!'=32
2023-09-04 18:07:13:427 grammar LogManager.java:25 import '||'=33
2023-09-04 18:07:13:427 grammar LogManager.java:25 import '&&'=34
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '='=35
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '>='=36
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '<='=37
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '>'=38
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '<'=39
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '*'=40
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '/'=41
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '+'=42
2023-09-04 18:07:13:428 grammar LogManager.java:25 import '-'=43
2023-09-04 18:07:13:429 grammar LogManager.java:25 import '('=44
2023-09-04 18:07:13:429 grammar LogManager.java:25 import ')'=45
2023-09-04 18:07:13:429 grammar LogManager.java:25 import '{'=46
2023-09-04 18:07:13:429 grammar LogManager.java:25 import '}'=47
2023-09-04 18:07:13:429 grammar LogManager.java:25 import ':'=48
2023-09-04 18:07:13:429 grammar LogManager.java:25 import '['=49
2023-09-04 18:07:13:429 grammar LogManager.java:25 import ']'=50
2023-09-04 18:07:13:429 grammar LogManager.java:25 import ','=51
2023-09-04 18:07:13:429 grammar LogManager.java:25 import '.'=52
2023-09-04 18:07:13:430 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, NUMBER=27, STRING=28, ID=29, DIF=30, IG_IG=31, NOT=32, OR=33, AND=34, IG=35, MAY_IG=36, MEN_IG=37, MAYOR=38, MENOR=39, MUL=40, DIV=41, ADD=42, SUB=43, PARIZQ=44, PARDER=45, LLAVEIZQ=46, LLAVEDER=47, D_PTS=48, CORIZQ=49, CORDER=50, COMA=51, PUNTO=52, WHITESPACE=53, COMMENT=54, LINE_COMMENT=55, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'IsEmpty'=26, '!='=30, '=='=31, '!'=32, '||'=33, '&&'=34, '='=35, '>='=36, '<='=37, '>'=38, '<'=39, '*'=40, '/'=41, '+'=42, '-'=43, '('=44, ')'=45, '{'=46, '}'=47, ':'=48, '['=49, ']'=50, ','=51, '.'=52}
2023-09-04 18:07:13:431 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, NUMBER=27, STRING=28, ID=29, DIF=30, IG_IG=31, NOT=32, OR=33, AND=34, IG=35, MAY_IG=36, MEN_IG=37, MAYOR=38, MENOR=39, MUL=40, DIV=41, ADD=42, SUB=43, PARIZQ=44, PARDER=45, LLAVEIZQ=46, LLAVEDER=47, D_PTS=48, CORIZQ=49, CORDER=50, COMA=51, PUNTO=52, WHITESPACE=53, COMMENT=54, LINE_COMMENT=55}
2023-09-04 18:07:13:432 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'IsEmpty'=26, '!='=30, '=='=31, '!'=32, '||'=33, '&&'=34, '='=35, '>='=36, '<='=37, '>'=38, '<'=39, '*'=40, '/'=41, '+'=42, '-'=43, '('=44, ')'=45, '{'=46, '}'=47, ':'=48, '['=49, ']'=50, ','=51, '.'=52}
2023-09-04 18:07:13:502 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-04 18:07:13:503 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..19, 21, 29}, null]
2023-09-04 18:07:13:503 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:503 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-04 18:07:13:503 LL1 LogManager.java:25 look=[7, 8, {16..17}, 29, 10, 11, 12, 18, 19, 21, 29, 29, 29]
2023-09-04 18:07:13:504 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:504 LL1 LogManager.java:25 
DECISION 2 in rule forstmt
2023-09-04 18:07:13:504 LL1 LogManager.java:25 look=[11, 11]
2023-09-04 18:07:13:504 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:504 LL1 LogManager.java:25 
DECISION 3 in rule caselist
2023-09-04 18:07:13:504 LL1 LogManager.java:25 look=[null, 14]
2023-09-04 18:07:13:504 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:504 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-09-04 18:07:13:504 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-09-04 18:07:13:504 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:504 LL1 LogManager.java:25 
DECISION 5 in rule elseiflist
2023-09-04 18:07:13:505 LL1 LogManager.java:25 look=[null, null]
2023-09-04 18:07:13:505 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:505 LL1 LogManager.java:25 
DECISION 6 in rule declarationstmt
2023-09-04 18:07:13:505 LL1 LogManager.java:25 look=[16, 17]
2023-09-04 18:07:13:505 LL1 LogManager.java:25 LL(1)? true
2023-09-04 18:07:13:505 LL1 LogManager.java:25 
DECISION 7 in rule types
2023-09-04 18:07:13:505 LL1 LogManager.java:25 look=[1, 2, 4, 3, 49, 49]
2023-09-04 18:07:13:505 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:505 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-09-04 18:07:13:506 LL1 LogManager.java:25 look=[44, 29, 1, 4, 2, 29, 29, 49, 27, 28, 5, 6]
2023-09-04 18:07:13:506 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:506 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-09-04 18:07:13:506 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-04 18:07:13:506 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:506 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-09-04 18:07:13:507 LL1 LogManager.java:25 look=[null, null]
2023-09-04 18:07:13:507 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:507 LL1 LogManager.java:25 
DECISION 11 in rule listParams
2023-09-04 18:07:13:507 LL1 LogManager.java:25 look=[null, 50]
2023-09-04 18:07:13:507 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:507 LL1 LogManager.java:25 
DECISION 12 in rule listArray
2023-09-04 18:07:13:508 LL1 LogManager.java:25 look=[null, null]
2023-09-04 18:07:13:508 LL1 LogManager.java:25 LL(1)? false
2023-09-04 18:07:13:520 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 18:07:13:543 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-04 18:07:13:544 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-09-04 18:07:13:546 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-09-04 18:07:13:549 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-04 18:07:13:549 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-09-04 18:07:13:553 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-04 18:07:13:554 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,34:13]
2023-09-04 18:07:13:554 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,34:27]
2023-09-04 18:07:13:557 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-04 18:07:13:557 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:14]
2023-09-04 18:07:13:557 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:22].[@-1,20:23='prnt',<0>,40:32]
2023-09-04 18:07:13:557 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-04 18:07:13:558 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-09-04 18:07:13:558 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-09-04 18:07:13:558 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-04 18:07:13:558 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-09-04 18:07:13:558 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-09-04 18:07:13:558 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-09-04 18:07:13:559 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:15]
2023-09-04 18:07:13:559 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,43:23].[@-1,21:25='asign',<0>,43:34]
2023-09-04 18:07:13:559 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-09-04 18:07:13:560 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:14]
2023-09-04 18:07:13:560 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,44:22].[@-1,20:25='whiles',<0>,44:32]
2023-09-04 18:07:13:560 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-09-04 18:07:13:560 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-09-04 18:07:13:561 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:21='fors',<0>,45:28]
2023-09-04 18:07:13:561 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-09-04 18:07:13:561 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-09-04 18:07:13:561 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,46:22].[@-1,20:24='swtch',<0>,46:32]
2023-09-04 18:07:13:562 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-09-04 18:07:13:562 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:13]
2023-09-04 18:07:13:562 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,47:21].[@-1,19:23='break',<0>,47:30]
2023-09-04 18:07:13:562 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-09-04 18:07:13:563 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:15]
2023-09-04 18:07:13:563 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,48:23].[@-1,22:29='continue',<0>,48:35]
2023-09-04 18:07:13:563 action-translator LogManager.java:25 translate  $inst = $guardtmt.guard 
2023-09-04 18:07:13:563 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:13]
2023-09-04 18:07:13:563 action-translator LogManager.java:25 qattr [@-1,10:17='guardtmt',<0>,49:21].[@-1,19:23='guard',<0>,49:30]
2023-09-04 18:07:13:564 action-translator LogManager.java:25 translate  $inst = $appendtmt.append
2023-09-04 18:07:13:564 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:14]
2023-09-04 18:07:13:564 action-translator LogManager.java:25 qattr [@-1,10:18='appendtmt',<0>,50:22].[@-1,20:25='append',<0>,50:32]
2023-09-04 18:07:13:564 action-translator LogManager.java:25 translate  $inst = $removelastmt.removelast 
2023-09-04 18:07:13:564 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:17]
2023-09-04 18:07:13:565 action-translator LogManager.java:25 qattr [@-1,10:21='removelastmt',<0>,51:25].[@-1,23:32='removelast',<0>,51:38]
2023-09-04 18:07:13:565 action-translator LogManager.java:25 translate  $inst = $removetmt.remove 
2023-09-04 18:07:13:565 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:14]
2023-09-04 18:07:13:566 action-translator LogManager.java:25 qattr [@-1,10:18='removetmt',<0>,52:22].[@-1,20:25='remove',<0>,52:32]
2023-09-04 18:07:13:568 action-translator LogManager.java:25 translate  $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-04 18:07:13:568 action-translator LogManager.java:25 attr [@-1,2:7='remove',<0>,57:40]
2023-09-04 18:07:13:568 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,57:73].[@-1,38:41='line',<0>,57:76]
2023-09-04 18:07:13:570 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,57:83].[@-1,48:50='pos',<0>,57:86]
2023-09-04 18:07:13:571 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,57:92].[@-1,57:60='text',<0>,57:95]
2023-09-04 18:07:13:571 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,57:102].[@-1,69:69='e',<0>,57:107]
2023-09-04 18:07:13:572 action-translator LogManager.java:25 translate  $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-09-04 18:07:13:573 action-translator LogManager.java:25 attr [@-1,2:11='removelast',<0>,61:39]
2023-09-04 18:07:13:573 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,61:80].[@-1,46:49='line',<0>,61:83]
2023-09-04 18:07:13:573 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,61:90].[@-1,56:58='pos',<0>,61:93]
2023-09-04 18:07:13:573 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,61:99].[@-1,65:68='text',<0>,61:102]
2023-09-04 18:07:13:575 action-translator LogManager.java:25 translate  $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-04 18:07:13:575 action-translator LogManager.java:25 attr [@-1,2:7='append',<0>,65:38]
2023-09-04 18:07:13:575 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,65:71].[@-1,38:41='line',<0>,65:74]
2023-09-04 18:07:13:575 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,65:81].[@-1,48:50='pos',<0>,65:84]
2023-09-04 18:07:13:576 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,65:90].[@-1,57:60='text',<0>,65:93]
2023-09-04 18:07:13:576 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,65:100].[@-1,69:69='e',<0>,65:105]
2023-09-04 18:07:13:577 action-translator LogManager.java:25 translate $guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )
2023-09-04 18:07:13:577 action-translator LogManager.java:25 attr [@-1,1:5='guard',<0>,69:43]
2023-09-04 18:07:13:577 action-translator LogManager.java:25 qattr [@-1,33:37='GUARD',<0>,69:75].[@-1,39:42='line',<0>,69:81]
2023-09-04 18:07:13:578 action-translator LogManager.java:25 qattr [@-1,46:50='GUARD',<0>,69:88].[@-1,52:54='pos',<0>,69:94]
2023-09-04 18:07:13:578 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,69:100].[@-1,63:63='e',<0>,69:105]
2023-09-04 18:07:13:578 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,69:109].[@-1,73:75='blk',<0>,69:115]
2023-09-04 18:07:13:579 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-04 18:07:13:579 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,73:10]
2023-09-04 18:07:13:579 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,73:41].[@-1,39:42='line',<0>,73:47]
2023-09-04 18:07:13:580 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,73:54].[@-1,52:54='pos',<0>,73:60]
2023-09-04 18:07:13:581 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-04 18:07:13:581 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,77:13]
2023-09-04 18:07:13:581 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,77:50].[@-1,48:51='line',<0>,77:59]
2023-09-04 18:07:13:581 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,77:66].[@-1,64:66='pos',<0>,77:75]
2023-09-04 18:07:13:583 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-09-04 18:07:13:584 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,81:29]
2023-09-04 18:07:13:584 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,81:59].[@-1,38:41='line',<0>,81:65]
2023-09-04 18:07:13:584 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,81:71].[@-1,50:52='pos',<0>,81:77]
2023-09-04 18:07:13:585 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,81:82].[@-1,60:60='e',<0>,81:87]
2023-09-04 18:07:13:590 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-09-04 18:07:13:590 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,87:74]
2023-09-04 18:07:13:590 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,87:102].[@-1,34:37='line',<0>,87:106]
2023-09-04 18:07:13:590 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,87:113].[@-1,45:47='pos',<0>,87:117]
2023-09-04 18:07:13:591 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,87:123].[@-1,54:57='text',<0>,87:126]
2023-09-04 18:07:13:591 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,87:133].[@-1,64:64='e',<0>,87:136]
2023-09-04 18:07:13:591 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,87:139].[@-1,70:70='e',<0>,87:142]
2023-09-04 18:07:13:591 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,87:152].[@-1,86:88='blk',<0>,87:158]
2023-09-04 18:07:13:594 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-09-04 18:07:13:594 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,88:56]
2023-09-04 18:07:13:594 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,88:84].[@-1,34:37='line',<0>,88:88]
2023-09-04 18:07:13:595 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,88:95].[@-1,45:47='pos',<0>,88:99]
2023-09-04 18:07:13:595 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,88:105].[@-1,54:57='text',<0>,88:108]
2023-09-04 18:07:13:595 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,88:124].[@-1,74:77='text',<0>,88:128]
2023-09-04 18:07:13:596 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,88:135].[@-1,87:89='blk',<0>,88:141]
2023-09-04 18:07:13:597 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-09-04 18:07:13:597 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,92:64]
2023-09-04 18:07:13:597 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,92:97].[@-1,42:45='line',<0>,92:104]
2023-09-04 18:07:13:598 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,92:111].[@-1,56:58='pos',<0>,92:118]
2023-09-04 18:07:13:598 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,92:124].[@-1,67:67='e',<0>,92:129]
2023-09-04 18:07:13:598 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,92:132].[@-1,79:83='cases',<0>,92:141]
2023-09-04 18:07:13:598 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,92:149].[@-1,93:95='blk',<0>,92:155]
2023-09-04 18:07:13:600 action-translator LogManager.java:25 translate 
2023-09-04 18:07:13:600 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-09-04 18:07:13:601 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-09-04 18:07:13:601 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-09-04 18:07:13:601 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-09-04 18:07:13:601 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-09-04 18:07:13:603 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:603 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-09-04 18:07:13:604 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-09-04 18:07:13:604 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-09-04 18:07:13:604 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-09-04 18:07:13:606 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:607 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-09-04 18:07:13:607 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,107:26]
2023-09-04 18:07:13:607 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,107:57].[@-1,38:41='line',<0>,107:62]
2023-09-04 18:07:13:607 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,107:69].[@-1,50:52='pos',<0>,107:74]
2023-09-04 18:07:13:608 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,107:79].[@-1,60:60='e',<0>,107:84]
2023-09-04 18:07:13:608 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,107:88].[@-1,70:72='blk',<0>,107:94]
2023-09-04 18:07:13:611 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-09-04 18:07:13:611 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,111:36]
2023-09-04 18:07:13:611 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,111:65].[@-1,34:37='line',<0>,111:68]
2023-09-04 18:07:13:611 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,111:75].[@-1,44:46='pos',<0>,111:78]
2023-09-04 18:07:13:611 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,111:84].[@-1,55:55='e',<0>,111:89]
2023-09-04 18:07:13:612 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,111:93].[@-1,65:67='blk',<0>,111:99]
2023-09-04 18:07:13:613 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-09-04 18:07:13:613 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,112:69]
2023-09-04 18:07:13:613 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,112:98].[@-1,33:36='line',<0>,112:101]
2023-09-04 18:07:13:614 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,112:108].[@-1,43:45='pos',<0>,112:111]
2023-09-04 18:07:13:614 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,112:117].[@-1,54:54='e',<0>,112:122]
2023-09-04 18:07:13:614 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,112:126].[@-1,61:63='blk',<0>,112:129]
2023-09-04 18:07:13:614 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,112:140].[@-1,75:77='blk',<0>,112:143]
2023-09-04 18:07:13:615 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-09-04 18:07:13:615 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,113:47]
2023-09-04 18:07:13:616 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,113:76].[@-1,34:37='line',<0>,113:79]
2023-09-04 18:07:13:616 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,113:86].[@-1,44:46='pos',<0>,113:89]
2023-09-04 18:07:13:616 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,113:95].[@-1,55:55='e',<0>,113:100]
2023-09-04 18:07:13:616 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,113:104].[@-1,65:67='blk',<0>,113:110]
2023-09-04 18:07:13:616 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,113:116].[@-1,82:93='else_if_list',<0>,113:127]
2023-09-04 18:07:13:617 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-09-04 18:07:13:617 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,114:82]
2023-09-04 18:07:13:617 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,114:111].[@-1,34:37='line',<0>,114:114]
2023-09-04 18:07:13:618 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,114:121].[@-1,44:46='pos',<0>,114:124]
2023-09-04 18:07:13:618 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,114:130].[@-1,55:55='e',<0>,114:135]
2023-09-04 18:07:13:618 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,114:139].[@-1,62:64='blk',<0>,114:142]
2023-09-04 18:07:13:618 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,114:148].[@-1,79:90='else_if_list',<0>,114:159]
2023-09-04 18:07:13:618 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,114:174].[@-1,97:99='blk',<0>,114:177]
2023-09-04 18:07:13:619 action-translator LogManager.java:25 translate 
2023-09-04 18:07:13:620 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-09-04 18:07:13:620 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-09-04 18:07:13:621 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-09-04 18:07:13:621 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-09-04 18:07:13:621 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-09-04 18:07:13:622 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:623 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-09-04 18:07:13:623 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-09-04 18:07:13:623 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-09-04 18:07:13:624 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-09-04 18:07:13:624 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:626 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-09-04 18:07:13:626 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,131:41]
2023-09-04 18:07:13:626 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,131:70].[@-1,34:37='line',<0>,131:73]
2023-09-04 18:07:13:626 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,131:80].[@-1,44:46='pos',<0>,131:83]
2023-09-04 18:07:13:626 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,131:89].[@-1,55:55='e',<0>,131:94]
2023-09-04 18:07:13:627 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,131:98].[@-1,65:67='blk',<0>,131:104]
2023-09-04 18:07:13:628 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-04 18:07:13:628 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,136:39]
2023-09-04 18:07:13:628 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,136:71].[@-1,40:43='line',<0>,136:77]
2023-09-04 18:07:13:628 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,136:84].[@-1,53:55='pos',<0>,136:90]
2023-09-04 18:07:13:628 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,136:96].[@-1,64:64='e',<0>,136:101]
2023-09-04 18:07:13:629 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,136:105].[@-1,74:76='blk',<0>,136:111]
2023-09-04 18:07:13:630 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);
2023-09-04 18:07:13:630 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,140:30] [@-1,6:91=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)',<0>,140:35]
2023-09-04 18:07:13:630 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)
2023-09-04 18:07:13:630 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,140:59].[@-1,34:37='line',<0>,140:63]
2023-09-04 18:07:13:631 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,140:70].[@-1,45:47='pos',<0>,140:74]
2023-09-04 18:07:13:631 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,140:80].[@-1,54:57='text',<0>,140:83]
2023-09-04 18:07:13:631 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,140:90].[@-1,67:68='ty',<0>,140:96]
2023-09-04 18:07:13:631 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,140:101].[@-1,77:77='e',<0>,140:106]
2023-09-04 18:07:13:633 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);
2023-09-04 18:07:13:633 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,141:30] [@-1,6:90=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)',<0>,141:35]
2023-09-04 18:07:13:633 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)
2023-09-04 18:07:13:633 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,141:59].[@-1,34:37='line',<0>,141:63]
2023-09-04 18:07:13:634 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,141:70].[@-1,45:47='pos',<0>,141:74]
2023-09-04 18:07:13:634 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,141:80].[@-1,54:57='text',<0>,141:83]
2023-09-04 18:07:13:634 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,141:90].[@-1,67:68='ty',<0>,141:96]
2023-09-04 18:07:13:635 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,141:101].[@-1,77:77='e',<0>,141:106]
2023-09-04 18:07:13:636 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-09-04 18:07:13:637 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,147:15]
2023-09-04 18:07:13:637 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,147:51].[@-1,41:44='line',<0>,147:54]
2023-09-04 18:07:13:637 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,147:61].[@-1,51:53='pos',<0>,147:64]
2023-09-04 18:07:13:638 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,147:70].[@-1,60:63='text',<0>,147:73]
2023-09-04 18:07:13:638 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,147:80].[@-1,72:72='e',<0>,147:85]
2023-09-04 18:07:13:639 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-04 18:07:13:639 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,153:8]
2023-09-04 18:07:13:639 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-04 18:07:13:639 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,154:10]
2023-09-04 18:07:13:639 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-04 18:07:13:640 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,155:8]
2023-09-04 18:07:13:640 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-04 18:07:13:640 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,156:9]
2023-09-04 18:07:13:640 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-04 18:07:13:641 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,157:24]
2023-09-04 18:07:13:641 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-04 18:07:13:641 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,158:19]
2023-09-04 18:07:13:644 action-translator LogManager.java:25 translate 
2023-09-04 18:07:13:645 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-04 18:07:13:645 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-09-04 18:07:13:645 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-09-04 18:07:13:646 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-04 18:07:13:646 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-09-04 18:07:13:646 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-09-04 18:07:13:647 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) 
2023-09-04 18:07:13:647 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:99]
2023-09-04 18:07:13:647 action-translator LogManager.java:25 attr [@-1,33:35='INT',<0>,4:130]
2023-09-04 18:07:13:647 action-translator LogManager.java:25 attr [@-1,48:50='INT',<0>,4:145]
2023-09-04 18:07:13:648 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:162].[@-1,70:70='e',<0>,4:167]
2023-09-04 18:07:13:649 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) 
2023-09-04 18:07:13:649 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:99]
2023-09-04 18:07:13:649 action-translator LogManager.java:25 attr [@-1,33:35='STR',<0>,5:130]
2023-09-04 18:07:13:649 action-translator LogManager.java:25 attr [@-1,48:50='STR',<0>,5:145]
2023-09-04 18:07:13:650 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,5:162].[@-1,70:70='e',<0>,5:167]
2023-09-04 18:07:13:650 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) 
2023-09-04 18:07:13:650 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:101]
2023-09-04 18:07:13:651 action-translator LogManager.java:25 attr [@-1,33:37='FLOAT',<0>,6:132]
2023-09-04 18:07:13:651 action-translator LogManager.java:25 attr [@-1,50:54='FLOAT',<0>,6:149]
2023-09-04 18:07:13:651 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,6:168].[@-1,74:74='e',<0>,6:173]
2023-09-04 18:07:13:652 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-09-04 18:07:13:652 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:122]
2023-09-04 18:07:13:652 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,7:148].[@-1,31:34='line',<0>,7:151]
2023-09-04 18:07:13:653 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,7:158].[@-1,41:43='pos',<0>,7:161]
2023-09-04 18:07:13:653 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,7:167].[@-1,50:53='text',<0>,7:170]
2023-09-04 18:07:13:653 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-09-04 18:07:13:653 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:124]
2023-09-04 18:07:13:653 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,8:152].[@-1,33:36='line',<0>,8:155]
2023-09-04 18:07:13:654 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,8:162].[@-1,43:45='pos',<0>,8:165]
2023-09-04 18:07:13:654 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,8:171].[@-1,52:55='text',<0>,8:174]
2023-09-04 18:07:13:654 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-09-04 18:07:13:654 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:85]
2023-09-04 18:07:13:654 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,9:111].[@-1,35:38='line',<0>,9:118]
2023-09-04 18:07:13:655 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,9:125].[@-1,49:51='pos',<0>,9:132]
2023-09-04 18:07:13:655 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,9:138].[@-1,66:66='l',<0>,9:149]
2023-09-04 18:07:13:655 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-04 18:07:13:656 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,12:30].[@-1,39:42='text',<0>,12:37]
2023-09-04 18:07:13:656 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,13:43].[@-1,102:105='text',<0>,13:50]
2023-09-04 18:07:13:656 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,17:13]
2023-09-04 18:07:13:657 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,17:43].[@-1,240:243='line',<0>,17:50]
2023-09-04 18:07:13:657 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,17:56].[@-1,253:255='pos',<0>,17:63]
2023-09-04 18:07:13:657 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,19:37].[@-1,341:344='text',<0>,19:44]
2023-09-04 18:07:13:657 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,23:13]
2023-09-04 18:07:13:658 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,23:43].[@-1,474:477='line',<0>,23:50]
2023-09-04 18:07:13:658 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,23:56].[@-1,487:489='pos',<0>,23:63]
2023-09-04 18:07:13:659 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-04 18:07:13:659 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,28:16].[@-1,25:28='text',<0>,28:23]
2023-09-04 18:07:13:659 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,29:9]
2023-09-04 18:07:13:659 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,29:39].[@-1,77:80='line',<0>,29:46]
2023-09-04 18:07:13:660 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,29:53].[@-1,91:93='pos',<0>,29:60]
2023-09-04 18:07:13:660 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-04 18:07:13:661 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:32]
2023-09-04 18:07:13:661 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,31:62].[@-1,36:39='line',<0>,31:66]
2023-09-04 18:07:13:661 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,31:73].[@-1,47:49='pos',<0>,31:77]
2023-09-04 18:07:13:662 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-04 18:07:13:662 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:32]
2023-09-04 18:07:13:662 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,32:62].[@-1,36:39='line',<0>,32:66]
2023-09-04 18:07:13:662 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,32:73].[@-1,47:49='pos',<0>,32:77]
2023-09-04 18:07:13:663 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-04 18:07:13:663 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:663 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:139]
2023-09-04 18:07:13:663 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:169].[@-1,37:41='start',<0>,35:174]
2023-09-04 18:07:13:664 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:192].[@-1,60:64='start',<0>,35:197]
2023-09-04 18:07:13:664 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:217].[@-1,85:85='e',<0>,35:222]
2023-09-04 18:07:13:664 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:226].[@-1,92:95='text',<0>,35:229]
2023-09-04 18:07:13:664 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:236].[@-1,105:105='e',<0>,35:242]
2023-09-04 18:07:13:664 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 18:07:13:665 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:665 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:149]
2023-09-04 18:07:13:665 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:179].[@-1,37:41='start',<0>,36:184]
2023-09-04 18:07:13:665 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:202].[@-1,60:64='start',<0>,36:207]
2023-09-04 18:07:13:665 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:227].[@-1,85:85='e',<0>,36:232]
2023-09-04 18:07:13:666 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:236].[@-1,92:95='text',<0>,36:239]
2023-09-04 18:07:13:666 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:246].[@-1,105:105='e',<0>,36:252]
2023-09-04 18:07:13:666 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 18:07:13:666 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:666 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:154]
2023-09-04 18:07:13:666 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:184].[@-1,37:41='start',<0>,37:189]
2023-09-04 18:07:13:666 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:207].[@-1,60:64='start',<0>,37:212]
2023-09-04 18:07:13:667 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:232].[@-1,85:85='e',<0>,37:237]
2023-09-04 18:07:13:667 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:241].[@-1,92:95='text',<0>,37:244]
2023-09-04 18:07:13:667 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:251].[@-1,105:105='e',<0>,37:257]
2023-09-04 18:07:13:667 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-04 18:07:13:668 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:668 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,38:154]
2023-09-04 18:07:13:668 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,38:184].[@-1,37:41='start',<0>,38:189]
2023-09-04 18:07:13:668 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,38:207].[@-1,60:64='start',<0>,38:212]
2023-09-04 18:07:13:668 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,38:232].[@-1,85:85='e',<0>,38:237]
2023-09-04 18:07:13:668 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,38:241].[@-1,92:95='text',<0>,38:244]
2023-09-04 18:07:13:668 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,38:251].[@-1,105:105='e',<0>,38:257]
2023-09-04 18:07:13:668 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-04 18:07:13:668 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:668 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:151]
2023-09-04 18:07:13:669 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:181].[@-1,37:41='start',<0>,39:186]
2023-09-04 18:07:13:669 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:204].[@-1,60:64='start',<0>,39:209]
2023-09-04 18:07:13:669 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:229].[@-1,85:85='e',<0>,39:234]
2023-09-04 18:07:13:669 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:238].[@-1,92:95='text',<0>,39:241]
2023-09-04 18:07:13:669 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:248].[@-1,105:105='e',<0>,39:254]
2023-09-04 18:07:13:669 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-04 18:07:13:670 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:670 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:127]
2023-09-04 18:07:13:670 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:157].[@-1,37:41='start',<0>,40:162]
2023-09-04 18:07:13:670 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:180].[@-1,60:64='start',<0>,40:185]
2023-09-04 18:07:13:670 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:205].[@-1,85:85='e',<0>,40:210]
2023-09-04 18:07:13:671 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:214].[@-1,92:95='text',<0>,40:217]
2023-09-04 18:07:13:671 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:224].[@-1,105:105='e',<0>,40:230]
2023-09-04 18:07:13:671 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-04 18:07:13:671 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-04 18:07:13:671 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:126]
2023-09-04 18:07:13:671 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:156].[@-1,37:41='start',<0>,41:161]
2023-09-04 18:07:13:671 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:179].[@-1,60:64='start',<0>,41:184]
2023-09-04 18:07:13:672 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:204].[@-1,85:85='e',<0>,41:209]
2023-09-04 18:07:13:672 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:213].[@-1,92:95='text',<0>,41:216]
2023-09-04 18:07:13:672 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:223].[@-1,105:105='e',<0>,41:229]
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-09-04 18:07:13:673 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-09-04 18:07:13:674 action-translator LogManager.java:25 translate 
2023-09-04 18:07:13:674 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-04 18:07:13:674 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-04 18:07:13:674 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-04 18:07:13:674 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-04 18:07:13:674 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-04 18:07:13:674 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:674 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-04 18:07:13:675 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-04 18:07:13:675 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-04 18:07:13:675 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-04 18:07:13:675 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:676 action-translator LogManager.java:25 translate 
2023-09-04 18:07:13:676 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-09-04 18:07:13:676 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-09-04 18:07:13:676 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-09-04 18:07:13:677 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-09-04 18:07:13:677 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-09-04 18:07:13:677 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:13:677 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-04 18:07:13:678 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-09-04 18:07:13:678 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-09-04 18:07:13:678 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-09-04 18:07:13:678 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-09-04 18:07:13:679 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-09-04 18:07:13:679 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-04 18:07:14:124 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 18:07:14:125 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 18:07:14:261 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-04 18:07:14:262 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

