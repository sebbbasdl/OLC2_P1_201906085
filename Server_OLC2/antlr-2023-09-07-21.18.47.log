2023-09-07 21:18:43:877 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-09-07 21:18:43:922 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE LET (BLOCK (ALT 'let'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE GUARD (BLOCK (ALT 'guard'))) (RULE APPEND (BLOCK (ALT 'append'))) (RULE REMOVELAST (BLOCK (ALT 'removeLast'))) (RULE REMOVE (BLOCK (ALT 'remove'))) (RULE COUNT (BLOCK (ALT 'count'))) (RULE ISEMPTY (BLOCK (ALT 'isEmpty'))) (RULE AT (BLOCK (ALT 'at'))) (RULE FUNC (BLOCK (ALT 'func'))) (RULE STRUCT (BLOCK (ALT 'struct'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE ARROW1 (BLOCK (ALT '->'))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE MODULO (BLOCK (ALT '%'))) (RULE GUIONB (BLOCK (ALT '_'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-09-07 21:18:45:402 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT appendtmt { $inst = $appendtmt.append}) (ALT removelastmt { $inst = $removelastmt.removelast }) (ALT removetmt { $inst = $removetmt.remove }) (ALT function { $inst = $function.fun }) (ALT callFunctionInst { $inst = $callFunctionInst.cfi }) (ALT structCreation { $inst = $structCreation.dec }) (ALT returntmt { $inst = $returntmt.ret }))) (RULE returntmt (returns  interfaces.Instruction ret) (BLOCK (ALT RETURN expr {  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE removetmt (returns interfaces.Instruction remove) (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE removelastmt (returns interfaces.Instruction removelast) (BLOCK (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE appendtmt (returns interfaces.Instruction append) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e, nil)}) (ALT PRINT PARIZQ (= expr1 expr) COMA (= expr2 expr) PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr1.e, $expr2.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;}) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;}))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $IG.text) }) (ALT ID ADD IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $ADD.text+$IG.text ) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }) (ALT ID {$ty =environment.STRUCT}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV) (ALT MODULO))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(),$right.e , $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID PARIZQ listStructExp PARDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunctionInst (returns interfaces.Instruction cfi) (BLOCK (ALT ID PARIZQ listParams PARDER { $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-07 21:18:45:434 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT appendtmt { $inst = $appendtmt.append}) (ALT removelastmt { $inst = $removelastmt.removelast }) (ALT removetmt { $inst = $removetmt.remove }) (ALT function { $inst = $function.fun }) (ALT callFunctionInst { $inst = $callFunctionInst.cfi }) (ALT structCreation { $inst = $structCreation.dec }) (ALT returntmt { $inst = $returntmt.ret }))) (RULE returntmt (returns  interfaces.Instruction ret) (BLOCK (ALT RETURN expr {  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE removetmt (returns interfaces.Instruction remove) (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE removelastmt (returns interfaces.Instruction removelast) (BLOCK (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE appendtmt (returns interfaces.Instruction append) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e, nil)}) (ALT PRINT PARIZQ (= expr1 expr) COMA (= expr2 expr) PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr1.e, $expr2.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;}) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;}))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $IG.text) }) (ALT ID ADD IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $ADD.text+$IG.text ) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }) (ALT ID {$ty =environment.STRUCT}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV MODULO)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(),$right.e , $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID PARIZQ listStructExp PARDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunctionInst (returns interfaces.Instruction cfi) (BLOCK (ALT ID PARIZQ listParams PARDER { $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-07 21:18:45:445 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT guardtmt { $inst = $guardtmt.guard }) (ALT appendtmt { $inst = $appendtmt.append}) (ALT removelastmt { $inst = $removelastmt.removelast }) (ALT removetmt { $inst = $removetmt.remove }) (ALT function { $inst = $function.fun }) (ALT callFunctionInst { $inst = $callFunctionInst.cfi }) (ALT structCreation { $inst = $structCreation.dec }) (ALT returntmt { $inst = $returntmt.ret }))) (RULE returntmt (returns  interfaces.Instruction ret) (BLOCK (ALT RETURN expr {  $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  }))) (RULE function (returns  interfaces.Instruction fun ) (BLOCK (ALT FUNC ID PARIZQ listParamsFunc PARDER LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)
}) (ALT FUNC ID PARIZQ listParamsFunc PARDER ARROW1 types LLAVEIZQ block LLAVEDER {
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)
}))) (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (= list listParamsFunc) COMA ID D_PTS types {
    var arr []interface{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    arr = append($list.lpf, newParam)
    $lpf = arr
    }) (ALT ID D_PTS types {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} }))) (RULE structCreation (returns interfaces.Instruction dec) (BLOCK (ALT STRUCT ID LLAVEIZQ listStructDec LLAVEDER { $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) }))) (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (= list listStructDec) COMA VAR ID D_PTS types {
                                                var arr []interface{}
                                                newParams := environment.NewStructType($ID.text, $types.ty)
                                                arr = append($list.l, newParams)
                                                $l = arr
                                            }) (ALT VAR ID D_PTS types {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} }))) (RULE removetmt (returns interfaces.Instruction remove) (BLOCK (ALT ID PUNTO REMOVE PARIZQ AT D_PTS expr PARDER { $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE removelastmt (returns interfaces.Instruction removelast) (BLOCK (ALT ID PUNTO REMOVELAST PARIZQ PARDER { $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) }))) (RULE appendtmt (returns interfaces.Instruction append) (BLOCK (ALT ID PUNTO APPEND PARIZQ expr PARDER { $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) }))) (RULE guardtmt (returns interfaces.Instruction guard) (BLOCK (ALT GUARD expr ELSE LLAVEIZQ block LLAVEDER {$guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )}))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e, nil)}) (ALT PRINT PARIZQ (= expr1 expr) COMA (= expr2 expr) PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr1.e, $expr2.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR GUIONB IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);}) (ALT VAR ID IG expr {$dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);}) (ALT LET ID IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);}) (ALT LET ID D_PTS types IG expr {$dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);}) (ALT VAR ID IG expr { $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;}) (ALT LET ID IG expr { $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;}))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $IG.text) }) (ALT ID ADD IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $ADD.text+$IG.text ) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ types CORDER { $ty = environment.ARRAY }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }) (ALT ID {$ty =environment.STRUCT}))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= op SUB) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= left expr) (= op (SET MUL DIV MODULO)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= op NOT) (= right expr) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(),$right.e , $op.text, $right.e) }) (ALT callFunction { $e = $callFunction.cf }) (ALT ID PARIZQ listStructExp PARDER { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT STR PARIZQ expr PARDER { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT FLOAT PARIZQ expr PARDER { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT ID PUNTO COUNT { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT ID PUNTO ISEMPTY { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT (= list listArray) PUNTO ID { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)}))) (RULE callFunctionInst (returns interfaces.Instruction cfi) (BLOCK (ALT ID PARIZQ listParams PARDER { $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) }))) (RULE callFunction (returns interfaces.Expression cf) (BLOCK (ALT ID PARIZQ listParamsCall PARDER { $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) }))) (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (= list listParamsCall) COMA expr {
                                    var arr []interface{}
                                    arr = append($list.l, $expr.e)
                                    $l = arr
                                }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    }))) (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (= list listStructExp) COMA ID D_PTS expr {
                                            var arr []interface{}
                                            StrExp := environment.NewStructContent($ID.text, $expr.e)
                                            arr = append($list.l, StrExp)
                                            $l = arr
                                        }) (ALT ID D_PTS expr {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })))))
2023-09-07 21:18:45:445 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-09-07 21:18:45:556 left-recursion LogManager.java:25 listParamsFunc returns [[]interface{} lpf]
    :   ( {} ID<tokenIndex=260> D_PTS<tokenIndex=262> types<tokenIndex=264> {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    } 
        | { $lpf = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=248> ID<tokenIndex=250> D_PTS<tokenIndex=252> types<tokenIndex=254> {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }
        )*
    ;
2023-09-07 21:18:45:586 grammar LogManager.java:25 added: (RULE listParamsFunc (returns []interface{} lpf) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 260))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 262))) (types (ELEMENT_OPTIONS (= tokenIndex 264))) {
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    }) (ALT { $lpf = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 248))) (ID (ELEMENT_OPTIONS (= tokenIndex 250))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 252))) (types (ELEMENT_OPTIONS (= tokenIndex 254))) {
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              }))))))
2023-09-07 21:18:45:589 left-recursion LogManager.java:25 listStructDec returns [[]interface{} l]
    :   ( {} VAR<tokenIndex=320> ID<tokenIndex=322> D_PTS<tokenIndex=324> types<tokenIndex=326> {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    } 
        | { $l = []interface{}{} } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=306> VAR<tokenIndex=308> ID<tokenIndex=310> D_PTS<tokenIndex=312> types<tokenIndex=314> {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }
        )*
    ;
2023-09-07 21:18:45:596 grammar LogManager.java:25 added: (RULE listStructDec (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (VAR (ELEMENT_OPTIONS (= tokenIndex 320))) (ID (ELEMENT_OPTIONS (= tokenIndex 322))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 324))) (types (ELEMENT_OPTIONS (= tokenIndex 326))) {
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    }) (ALT { $l = []interface{}{} })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 306))) (VAR (ELEMENT_OPTIONS (= tokenIndex 308))) (ID (ELEMENT_OPTIONS (= tokenIndex 310))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 312))) (types (ELEMENT_OPTIONS (= tokenIndex 314))) {
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      }))))))
2023-09-07 21:18:45:600 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=645>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=639> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-09-07 21:18:45:605 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 645))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 639))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-09-07 21:18:45:606 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=780>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=774> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-09-07 21:18:45:610 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 780))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 774))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-09-07 21:18:45:623 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} op=SUB<tokenIndex=1015> right=expr<tokenIndex=1019,p=23> { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) } 
        | op=NOT<tokenIndex=1161> right=expr<tokenIndex=1165,p=15> { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(),$right.e , $op.text, $right.e) } 
        | callFunction<tokenIndex=1171> { $e = $callFunction.cf } 
        | ID<tokenIndex=1177> PARIZQ<tokenIndex=1179> listStructExp<tokenIndex=1181> PARDER<tokenIndex=1183> { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) } 
        | PARIZQ<tokenIndex=1189> expr<tokenIndex=1191> PARDER<tokenIndex=1193> { $e = $expr.e } 
        | list=listArray<tokenIndex=1201> { $e = $list.p} 
        | CORIZQ<tokenIndex=1207> listParams<tokenIndex=1209> CORDER<tokenIndex=1211> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | INT<tokenIndex=1217> PARIZQ<tokenIndex=1219> expr<tokenIndex=1221> PARDER<tokenIndex=1223> { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) } 
        | STR<tokenIndex=1229> PARIZQ<tokenIndex=1231> expr<tokenIndex=1233> PARDER<tokenIndex=1235> { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) } 
        | FLOAT<tokenIndex=1241> PARIZQ<tokenIndex=1243> expr<tokenIndex=1245> PARDER<tokenIndex=1247> { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) } 
        | ID<tokenIndex=1253> PUNTO<tokenIndex=1255> COUNT<tokenIndex=1257>  { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) } 
        | ID<tokenIndex=1263> PUNTO<tokenIndex=1265> ISEMPTY<tokenIndex=1267> { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) } 
        | NUMBER<tokenIndex=1273>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=1279>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=1285> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=1291> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 22)}?<p=22> op=(MUL<tokenIndex=1032>|DIV<tokenIndex=1034>|MODULO<tokenIndex=1036>) right=expr<tokenIndex=1041,p=23> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 21)}?<p=21> op=(ADD<tokenIndex=1054>|SUB<tokenIndex=1056>) right=expr<tokenIndex=1061,p=22> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 20)}?<p=20> op=(MAY_IG<tokenIndex=1074>|MAYOR<tokenIndex=1076>) right=expr<tokenIndex=1081,p=21> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 19)}?<p=19> op=(MEN_IG<tokenIndex=1094>|MENOR<tokenIndex=1096>) right=expr<tokenIndex=1101,p=20> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 18)}?<p=18> op=(IG_IG<tokenIndex=1114>|DIF<tokenIndex=1116>) right=expr<tokenIndex=1121,p=19> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 17)}?<p=17> op=AND<tokenIndex=1133> right=expr<tokenIndex=1137,p=18> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 16)}?<p=16> op=OR<tokenIndex=1149> right=expr<tokenIndex=1153,p=17> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-09-07 21:18:45:905 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (= op (SUB (ELEMENT_OPTIONS (= tokenIndex 1015)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1019) (= p 23)))) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) }) (ALT (= op (NOT (ELEMENT_OPTIONS (= tokenIndex 1161)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1165) (= p 15)))) { $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(),$right.e , $op.text, $right.e) }) (ALT (callFunction (ELEMENT_OPTIONS (= tokenIndex 1171))) { $e = $callFunction.cf }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1177))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1179))) (listStructExp (ELEMENT_OPTIONS (= tokenIndex 1181))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1183))) { $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) }) (ALT (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1189))) (expr (ELEMENT_OPTIONS (= tokenIndex 1191))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1193))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 1201)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1207))) (listParams (ELEMENT_OPTIONS (= tokenIndex 1209))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1211))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 1217))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1219))) (expr (ELEMENT_OPTIONS (= tokenIndex 1221))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1223))) { $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) }) (ALT (STR (ELEMENT_OPTIONS (= tokenIndex 1229))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1231))) (expr (ELEMENT_OPTIONS (= tokenIndex 1233))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1235))) { $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) }) (ALT (FLOAT (ELEMENT_OPTIONS (= tokenIndex 1241))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 1243))) (expr (ELEMENT_OPTIONS (= tokenIndex 1245))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 1247))) { $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1253))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1255))) (COUNT (ELEMENT_OPTIONS (= tokenIndex 1257))) { $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) }) (ALT (ID (ELEMENT_OPTIONS (= tokenIndex 1263))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1265))) (ISEMPTY (ELEMENT_OPTIONS (= tokenIndex 1267))) { $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 1273))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 1279))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 1285))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 1291))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 22)}? (ELEMENT_OPTIONS (= p 22))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 1032))) (DIV (ELEMENT_OPTIONS (= tokenIndex 1034))) (MODULO (ELEMENT_OPTIONS (= tokenIndex 1036))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1041) (= p 23)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 21)}? (ELEMENT_OPTIONS (= p 21))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 1054))) (SUB (ELEMENT_OPTIONS (= tokenIndex 1056))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1061) (= p 22)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 20)}? (ELEMENT_OPTIONS (= p 20))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 1074))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 1076))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1081) (= p 21)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 19)}? (ELEMENT_OPTIONS (= p 19))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 1094))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 1096))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1101) (= p 20)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 18)}? (ELEMENT_OPTIONS (= p 18))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 1114))) (DIF (ELEMENT_OPTIONS (= tokenIndex 1116))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1121) (= p 19)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 17)}? (ELEMENT_OPTIONS (= p 17))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 1133)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1137) (= p 18)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 16)}? (ELEMENT_OPTIONS (= p 16))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 1149)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 1153) (= p 17)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-09-07 21:18:45:907 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1316> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=1308> expr<tokenIndex=1310> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-09-07 21:18:45:912 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1316))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1308))) (expr (ELEMENT_OPTIONS (= tokenIndex 1310))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-09-07 21:18:45:913 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=1359> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> CORIZQ<tokenIndex=1335> expr<tokenIndex=1337> CORDER<tokenIndex=1339> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> PUNTO<tokenIndex=1351> ID<tokenIndex=1353> { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }
        )*
    ;
2023-09-07 21:18:45:918 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1359))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 1335))) (expr (ELEMENT_OPTIONS (= tokenIndex 1337))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 1339))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (PUNTO (ELEMENT_OPTIONS (= tokenIndex 1351))) (ID (ELEMENT_OPTIONS (= tokenIndex 1353))) { $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  }))))))
2023-09-07 21:18:45:919 left-recursion LogManager.java:25 listParamsCall returns [[]interface{} l]
    :   ( {} expr<tokenIndex=1422>  {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1414> expr<tokenIndex=1416> {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }
        )*
    ;
2023-09-07 21:18:45:923 grammar LogManager.java:25 added: (RULE listParamsCall (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 1422))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1414))) (expr (ELEMENT_OPTIONS (= tokenIndex 1416))) {
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          }))))))
2023-09-07 21:18:45:924 left-recursion LogManager.java:25 listStructExp returns [[]interface{} l]
    :   ( {} ID<tokenIndex=1455> D_PTS<tokenIndex=1457> expr<tokenIndex=1459>{
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                } 
        | {
        $l = []interface{}{}
    } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 3)}?<p=3> COMA<tokenIndex=1443> ID<tokenIndex=1445> D_PTS<tokenIndex=1447> expr<tokenIndex=1449> {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }
        )*
    ;
2023-09-07 21:18:45:928 grammar LogManager.java:25 added: (RULE listStructExp (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 1455))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1457))) (expr (ELEMENT_OPTIONS (= tokenIndex 1459))) {
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                }) (ALT {
        $l = []interface{}{}
    })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 3)}? (ELEMENT_OPTIONS (= p 3))) (COMA (ELEMENT_OPTIONS (= tokenIndex 1443))) (ID (ELEMENT_OPTIONS (= tokenIndex 1445))) (D_PTS (ELEMENT_OPTIONS (= tokenIndex 1447))) (expr (ELEMENT_OPTIONS (= tokenIndex 1449))) {
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  }))))))
2023-09-07 21:18:45:996 grammar LogManager.java:25 import INT=1
2023-09-07 21:18:45:996 grammar LogManager.java:25 import FLOAT=2
2023-09-07 21:18:45:996 grammar LogManager.java:25 import BOOL=3
2023-09-07 21:18:45:996 grammar LogManager.java:25 import STR=4
2023-09-07 21:18:45:996 grammar LogManager.java:25 import TRU=5
2023-09-07 21:18:45:996 grammar LogManager.java:25 import FAL=6
2023-09-07 21:18:45:996 grammar LogManager.java:25 import PRINT=7
2023-09-07 21:18:45:996 grammar LogManager.java:25 import IF=8
2023-09-07 21:18:45:996 grammar LogManager.java:25 import ELSE=9
2023-09-07 21:18:45:998 grammar LogManager.java:25 import WHILE=10
2023-09-07 21:18:45:998 grammar LogManager.java:25 import FOR=11
2023-09-07 21:18:45:998 grammar LogManager.java:25 import SWITCH=12
2023-09-07 21:18:45:998 grammar LogManager.java:25 import CASE=13
2023-09-07 21:18:45:998 grammar LogManager.java:25 import DEFAULT=14
2023-09-07 21:18:45:998 grammar LogManager.java:25 import IN=15
2023-09-07 21:18:45:999 grammar LogManager.java:25 import VAR=16
2023-09-07 21:18:45:999 grammar LogManager.java:25 import LET=17
2023-09-07 21:18:45:999 grammar LogManager.java:25 import BREAK=18
2023-09-07 21:18:46:000 grammar LogManager.java:25 import CONTINUE=19
2023-09-07 21:18:46:000 grammar LogManager.java:25 import RETURN=20
2023-09-07 21:18:46:001 grammar LogManager.java:25 import GUARD=21
2023-09-07 21:18:46:001 grammar LogManager.java:25 import APPEND=22
2023-09-07 21:18:46:002 grammar LogManager.java:25 import REMOVELAST=23
2023-09-07 21:18:46:003 grammar LogManager.java:25 import REMOVE=24
2023-09-07 21:18:46:003 grammar LogManager.java:25 import COUNT=25
2023-09-07 21:18:46:003 grammar LogManager.java:25 import ISEMPTY=26
2023-09-07 21:18:46:003 grammar LogManager.java:25 import AT=27
2023-09-07 21:18:46:003 grammar LogManager.java:25 import FUNC=28
2023-09-07 21:18:46:003 grammar LogManager.java:25 import STRUCT=29
2023-09-07 21:18:46:003 grammar LogManager.java:25 import NUMBER=30
2023-09-07 21:18:46:003 grammar LogManager.java:25 import STRING=31
2023-09-07 21:18:46:003 grammar LogManager.java:25 import ID=32
2023-09-07 21:18:46:007 grammar LogManager.java:25 import DIF=33
2023-09-07 21:18:46:007 grammar LogManager.java:25 import IG_IG=34
2023-09-07 21:18:46:007 grammar LogManager.java:25 import NOT=35
2023-09-07 21:18:46:007 grammar LogManager.java:25 import OR=36
2023-09-07 21:18:46:007 grammar LogManager.java:25 import AND=37
2023-09-07 21:18:46:007 grammar LogManager.java:25 import IG=38
2023-09-07 21:18:46:007 grammar LogManager.java:25 import MAY_IG=39
2023-09-07 21:18:46:008 grammar LogManager.java:25 import MEN_IG=40
2023-09-07 21:18:46:008 grammar LogManager.java:25 import MAYOR=41
2023-09-07 21:18:46:008 grammar LogManager.java:25 import MENOR=42
2023-09-07 21:18:46:008 grammar LogManager.java:25 import MUL=43
2023-09-07 21:18:46:008 grammar LogManager.java:25 import DIV=44
2023-09-07 21:18:46:008 grammar LogManager.java:25 import ADD=45
2023-09-07 21:18:46:008 grammar LogManager.java:25 import SUB=46
2023-09-07 21:18:46:008 grammar LogManager.java:25 import PARIZQ=47
2023-09-07 21:18:46:012 grammar LogManager.java:25 import PARDER=48
2023-09-07 21:18:46:012 grammar LogManager.java:25 import LLAVEIZQ=49
2023-09-07 21:18:46:012 grammar LogManager.java:25 import LLAVEDER=50
2023-09-07 21:18:46:012 grammar LogManager.java:25 import D_PTS=51
2023-09-07 21:18:46:012 grammar LogManager.java:25 import CORIZQ=52
2023-09-07 21:18:46:013 grammar LogManager.java:25 import CORDER=53
2023-09-07 21:18:46:013 grammar LogManager.java:25 import COMA=54
2023-09-07 21:18:46:013 grammar LogManager.java:25 import ARROW1=55
2023-09-07 21:18:46:014 grammar LogManager.java:25 import PUNTO=56
2023-09-07 21:18:46:014 grammar LogManager.java:25 import MODULO=57
2023-09-07 21:18:46:014 grammar LogManager.java:25 import GUIONB=58
2023-09-07 21:18:46:015 grammar LogManager.java:25 import WHITESPACE=59
2023-09-07 21:18:46:015 grammar LogManager.java:25 import COMMENT=60
2023-09-07 21:18:46:015 grammar LogManager.java:25 import LINE_COMMENT=61
2023-09-07 21:18:46:017 grammar LogManager.java:25 import 'Int'=1
2023-09-07 21:18:46:017 grammar LogManager.java:25 import 'Float'=2
2023-09-07 21:18:46:018 grammar LogManager.java:25 import 'Bool'=3
2023-09-07 21:18:46:018 grammar LogManager.java:25 import 'String'=4
2023-09-07 21:18:46:019 grammar LogManager.java:25 import 'true'=5
2023-09-07 21:18:46:019 grammar LogManager.java:25 import 'false'=6
2023-09-07 21:18:46:019 grammar LogManager.java:25 import 'print'=7
2023-09-07 21:18:46:019 grammar LogManager.java:25 import 'if'=8
2023-09-07 21:18:46:020 grammar LogManager.java:25 import 'else'=9
2023-09-07 21:18:46:020 grammar LogManager.java:25 import 'while'=10
2023-09-07 21:18:46:020 grammar LogManager.java:25 import 'for'=11
2023-09-07 21:18:46:020 grammar LogManager.java:25 import 'switch'=12
2023-09-07 21:18:46:020 grammar LogManager.java:25 import 'case'=13
2023-09-07 21:18:46:021 grammar LogManager.java:25 import 'default'=14
2023-09-07 21:18:46:021 grammar LogManager.java:25 import 'in'=15
2023-09-07 21:18:46:021 grammar LogManager.java:25 import 'var'=16
2023-09-07 21:18:46:021 grammar LogManager.java:25 import 'let'=17
2023-09-07 21:18:46:021 grammar LogManager.java:25 import 'break'=18
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'continue'=19
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'return'=20
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'guard'=21
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'append'=22
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'removeLast'=23
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'remove'=24
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'count'=25
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'isEmpty'=26
2023-09-07 21:18:46:022 grammar LogManager.java:25 import 'at'=27
2023-09-07 21:18:46:023 grammar LogManager.java:25 import 'func'=28
2023-09-07 21:18:46:023 grammar LogManager.java:25 import 'struct'=29
2023-09-07 21:18:46:023 grammar LogManager.java:25 import '!='=33
2023-09-07 21:18:46:023 grammar LogManager.java:25 import '=='=34
2023-09-07 21:18:46:023 grammar LogManager.java:25 import '!'=35
2023-09-07 21:18:46:023 grammar LogManager.java:25 import '||'=36
2023-09-07 21:18:46:023 grammar LogManager.java:25 import '&&'=37
2023-09-07 21:18:46:023 grammar LogManager.java:25 import '='=38
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '>='=39
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '<='=40
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '>'=41
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '<'=42
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '*'=43
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '/'=44
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '+'=45
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '-'=46
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '('=47
2023-09-07 21:18:46:024 grammar LogManager.java:25 import ')'=48
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '{'=49
2023-09-07 21:18:46:024 grammar LogManager.java:25 import '}'=50
2023-09-07 21:18:46:025 grammar LogManager.java:25 import ':'=51
2023-09-07 21:18:46:025 grammar LogManager.java:25 import '['=52
2023-09-07 21:18:46:025 grammar LogManager.java:25 import ']'=53
2023-09-07 21:18:46:025 grammar LogManager.java:25 import ','=54
2023-09-07 21:18:46:025 grammar LogManager.java:25 import '->'=55
2023-09-07 21:18:46:025 grammar LogManager.java:25 import '.'=56
2023-09-07 21:18:46:025 grammar LogManager.java:25 import '%'=57
2023-09-07 21:18:46:025 grammar LogManager.java:25 import '_'=58
2023-09-07 21:18:46:026 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-09-07 21:18:46:028 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, LET=17, BREAK=18, CONTINUE=19, RETURN=20, GUARD=21, APPEND=22, REMOVELAST=23, REMOVE=24, COUNT=25, ISEMPTY=26, AT=27, FUNC=28, STRUCT=29, NUMBER=30, STRING=31, ID=32, DIF=33, IG_IG=34, NOT=35, OR=36, AND=37, IG=38, MAY_IG=39, MEN_IG=40, MAYOR=41, MENOR=42, MUL=43, DIV=44, ADD=45, SUB=46, PARIZQ=47, PARDER=48, LLAVEIZQ=49, LLAVEDER=50, D_PTS=51, CORIZQ=52, CORDER=53, COMA=54, ARROW1=55, PUNTO=56, MODULO=57, GUIONB=58, WHITESPACE=59, COMMENT=60, LINE_COMMENT=61}
2023-09-07 21:18:46:029 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'let'=17, 'break'=18, 'continue'=19, 'return'=20, 'guard'=21, 'append'=22, 'removeLast'=23, 'remove'=24, 'count'=25, 'isEmpty'=26, 'at'=27, 'func'=28, 'struct'=29, '!='=33, '=='=34, '!'=35, '||'=36, '&&'=37, '='=38, '>='=39, '<='=40, '>'=41, '<'=42, '*'=43, '/'=44, '+'=45, '-'=46, '('=47, ')'=48, '{'=49, '}'=50, ':'=51, '['=52, ']'=53, ','=54, '->'=55, '.'=56, '%'=57, '_'=58}
2023-09-07 21:18:46:194 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-09-07 21:18:46:196 LL1 LogManager.java:25 look=[{7..8, 10..12, 16..21, 28..29, 32}, null]
2023-09-07 21:18:46:197 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:197 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-09-07 21:18:46:198 LL1 LogManager.java:25 look=[7, 8, {16..17}, 32, 10, 11, 12, 18, 19, 21, 32, 32, 32, 28, 32, 29, 20]
2023-09-07 21:18:46:198 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:198 LL1 LogManager.java:25 
DECISION 2 in rule function
2023-09-07 21:18:46:199 LL1 LogManager.java:25 look=[28, 28]
2023-09-07 21:18:46:199 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:199 LL1 LogManager.java:25 
DECISION 3 in rule listParamsFunc
2023-09-07 21:18:46:199 LL1 LogManager.java:25 look=[32, null]
2023-09-07 21:18:46:199 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:199 LL1 LogManager.java:25 
DECISION 4 in rule listParamsFunc
2023-09-07 21:18:46:199 LL1 LogManager.java:25 look=[null, 48]
2023-09-07 21:18:46:199 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:199 LL1 LogManager.java:25 
DECISION 5 in rule listStructDec
2023-09-07 21:18:46:200 LL1 LogManager.java:25 look=[16, null]
2023-09-07 21:18:46:200 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:200 LL1 LogManager.java:25 
DECISION 6 in rule listStructDec
2023-09-07 21:18:46:200 LL1 LogManager.java:25 look=[null, 50]
2023-09-07 21:18:46:200 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:200 LL1 LogManager.java:25 
DECISION 7 in rule printstmt
2023-09-07 21:18:46:200 LL1 LogManager.java:25 look=[7, 7]
2023-09-07 21:18:46:200 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:200 LL1 LogManager.java:25 
DECISION 8 in rule forstmt
2023-09-07 21:18:46:200 LL1 LogManager.java:25 look=[11, 11, 11]
2023-09-07 21:18:46:200 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:200 LL1 LogManager.java:25 
DECISION 9 in rule caselist
2023-09-07 21:18:46:200 LL1 LogManager.java:25 look=[null, 14]
2023-09-07 21:18:46:200 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:201 LL1 LogManager.java:25 
DECISION 10 in rule ifstmt
2023-09-07 21:18:46:201 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-09-07 21:18:46:202 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:202 LL1 LogManager.java:25 
DECISION 11 in rule elseiflist
2023-09-07 21:18:46:207 LL1 LogManager.java:25 look=[null, null]
2023-09-07 21:18:46:207 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:207 LL1 LogManager.java:25 
DECISION 12 in rule declarationstmt
2023-09-07 21:18:46:207 LL1 LogManager.java:25 look=[16, 16, 17, 17, 16, 17]
2023-09-07 21:18:46:207 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:207 LL1 LogManager.java:25 
DECISION 13 in rule asignacion
2023-09-07 21:18:46:207 LL1 LogManager.java:25 look=[32, 32]
2023-09-07 21:18:46:207 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:207 LL1 LogManager.java:25 
DECISION 14 in rule types
2023-09-07 21:18:46:208 LL1 LogManager.java:25 look=[1, 2, 4, 3, 52, 52, 32]
2023-09-07 21:18:46:208 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:208 LL1 LogManager.java:25 
DECISION 15 in rule expr
2023-09-07 21:18:46:208 LL1 LogManager.java:25 look=[46, 35, 32, 32, 47, 32, 52, 1, 4, 2, 32, 32, 30, 31, 5, 6]
2023-09-07 21:18:46:208 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:208 LL1 LogManager.java:25 
DECISION 16 in rule expr
2023-09-07 21:18:46:208 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-09-07 21:18:46:208 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:208 LL1 LogManager.java:25 
DECISION 17 in rule expr
2023-09-07 21:18:46:231 LL1 LogManager.java:25 look=[null, null]
2023-09-07 21:18:46:231 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:231 LL1 LogManager.java:25 
DECISION 18 in rule listParams
2023-09-07 21:18:46:231 LL1 LogManager.java:25 look=[null, {48, 53}]
2023-09-07 21:18:46:231 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:231 LL1 LogManager.java:25 
DECISION 19 in rule listArray
2023-09-07 21:18:46:231 LL1 LogManager.java:25 look=[null, null]
2023-09-07 21:18:46:231 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:231 LL1 LogManager.java:25 
DECISION 20 in rule listArray
2023-09-07 21:18:46:236 LL1 LogManager.java:25 look=[null, null]
2023-09-07 21:18:46:236 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:236 LL1 LogManager.java:25 
DECISION 21 in rule listParamsCall
2023-09-07 21:18:46:236 LL1 LogManager.java:25 look=[{1..2, 4..6, 30..32, 35, 46..47, 52}, null]
2023-09-07 21:18:46:236 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:236 LL1 LogManager.java:25 
DECISION 22 in rule listParamsCall
2023-09-07 21:18:46:236 LL1 LogManager.java:25 look=[null, 48]
2023-09-07 21:18:46:236 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:236 LL1 LogManager.java:25 
DECISION 23 in rule listStructExp
2023-09-07 21:18:46:236 LL1 LogManager.java:25 look=[32, null]
2023-09-07 21:18:46:236 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:236 LL1 LogManager.java:25 
DECISION 24 in rule listStructExp
2023-09-07 21:18:46:236 LL1 LogManager.java:25 look=[null, 48]
2023-09-07 21:18:46:236 LL1 LogManager.java:25 LL(1)? false
2023-09-07 21:18:46:256 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 21:18:46:300 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-09-07 21:18:46:301 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-09-07 21:18:46:301 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-09-07 21:18:46:306 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-09-07 21:18:46:306 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-09-07 21:18:46:314 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-09-07 21:18:46:314 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,34:13]
2023-09-07 21:18:46:314 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,34:27]
2023-09-07 21:18:46:322 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-09-07 21:18:46:323 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:15]
2023-09-07 21:18:46:323 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,40:23].[@-1,20:23='prnt',<0>,40:33]
2023-09-07 21:18:46:324 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-09-07 21:18:46:324 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:11]
2023-09-07 21:18:46:331 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,41:19].[@-1,17:22='ifinst',<0>,41:26]
2023-09-07 21:18:46:334 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-09-07 21:18:46:334 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:20]
2023-09-07 21:18:46:335 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,42:28].[@-1,26:28='dec',<0>,42:44]
2023-09-07 21:18:46:335 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-09-07 21:18:46:335 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:15]
2023-09-07 21:18:46:336 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,43:23].[@-1,21:25='asign',<0>,43:34]
2023-09-07 21:18:46:337 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-09-07 21:18:46:338 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:14]
2023-09-07 21:18:46:338 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,44:22].[@-1,20:25='whiles',<0>,44:32]
2023-09-07 21:18:46:338 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-09-07 21:18:46:339 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:12]
2023-09-07 21:18:46:339 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,45:20].[@-1,18:21='fors',<0>,45:28]
2023-09-07 21:18:46:339 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-09-07 21:18:46:340 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:14]
2023-09-07 21:18:46:340 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,46:22].[@-1,20:24='swtch',<0>,46:32]
2023-09-07 21:18:46:341 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-09-07 21:18:46:343 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:13]
2023-09-07 21:18:46:343 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,47:21].[@-1,19:23='break',<0>,47:30]
2023-09-07 21:18:46:343 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-09-07 21:18:46:343 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:15]
2023-09-07 21:18:46:343 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,48:23].[@-1,22:29='continue',<0>,48:35]
2023-09-07 21:18:46:343 action-translator LogManager.java:25 translate  $inst = $guardtmt.guard 
2023-09-07 21:18:46:345 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,49:13]
2023-09-07 21:18:46:345 action-translator LogManager.java:25 qattr [@-1,10:17='guardtmt',<0>,49:21].[@-1,19:23='guard',<0>,49:30]
2023-09-07 21:18:46:345 action-translator LogManager.java:25 translate  $inst = $appendtmt.append
2023-09-07 21:18:46:345 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,50:14]
2023-09-07 21:18:46:347 action-translator LogManager.java:25 qattr [@-1,10:18='appendtmt',<0>,50:22].[@-1,20:25='append',<0>,50:32]
2023-09-07 21:18:46:348 action-translator LogManager.java:25 translate  $inst = $removelastmt.removelast 
2023-09-07 21:18:46:348 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,51:17]
2023-09-07 21:18:46:351 action-translator LogManager.java:25 qattr [@-1,10:21='removelastmt',<0>,51:25].[@-1,23:32='removelast',<0>,51:38]
2023-09-07 21:18:46:352 action-translator LogManager.java:25 translate  $inst = $removetmt.remove 
2023-09-07 21:18:46:352 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,52:14]
2023-09-07 21:18:46:352 action-translator LogManager.java:25 qattr [@-1,10:18='removetmt',<0>,52:22].[@-1,20:25='remove',<0>,52:32]
2023-09-07 21:18:46:353 action-translator LogManager.java:25 translate  $inst = $function.fun 
2023-09-07 21:18:46:353 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,53:13]
2023-09-07 21:18:46:354 action-translator LogManager.java:25 qattr [@-1,10:17='function',<0>,53:21].[@-1,19:21='fun',<0>,53:30]
2023-09-07 21:18:46:354 action-translator LogManager.java:25 translate  $inst = $callFunctionInst.cfi 
2023-09-07 21:18:46:355 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,54:21]
2023-09-07 21:18:46:355 action-translator LogManager.java:25 qattr [@-1,10:25='callFunctionInst',<0>,54:29].[@-1,27:29='cfi',<0>,54:46]
2023-09-07 21:18:46:355 action-translator LogManager.java:25 translate  $inst = $structCreation.dec 
2023-09-07 21:18:46:356 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,55:19]
2023-09-07 21:18:46:356 action-translator LogManager.java:25 qattr [@-1,10:23='structCreation',<0>,55:27].[@-1,25:27='dec',<0>,55:42]
2023-09-07 21:18:46:356 action-translator LogManager.java:25 translate  $inst = $returntmt.ret 
2023-09-07 21:18:46:356 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,56:14]
2023-09-07 21:18:46:357 action-translator LogManager.java:25 qattr [@-1,10:18='returntmt',<0>,56:22].[@-1,20:22='ret',<0>,56:32]
2023-09-07 21:18:46:364 action-translator LogManager.java:25 translate   $ret = instructions.NewReturn($RETURN.line, $RETURN.pos, $expr.e)  
2023-09-07 21:18:46:364 action-translator LogManager.java:25 attr [@-1,3:5='ret',<0>,60:17]
2023-09-07 21:18:46:364 action-translator LogManager.java:25 qattr [@-1,33:38='RETURN',<0>,60:47].[@-1,40:43='line',<0>,60:54]
2023-09-07 21:18:46:369 action-translator LogManager.java:25 qattr [@-1,47:52='RETURN',<0>,60:61].[@-1,54:56='pos',<0>,60:68]
2023-09-07 21:18:46:372 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,60:74].[@-1,65:65='e',<0>,60:79]
2023-09-07 21:18:46:382 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, environment.NULL, $block.blk)

2023-09-07 21:18:46:383 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,68:5]
2023-09-07 21:18:46:383 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,68:37].[@-1,43:46='line',<0>,68:42]
2023-09-07 21:18:46:384 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,68:49].[@-1,55:57='pos',<0>,68:54]
2023-09-07 21:18:46:385 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,68:60].[@-1,64:67='text',<0>,68:63]
2023-09-07 21:18:46:386 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,68:70].[@-1,86:88='lpf',<0>,68:85]
2023-09-07 21:18:46:387 action-translator LogManager.java:25 qattr [@-1,110:114='block',<0>,68:109].[@-1,116:118='blk',<0>,68:115]
2023-09-07 21:18:46:390 action-translator LogManager.java:25 translate 
    $fun = instructions.NewFunction($FUNC.line, $FUNC.pos, $ID.text, $listParamsFunc.lpf, $types.ty, $block.blk)

2023-09-07 21:18:46:390 action-translator LogManager.java:25 attr [@-1,6:8='fun',<0>,72:5]
2023-09-07 21:18:46:392 action-translator LogManager.java:25 qattr [@-1,38:41='FUNC',<0>,72:37].[@-1,43:46='line',<0>,72:42]
2023-09-07 21:18:46:392 action-translator LogManager.java:25 qattr [@-1,50:53='FUNC',<0>,72:49].[@-1,55:57='pos',<0>,72:54]
2023-09-07 21:18:46:393 action-translator LogManager.java:25 qattr [@-1,61:62='ID',<0>,72:60].[@-1,64:67='text',<0>,72:63]
2023-09-07 21:18:46:393 action-translator LogManager.java:25 qattr [@-1,71:84='listParamsFunc',<0>,72:70].[@-1,86:88='lpf',<0>,72:85]
2023-09-07 21:18:46:393 action-translator LogManager.java:25 qattr [@-1,92:96='types',<0>,72:91].[@-1,98:99='ty',<0>,72:97]
2023-09-07 21:18:46:394 action-translator LogManager.java:25 qattr [@-1,103:107='block',<0>,72:102].[@-1,109:111='blk',<0>,72:108]
2023-09-07 21:18:46:396 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:399 action-translator LogManager.java:25 translate 
    $lpf = []interface{}{}
    newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
    $lpf = append($lpf, newParam)
    
2023-09-07 21:18:46:400 action-translator LogManager.java:25 attr [@-1,7:9='lpf',<0>,3:5]
2023-09-07 21:18:46:400 action-translator LogManager.java:25 qattr [@-1,81:82='ID',<0>,4:51].[@-1,84:87='line',<0>,4:54]
2023-09-07 21:18:46:400 action-translator LogManager.java:25 qattr [@-1,91:92='ID',<0>,4:61].[@-1,94:96='pos',<0>,4:64]
2023-09-07 21:18:46:400 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,4:70].[@-1,103:106='text',<0>,4:73]
2023-09-07 21:18:46:402 action-translator LogManager.java:25 qattr [@-1,110:114='types',<0>,4:80].[@-1,116:117='ty',<0>,4:86]
2023-09-07 21:18:46:403 action-translator LogManager.java:25 attr [@-1,126:128='lpf',<0>,5:5]
2023-09-07 21:18:46:404 action-translator LogManager.java:25 attr [@-1,140:142='lpf',<0>,5:19]
2023-09-07 21:18:46:405 action-translator LogManager.java:25 translate  $lpf = []interface{}{} 
2023-09-07 21:18:46:405 action-translator LogManager.java:25 attr [@-1,2:4='lpf',<0>,7:12]
2023-09-07 21:18:46:406 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:406 action-translator LogManager.java:25 translate 
              var arr []interface{}
              newParam := instructions.NewParamsDeclaration($ID.line, $ID.pos, $ID.text, $types.ty)
              arr = append($list.lpf, newParam)
              $lpf = arr
              
2023-09-07 21:18:46:406 action-translator LogManager.java:25 qattr [@-1,100:101='ID',<0>,12:61].[@-1,103:106='line',<0>,12:64]
2023-09-07 21:18:46:407 action-translator LogManager.java:25 qattr [@-1,110:111='ID',<0>,12:71].[@-1,113:115='pos',<0>,12:74]
2023-09-07 21:18:46:407 action-translator LogManager.java:25 qattr [@-1,119:120='ID',<0>,12:80].[@-1,122:125='text',<0>,12:83]
2023-09-07 21:18:46:407 action-translator LogManager.java:25 qattr [@-1,129:133='types',<0>,12:90].[@-1,135:136='ty',<0>,12:96]
2023-09-07 21:18:46:407 action-translator LogManager.java:25 qattr [@-1,168:171='list',<0>,13:28].[@-1,173:175='lpf',<0>,13:33]
2023-09-07 21:18:46:408 action-translator LogManager.java:25 attr [@-1,204:206='lpf',<0>,14:15]
2023-09-07 21:18:46:411 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:412 action-translator LogManager.java:25 translate  $dec = instructions.NewStruct($STRUCT.line, $STRUCT.pos, $ID.text, $listStructDec.l) 
2023-09-07 21:18:46:412 action-translator LogManager.java:25 attr [@-1,2:4='dec',<0>,92:46]
2023-09-07 21:18:46:413 action-translator LogManager.java:25 qattr [@-1,32:37='STRUCT',<0>,92:76].[@-1,39:42='line',<0>,92:83]
2023-09-07 21:18:46:413 action-translator LogManager.java:25 qattr [@-1,46:51='STRUCT',<0>,92:90].[@-1,53:55='pos',<0>,92:97]
2023-09-07 21:18:46:413 action-translator LogManager.java:25 qattr [@-1,59:60='ID',<0>,92:103].[@-1,62:65='text',<0>,92:106]
2023-09-07 21:18:46:413 action-translator LogManager.java:25 qattr [@-1,69:81='listStructDec',<0>,92:113].[@-1,83:83='l',<0>,92:127]
2023-09-07 21:18:46:415 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:416 action-translator LogManager.java:25 translate 
                        var arr []interface{}
                        newParams := environment.NewStructType($ID.text, $types.ty)
                        arr = append(arr, newParams)
                        $l = arr
                    
2023-09-07 21:18:46:416 action-translator LogManager.java:25 qattr [@-1,113:114='ID',<0>,4:64].[@-1,116:119='text',<0>,4:67]
2023-09-07 21:18:46:417 action-translator LogManager.java:25 qattr [@-1,123:127='types',<0>,4:74].[@-1,129:130='ty',<0>,4:80]
2023-09-07 21:18:46:417 action-translator LogManager.java:25 attr [@-1,213:213='l',<0>,6:25]
2023-09-07 21:18:46:417 action-translator LogManager.java:25 translate  $l = []interface{}{} 
2023-09-07 21:18:46:417 action-translator LogManager.java:25 attr [@-1,2:2='l',<0>,8:12]
2023-09-07 21:18:46:417 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:417 action-translator LogManager.java:25 translate 
                                                          var arr []interface{}
                                                          newParams := environment.NewStructType($ID.text, $types.ty)
                                                          arr = append($list.l, newParams)
                                                          $l = arr
                                                      
2023-09-07 21:18:46:422 action-translator LogManager.java:25 qattr [@-1,181:182='ID',<0>,13:98].[@-1,184:187='text',<0>,13:101]
2023-09-07 21:18:46:422 action-translator LogManager.java:25 qattr [@-1,191:195='types',<0>,13:108].[@-1,197:198='ty',<0>,13:114]
2023-09-07 21:18:46:422 action-translator LogManager.java:25 qattr [@-1,274:277='list',<0>,14:72].[@-1,279:279='l',<0>,14:77]
2023-09-07 21:18:46:422 action-translator LogManager.java:25 attr [@-1,353:353='l',<0>,15:59]
2023-09-07 21:18:46:422 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:430 action-translator LogManager.java:25 translate  $remove = instructions.NewRemove($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-07 21:18:46:430 action-translator LogManager.java:25 attr [@-1,2:7='remove',<0>,112:49]
2023-09-07 21:18:46:431 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,112:82].[@-1,38:41='line',<0>,112:85]
2023-09-07 21:18:46:431 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,112:92].[@-1,48:50='pos',<0>,112:95]
2023-09-07 21:18:46:432 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,112:101].[@-1,57:60='text',<0>,112:104]
2023-09-07 21:18:46:432 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,112:111].[@-1,69:69='e',<0>,112:116]
2023-09-07 21:18:46:434 action-translator LogManager.java:25 translate  $removelast = instructions.NewRemoveLast($ID.line, $ID.pos, $ID.text) 
2023-09-07 21:18:46:434 action-translator LogManager.java:25 attr [@-1,2:11='removelast',<0>,116:39]
2023-09-07 21:18:46:434 action-translator LogManager.java:25 qattr [@-1,43:44='ID',<0>,116:80].[@-1,46:49='line',<0>,116:83]
2023-09-07 21:18:46:435 action-translator LogManager.java:25 qattr [@-1,53:54='ID',<0>,116:90].[@-1,56:58='pos',<0>,116:93]
2023-09-07 21:18:46:435 action-translator LogManager.java:25 qattr [@-1,62:63='ID',<0>,116:99].[@-1,65:68='text',<0>,116:102]
2023-09-07 21:18:46:437 action-translator LogManager.java:25 translate  $append = instructions.NewAppend($ID.line, $ID.pos, $ID.text, $expr.e) 
2023-09-07 21:18:46:437 action-translator LogManager.java:25 attr [@-1,2:7='append',<0>,120:38]
2023-09-07 21:18:46:437 action-translator LogManager.java:25 qattr [@-1,35:36='ID',<0>,120:71].[@-1,38:41='line',<0>,120:74]
2023-09-07 21:18:46:440 action-translator LogManager.java:25 qattr [@-1,45:46='ID',<0>,120:81].[@-1,48:50='pos',<0>,120:84]
2023-09-07 21:18:46:440 action-translator LogManager.java:25 qattr [@-1,54:55='ID',<0>,120:90].[@-1,57:60='text',<0>,120:93]
2023-09-07 21:18:46:440 action-translator LogManager.java:25 qattr [@-1,64:67='expr',<0>,120:100].[@-1,69:69='e',<0>,120:105]
2023-09-07 21:18:46:443 action-translator LogManager.java:25 translate $guard = instructions.NewGuard( $GUARD.line, $GUARD.pos, $expr.e, $block.blk )
2023-09-07 21:18:46:443 action-translator LogManager.java:25 attr [@-1,1:5='guard',<0>,124:43]
2023-09-07 21:18:46:444 action-translator LogManager.java:25 qattr [@-1,33:37='GUARD',<0>,124:75].[@-1,39:42='line',<0>,124:81]
2023-09-07 21:18:46:444 action-translator LogManager.java:25 qattr [@-1,46:50='GUARD',<0>,124:88].[@-1,52:54='pos',<0>,124:94]
2023-09-07 21:18:46:444 action-translator LogManager.java:25 qattr [@-1,58:61='expr',<0>,124:100].[@-1,63:63='e',<0>,124:105]
2023-09-07 21:18:46:445 action-translator LogManager.java:25 qattr [@-1,67:71='block',<0>,124:109].[@-1,73:75='blk',<0>,124:115]
2023-09-07 21:18:46:445 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-09-07 21:18:46:446 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,128:10]
2023-09-07 21:18:46:446 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,128:41].[@-1,39:42='line',<0>,128:47]
2023-09-07 21:18:46:446 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,128:54].[@-1,52:54='pos',<0>,128:60]
2023-09-07 21:18:46:447 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-09-07 21:18:46:447 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,132:13]
2023-09-07 21:18:46:447 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,132:50].[@-1,48:51='line',<0>,132:59]
2023-09-07 21:18:46:447 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,132:66].[@-1,64:66='pos',<0>,132:75]
2023-09-07 21:18:46:449 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e, nil)
2023-09-07 21:18:46:450 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,136:29]
2023-09-07 21:18:46:450 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,136:59].[@-1,38:41='line',<0>,136:65]
2023-09-07 21:18:46:450 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,136:71].[@-1,50:52='pos',<0>,136:77]
2023-09-07 21:18:46:450 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,136:82].[@-1,60:60='e',<0>,136:87]
2023-09-07 21:18:46:452 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr1.e, $expr2.e)
2023-09-07 21:18:46:452 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,137:51]
2023-09-07 21:18:46:452 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,137:81].[@-1,38:41='line',<0>,137:87]
2023-09-07 21:18:46:452 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,137:93].[@-1,50:52='pos',<0>,137:99]
2023-09-07 21:18:46:453 action-translator LogManager.java:25 qattr [@-1,55:59='expr1',<0>,137:104].[@-1,61:61='e',<0>,137:110]
2023-09-07 21:18:46:453 action-translator LogManager.java:25 qattr [@-1,65:69='expr2',<0>,137:114].[@-1,71:71='e',<0>,137:120]
2023-09-07 21:18:46:457 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-09-07 21:18:46:458 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,143:74]
2023-09-07 21:18:46:459 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,143:102].[@-1,34:37='line',<0>,143:106]
2023-09-07 21:18:46:460 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,143:113].[@-1,45:47='pos',<0>,143:117]
2023-09-07 21:18:46:460 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,143:123].[@-1,54:57='text',<0>,143:126]
2023-09-07 21:18:46:460 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,143:133].[@-1,64:64='e',<0>,143:136]
2023-09-07 21:18:46:460 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,143:139].[@-1,70:70='e',<0>,143:142]
2023-09-07 21:18:46:460 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,143:152].[@-1,86:88='blk',<0>,143:158]
2023-09-07 21:18:46:462 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $GUIONB.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-09-07 21:18:46:462 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,144:78]
2023-09-07 21:18:46:462 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,144:106].[@-1,34:37='line',<0>,144:110]
2023-09-07 21:18:46:463 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,144:117].[@-1,45:47='pos',<0>,144:121]
2023-09-07 21:18:46:463 action-translator LogManager.java:25 qattr [@-1,51:56='GUIONB',<0>,144:127].[@-1,58:61='text',<0>,144:134]
2023-09-07 21:18:46:463 action-translator LogManager.java:25 qattr [@-1,65:66='e1',<0>,144:141].[@-1,68:68='e',<0>,144:144]
2023-09-07 21:18:46:463 action-translator LogManager.java:25 qattr [@-1,71:72='e2',<0>,144:147].[@-1,74:74='e',<0>,144:150]
2023-09-07 21:18:46:464 action-translator LogManager.java:25 qattr [@-1,84:88='block',<0>,144:160].[@-1,90:92='blk',<0>,144:166]
2023-09-07 21:18:46:467 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-09-07 21:18:46:467 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,145:56]
2023-09-07 21:18:46:472 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,145:84].[@-1,34:37='line',<0>,145:88]
2023-09-07 21:18:46:472 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,145:95].[@-1,45:47='pos',<0>,145:99]
2023-09-07 21:18:46:473 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,145:105].[@-1,54:57='text',<0>,145:108]
2023-09-07 21:18:46:473 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,145:124].[@-1,74:77='text',<0>,145:128]
2023-09-07 21:18:46:473 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,145:135].[@-1,87:89='blk',<0>,145:141]
2023-09-07 21:18:46:475 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-09-07 21:18:46:476 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,149:64]
2023-09-07 21:18:46:477 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,149:97].[@-1,42:45='line',<0>,149:104]
2023-09-07 21:18:46:478 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,149:111].[@-1,56:58='pos',<0>,149:118]
2023-09-07 21:18:46:479 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,149:124].[@-1,67:67='e',<0>,149:129]
2023-09-07 21:18:46:479 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,149:132].[@-1,79:83='cases',<0>,149:141]
2023-09-07 21:18:46:480 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,149:149].[@-1,93:95='blk',<0>,149:155]
2023-09-07 21:18:46:482 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:483 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-09-07 21:18:46:484 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-09-07 21:18:46:484 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-09-07 21:18:46:485 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-09-07 21:18:46:485 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-09-07 21:18:46:486 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:486 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-09-07 21:18:46:487 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-09-07 21:18:46:487 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-09-07 21:18:46:487 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-09-07 21:18:46:490 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:494 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-09-07 21:18:46:495 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,164:26]
2023-09-07 21:18:46:496 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,164:57].[@-1,38:41='line',<0>,164:62]
2023-09-07 21:18:46:496 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,164:69].[@-1,50:52='pos',<0>,164:74]
2023-09-07 21:18:46:496 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,164:79].[@-1,60:60='e',<0>,164:84]
2023-09-07 21:18:46:497 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,164:88].[@-1,70:72='blk',<0>,164:94]
2023-09-07 21:18:46:503 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-09-07 21:18:46:503 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,168:36]
2023-09-07 21:18:46:503 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,168:65].[@-1,34:37='line',<0>,168:68]
2023-09-07 21:18:46:504 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,168:75].[@-1,44:46='pos',<0>,168:78]
2023-09-07 21:18:46:504 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,168:84].[@-1,55:55='e',<0>,168:89]
2023-09-07 21:18:46:504 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,168:93].[@-1,65:67='blk',<0>,168:99]
2023-09-07 21:18:46:508 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-09-07 21:18:46:508 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,169:69]
2023-09-07 21:18:46:508 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,169:98].[@-1,33:36='line',<0>,169:101]
2023-09-07 21:18:46:508 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,169:108].[@-1,43:45='pos',<0>,169:111]
2023-09-07 21:18:46:509 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,169:117].[@-1,54:54='e',<0>,169:122]
2023-09-07 21:18:46:509 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,169:126].[@-1,61:63='blk',<0>,169:129]
2023-09-07 21:18:46:509 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,169:140].[@-1,75:77='blk',<0>,169:143]
2023-09-07 21:18:46:510 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-09-07 21:18:46:511 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,170:47]
2023-09-07 21:18:46:512 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,170:76].[@-1,34:37='line',<0>,170:79]
2023-09-07 21:18:46:512 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,170:86].[@-1,44:46='pos',<0>,170:89]
2023-09-07 21:18:46:512 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,170:95].[@-1,55:55='e',<0>,170:100]
2023-09-07 21:18:46:513 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,170:104].[@-1,65:67='blk',<0>,170:110]
2023-09-07 21:18:46:513 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,170:116].[@-1,82:93='else_if_list',<0>,170:127]
2023-09-07 21:18:46:513 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-09-07 21:18:46:516 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,171:82]
2023-09-07 21:18:46:516 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,171:111].[@-1,34:37='line',<0>,171:114]
2023-09-07 21:18:46:516 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,171:121].[@-1,44:46='pos',<0>,171:124]
2023-09-07 21:18:46:517 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,171:130].[@-1,55:55='e',<0>,171:135]
2023-09-07 21:18:46:517 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,171:139].[@-1,62:64='blk',<0>,171:142]
2023-09-07 21:18:46:517 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,171:148].[@-1,79:90='else_if_list',<0>,171:159]
2023-09-07 21:18:46:517 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,171:174].[@-1,97:99='blk',<0>,171:177]
2023-09-07 21:18:46:522 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:522 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-09-07 21:18:46:522 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-09-07 21:18:46:522 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-09-07 21:18:46:522 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-09-07 21:18:46:522 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-09-07 21:18:46:522 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:522 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-09-07 21:18:46:535 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-09-07 21:18:46:536 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-09-07 21:18:46:536 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-09-07 21:18:46:536 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:543 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-09-07 21:18:46:545 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,188:41]
2023-09-07 21:18:46:545 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,188:70].[@-1,34:37='line',<0>,188:73]
2023-09-07 21:18:46:546 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,188:80].[@-1,44:46='pos',<0>,188:83]
2023-09-07 21:18:46:546 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,188:89].[@-1,55:55='e',<0>,188:94]
2023-09-07 21:18:46:546 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,188:98].[@-1,65:67='blk',<0>,188:104]
2023-09-07 21:18:46:548 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-09-07 21:18:46:548 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,193:39]
2023-09-07 21:18:46:548 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,193:71].[@-1,40:43='line',<0>,193:77]
2023-09-07 21:18:46:548 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,193:84].[@-1,53:55='pos',<0>,193:90]
2023-09-07 21:18:46:548 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,193:96].[@-1,64:64='e',<0>,193:101]
2023-09-07 21:18:46:548 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,193:105].[@-1,74:76='blk',<0>,193:111]
2023-09-07 21:18:46:553 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false);
2023-09-07 21:18:46:553 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,197:30] [@-1,6:91=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)',<0>,197:35]
2023-09-07 21:18:46:553 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e, false)
2023-09-07 21:18:46:553 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,197:59].[@-1,34:37='line',<0>,197:63]
2023-09-07 21:18:46:553 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,197:70].[@-1,45:47='pos',<0>,197:74]
2023-09-07 21:18:46:553 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,197:80].[@-1,54:57='text',<0>,197:83]
2023-09-07 21:18:46:553 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,197:90].[@-1,67:68='ty',<0>,197:96]
2023-09-07 21:18:46:553 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,197:101].[@-1,77:77='e',<0>,197:106]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false);
2023-09-07 21:18:46:558 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,198:19] [@-1,6:98=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)',<0>,198:24]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.NULL, $expr.e, false)
2023-09-07 21:18:46:558 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,198:48].[@-1,34:37='line',<0>,198:52]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,198:59].[@-1,45:47='pos',<0>,198:63]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,198:69].[@-1,54:57='text',<0>,198:72]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,198:97].[@-1,84:84='e',<0>,198:102]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true);
2023-09-07 21:18:46:558 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,199:19] [@-1,6:97=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)',<0>,199:24]
2023-09-07 21:18:46:558 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.NULL, $expr.e, true)
2023-09-07 21:18:46:561 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,199:48].[@-1,34:37='line',<0>,199:52]
2023-09-07 21:18:46:563 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,199:59].[@-1,45:47='pos',<0>,199:63]
2023-09-07 21:18:46:563 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,199:69].[@-1,54:57='text',<0>,199:72]
2023-09-07 21:18:46:563 action-translator LogManager.java:25 qattr [@-1,79:82='expr',<0>,199:97].[@-1,84:84='e',<0>,199:102]
2023-09-07 21:18:46:563 action-translator LogManager.java:25 translate $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true);
2023-09-07 21:18:46:563 action-translator LogManager.java:25 setAttr [@-1,1:3='dec',<0>,200:30] [@-1,6:90=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)',<0>,200:35]
2023-09-07 21:18:46:563 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, $types.ty, $expr.e, true)
2023-09-07 21:18:46:563 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,200:59].[@-1,34:37='line',<0>,200:63]
2023-09-07 21:18:46:563 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,200:70].[@-1,45:47='pos',<0>,200:74]
2023-09-07 21:18:46:567 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,200:80].[@-1,54:57='text',<0>,200:83]
2023-09-07 21:18:46:567 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,200:90].[@-1,67:68='ty',<0>,200:96]
2023-09-07 21:18:46:567 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,200:101].[@-1,77:77='e',<0>,200:106]
2023-09-07 21:18:46:567 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ;
2023-09-07 21:18:46:568 action-translator LogManager.java:25 setAttr [@-1,2:4='dec',<0>,201:20] [@-1,7:103=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) ',<0>,201:25]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, environment.STRUCT , $expr.e, false) 
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,201:48].[@-1,34:37='line',<0>,201:52]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,201:59].[@-1,45:47='pos',<0>,201:63]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,201:69].[@-1,54:57='text',<0>,201:72]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,82:85='expr',<0>,201:100].[@-1,87:87='e',<0>,201:105]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 translate  $dec = instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ;
2023-09-07 21:18:46:568 action-translator LogManager.java:25 setAttr [@-1,2:4='dec',<0>,202:20] [@-1,7:102=' instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) ',<0>,202:25]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 translate  instructions.NewDeclaration($LET.line, $LET.pos, $ID.text, environment.STRUCT , $expr.e, true) 
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,30:32='LET',<0>,202:48].[@-1,34:37='line',<0>,202:52]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,41:43='LET',<0>,202:59].[@-1,45:47='pos',<0>,202:63]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,202:69].[@-1,54:57='text',<0>,202:72]
2023-09-07 21:18:46:568 action-translator LogManager.java:25 qattr [@-1,82:85='expr',<0>,202:100].[@-1,87:87='e',<0>,202:105]
2023-09-07 21:18:46:572 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $IG.text) 
2023-09-07 21:18:46:572 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,208:15]
2023-09-07 21:18:46:572 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,208:51].[@-1,41:44='line',<0>,208:54]
2023-09-07 21:18:46:573 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,208:61].[@-1,51:53='pos',<0>,208:64]
2023-09-07 21:18:46:573 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,208:70].[@-1,60:63='text',<0>,208:73]
2023-09-07 21:18:46:573 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,208:80].[@-1,72:72='e',<0>,208:85]
2023-09-07 21:18:46:573 action-translator LogManager.java:25 qattr [@-1,76:77='IG',<0>,208:89].[@-1,79:82='text',<0>,208:92]
2023-09-07 21:18:46:574 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e, $ADD.text+$IG.text ) 
2023-09-07 21:18:46:574 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,209:19]
2023-09-07 21:18:46:574 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,209:55].[@-1,41:44='line',<0>,209:58]
2023-09-07 21:18:46:575 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,209:65].[@-1,51:53='pos',<0>,209:68]
2023-09-07 21:18:46:575 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,209:74].[@-1,60:63='text',<0>,209:77]
2023-09-07 21:18:46:575 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,209:84].[@-1,72:72='e',<0>,209:89]
2023-09-07 21:18:46:575 action-translator LogManager.java:25 qattr [@-1,76:78='ADD',<0>,209:93].[@-1,80:83='text',<0>,209:97]
2023-09-07 21:18:46:576 action-translator LogManager.java:25 qattr [@-1,86:87='IG',<0>,209:103].[@-1,89:92='text',<0>,209:106]
2023-09-07 21:18:46:577 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-09-07 21:18:46:578 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,215:8]
2023-09-07 21:18:46:578 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-09-07 21:18:46:578 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,216:10]
2023-09-07 21:18:46:578 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-09-07 21:18:46:579 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,217:8]
2023-09-07 21:18:46:579 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-09-07 21:18:46:579 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,218:9]
2023-09-07 21:18:46:586 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-07 21:18:46:587 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,219:24]
2023-09-07 21:18:46:587 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-09-07 21:18:46:587 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,220:19]
2023-09-07 21:18:46:587 action-translator LogManager.java:25 translate $ty =environment.STRUCT
2023-09-07 21:18:46:588 action-translator LogManager.java:25 attr [@-1,1:2='ty',<0>,221:6]
2023-09-07 21:18:46:592 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:592 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(), $right.e, "neg", $right.e) 
2023-09-07 21:18:46:592 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:72]
2023-09-07 21:18:46:593 action-translator LogManager.java:25 attr [@-1,32:33='op',<0>,2:102]
2023-09-07 21:18:46:594 action-translator LogManager.java:25 attr [@-1,47:48='op',<0>,2:117]
2023-09-07 21:18:46:594 action-translator LogManager.java:25 qattr [@-1,64:68='right',<0>,2:134].[@-1,70:70='e',<0>,2:140]
2023-09-07 21:18:46:594 action-translator LogManager.java:25 qattr [@-1,81:85='right',<0>,2:151].[@-1,87:87='e',<0>,2:157]
2023-09-07 21:18:46:595 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($op.GetLine(), $op.GetColumn(),$right.e , $op.text, $right.e) 
2023-09-07 21:18:46:596 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:69]
2023-09-07 21:18:46:596 action-translator LogManager.java:25 attr [@-1,32:33='op',<0>,3:99]
2023-09-07 21:18:46:597 action-translator LogManager.java:25 attr [@-1,47:48='op',<0>,3:114]
2023-09-07 21:18:46:597 action-translator LogManager.java:25 qattr [@-1,63:67='right',<0>,3:130].[@-1,69:69='e',<0>,3:136]
2023-09-07 21:18:46:597 action-translator LogManager.java:25 qattr [@-1,74:75='op',<0>,3:141].[@-1,77:80='text',<0>,3:144]
2023-09-07 21:18:46:597 action-translator LogManager.java:25 qattr [@-1,84:88='right',<0>,3:151].[@-1,90:90='e',<0>,3:157]
2023-09-07 21:18:46:598 action-translator LogManager.java:25 translate  $e = $callFunction.cf 
2023-09-07 21:18:46:598 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:42]
2023-09-07 21:18:46:598 action-translator LogManager.java:25 qattr [@-1,7:18='callFunction',<0>,4:47].[@-1,20:21='cf',<0>,4:60]
2023-09-07 21:18:46:599 action-translator LogManager.java:25 translate  $e = expressions.NewStructExp($ID.line, $ID.pos, $ID.text, $listStructExp.l ) 
2023-09-07 21:18:46:600 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:111]
2023-09-07 21:18:46:600 action-translator LogManager.java:25 qattr [@-1,32:33='ID',<0>,5:141].[@-1,35:38='line',<0>,5:144]
2023-09-07 21:18:46:600 action-translator LogManager.java:25 qattr [@-1,42:43='ID',<0>,5:151].[@-1,45:47='pos',<0>,5:154]
2023-09-07 21:18:46:600 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,5:160].[@-1,54:57='text',<0>,5:163]
2023-09-07 21:18:46:600 action-translator LogManager.java:25 qattr [@-1,61:73='listStructExp',<0>,5:170].[@-1,75:75='l',<0>,5:184]
2023-09-07 21:18:46:601 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-09-07 21:18:46:601 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,6:82]
2023-09-07 21:18:46:602 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,6:87].[@-1,12:12='e',<0>,6:92]
2023-09-07 21:18:46:602 action-translator LogManager.java:25 translate  $e = $list.p
2023-09-07 21:18:46:602 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,7:44]
2023-09-07 21:18:46:602 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,7:49].[@-1,12:12='p',<0>,7:54]
2023-09-07 21:18:46:603 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-09-07 21:18:46:603 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,8:88]
2023-09-07 21:18:46:603 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,8:114].[@-1,35:38='line',<0>,8:121]
2023-09-07 21:18:46:603 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,8:128].[@-1,49:51='pos',<0>,8:135]
2023-09-07 21:18:46:603 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,8:141].[@-1,66:66='l',<0>,8:152]
2023-09-07 21:18:46:604 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($INT.GetLine(),$INT.GetColumn(),$expr.e, environment.INTEGER) 
2023-09-07 21:18:46:604 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,9:103]
2023-09-07 21:18:46:604 action-translator LogManager.java:25 attr [@-1,33:35='INT',<0>,9:134]
2023-09-07 21:18:46:604 action-translator LogManager.java:25 attr [@-1,48:50='INT',<0>,9:149]
2023-09-07 21:18:46:604 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,9:166].[@-1,70:70='e',<0>,9:171]
2023-09-07 21:18:46:605 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($STR.GetLine(),$STR.GetColumn(),$expr.e, environment.STRING) 
2023-09-07 21:18:46:605 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,10:103]
2023-09-07 21:18:46:606 action-translator LogManager.java:25 attr [@-1,33:35='STR',<0>,10:134]
2023-09-07 21:18:46:606 action-translator LogManager.java:25 attr [@-1,48:50='STR',<0>,10:149]
2023-09-07 21:18:46:606 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,10:166].[@-1,70:70='e',<0>,10:171]
2023-09-07 21:18:46:607 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($FLOAT.GetLine(),$FLOAT.GetColumn(),$expr.e, environment.FLOAT) 
2023-09-07 21:18:46:607 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,11:105]
2023-09-07 21:18:46:607 action-translator LogManager.java:25 attr [@-1,33:37='FLOAT',<0>,11:136]
2023-09-07 21:18:46:607 action-translator LogManager.java:25 attr [@-1,50:54='FLOAT',<0>,11:153]
2023-09-07 21:18:46:608 action-translator LogManager.java:25 qattr [@-1,69:72='expr',<0>,11:172].[@-1,74:74='e',<0>,11:177]
2023-09-07 21:18:46:608 action-translator LogManager.java:25 translate  $e = expressions.NewCount($ID.line, $ID.pos, $ID.text) 
2023-09-07 21:18:46:608 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,12:79]
2023-09-07 21:18:46:608 action-translator LogManager.java:25 qattr [@-1,28:29='ID',<0>,12:105].[@-1,31:34='line',<0>,12:108]
2023-09-07 21:18:46:609 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,12:115].[@-1,41:43='pos',<0>,12:118]
2023-09-07 21:18:46:609 action-translator LogManager.java:25 qattr [@-1,47:48='ID',<0>,12:124].[@-1,50:53='text',<0>,12:127]
2023-09-07 21:18:46:609 action-translator LogManager.java:25 translate  $e = expressions.NewIsEmpty($ID.line, $ID.pos, $ID.text) 
2023-09-07 21:18:46:609 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,13:80]
2023-09-07 21:18:46:609 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,13:108].[@-1,33:36='line',<0>,13:111]
2023-09-07 21:18:46:610 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,13:118].[@-1,43:45='pos',<0>,13:121]
2023-09-07 21:18:46:610 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,13:127].[@-1,52:55='text',<0>,13:130]
2023-09-07 21:18:46:610 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-09-07 21:18:46:610 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,16:30].[@-1,39:42='text',<0>,16:37]
2023-09-07 21:18:46:610 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,17:43].[@-1,102:105='text',<0>,17:50]
2023-09-07 21:18:46:612 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,21:13]
2023-09-07 21:18:46:612 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,21:43].[@-1,240:243='line',<0>,21:50]
2023-09-07 21:18:46:612 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,21:56].[@-1,253:255='pos',<0>,21:63]
2023-09-07 21:18:46:612 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,23:37].[@-1,341:344='text',<0>,23:44]
2023-09-07 21:18:46:612 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,27:13]
2023-09-07 21:18:46:613 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,27:43].[@-1,474:477='line',<0>,27:50]
2023-09-07 21:18:46:613 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,27:56].[@-1,487:489='pos',<0>,27:63]
2023-09-07 21:18:46:614 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-09-07 21:18:46:614 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,32:16].[@-1,25:28='text',<0>,32:23]
2023-09-07 21:18:46:614 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,33:9]
2023-09-07 21:18:46:615 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,33:39].[@-1,77:80='line',<0>,33:46]
2023-09-07 21:18:46:615 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,33:53].[@-1,91:93='pos',<0>,33:60]
2023-09-07 21:18:46:615 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-09-07 21:18:46:615 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:33]
2023-09-07 21:18:46:615 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,35:63].[@-1,36:39='line',<0>,35:67]
2023-09-07 21:18:46:616 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,35:74].[@-1,47:49='pos',<0>,35:78]
2023-09-07 21:18:46:616 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-09-07 21:18:46:616 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:33]
2023-09-07 21:18:46:617 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,36:63].[@-1,36:39='line',<0>,36:67]
2023-09-07 21:18:46:617 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,36:74].[@-1,47:49='pos',<0>,36:78]
2023-09-07 21:18:46:617 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-07 21:18:46:618 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:618 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,39:166]
2023-09-07 21:18:46:618 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,39:196].[@-1,37:41='start',<0>,39:201]
2023-09-07 21:18:46:619 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,39:219].[@-1,60:64='start',<0>,39:224]
2023-09-07 21:18:46:620 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,39:244].[@-1,85:85='e',<0>,39:249]
2023-09-07 21:18:46:620 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,39:253].[@-1,92:95='text',<0>,39:256]
2023-09-07 21:18:46:620 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,39:263].[@-1,105:105='e',<0>,39:269]
2023-09-07 21:18:46:620 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-07 21:18:46:622 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:622 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,40:152]
2023-09-07 21:18:46:622 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,40:182].[@-1,37:41='start',<0>,40:187]
2023-09-07 21:18:46:623 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,40:205].[@-1,60:64='start',<0>,40:210]
2023-09-07 21:18:46:623 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,40:230].[@-1,85:85='e',<0>,40:235]
2023-09-07 21:18:46:623 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,40:239].[@-1,92:95='text',<0>,40:242]
2023-09-07 21:18:46:623 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,40:249].[@-1,105:105='e',<0>,40:255]
2023-09-07 21:18:46:623 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-07 21:18:46:624 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:624 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,41:157]
2023-09-07 21:18:46:625 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,41:187].[@-1,37:41='start',<0>,41:192]
2023-09-07 21:18:46:625 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,41:210].[@-1,60:64='start',<0>,41:215]
2023-09-07 21:18:46:625 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,41:235].[@-1,85:85='e',<0>,41:240]
2023-09-07 21:18:46:625 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,41:244].[@-1,92:95='text',<0>,41:247]
2023-09-07 21:18:46:625 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,41:254].[@-1,105:105='e',<0>,41:260]
2023-09-07 21:18:46:626 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-07 21:18:46:626 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:627 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,42:157]
2023-09-07 21:18:46:627 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,42:187].[@-1,37:41='start',<0>,42:192]
2023-09-07 21:18:46:627 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,42:210].[@-1,60:64='start',<0>,42:215]
2023-09-07 21:18:46:627 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,42:235].[@-1,85:85='e',<0>,42:240]
2023-09-07 21:18:46:627 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,42:244].[@-1,92:95='text',<0>,42:247]
2023-09-07 21:18:46:627 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,42:254].[@-1,105:105='e',<0>,42:260]
2023-09-07 21:18:46:627 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-07 21:18:46:628 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:628 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,43:154]
2023-09-07 21:18:46:629 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,43:184].[@-1,37:41='start',<0>,43:189]
2023-09-07 21:18:46:629 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,43:207].[@-1,60:64='start',<0>,43:212]
2023-09-07 21:18:46:630 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,43:232].[@-1,85:85='e',<0>,43:237]
2023-09-07 21:18:46:630 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,43:241].[@-1,92:95='text',<0>,43:244]
2023-09-07 21:18:46:630 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,43:251].[@-1,105:105='e',<0>,43:257]
2023-09-07 21:18:46:632 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-07 21:18:46:632 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:632 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,44:129]
2023-09-07 21:18:46:633 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,44:159].[@-1,37:41='start',<0>,44:164]
2023-09-07 21:18:46:633 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,44:182].[@-1,60:64='start',<0>,44:187]
2023-09-07 21:18:46:633 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,44:207].[@-1,85:85='e',<0>,44:212]
2023-09-07 21:18:46:634 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,44:216].[@-1,92:95='text',<0>,44:219]
2023-09-07 21:18:46:634 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,44:226].[@-1,105:105='e',<0>,44:232]
2023-09-07 21:18:46:634 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-07 21:18:46:635 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-09-07 21:18:46:635 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,45:128]
2023-09-07 21:18:46:635 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,45:158].[@-1,37:41='start',<0>,45:163]
2023-09-07 21:18:46:636 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,45:181].[@-1,60:64='start',<0>,45:186]
2023-09-07 21:18:46:636 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,45:206].[@-1,85:85='e',<0>,45:211]
2023-09-07 21:18:46:636 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,45:215].[@-1,92:95='text',<0>,45:218]
2023-09-07 21:18:46:636 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,45:225].[@-1,105:105='e',<0>,45:231]
2023-09-07 21:18:46:637 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 22)
2023-09-07 21:18:46:637 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 21)
2023-09-07 21:18:46:637 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 20)
2023-09-07 21:18:46:637 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 19)
2023-09-07 21:18:46:637 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 18)
2023-09-07 21:18:46:638 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 17)
2023-09-07 21:18:46:638 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 16)
2023-09-07 21:18:46:640 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:640 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-07 21:18:46:640 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-07 21:18:46:640 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-07 21:18:46:640 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-07 21:18:46:640 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-07 21:18:46:642 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:642 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-09-07 21:18:46:642 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-09-07 21:18:46:642 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-09-07 21:18:46:642 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-09-07 21:18:46:643 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:644 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:644 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-09-07 21:18:46:644 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:35]
2023-09-07 21:18:46:644 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:63].[@-1,33:36='line',<0>,2:66]
2023-09-07 21:18:46:644 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:73].[@-1,43:45='pos',<0>,2:76]
2023-09-07 21:18:46:644 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:82].[@-1,52:55='text',<0>,2:85]
2023-09-07 21:18:46:644 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:647 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-09-07 21:18:46:647 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:130]
2023-09-07 21:18:46:647 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:162].[@-1,39:43='start',<0>,5:167]
2023-09-07 21:18:46:647 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:185].[@-1,62:66='start',<0>,5:190]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:210].[@-1,87:87='p',<0>,5:215]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:219].[@-1,96:96='e',<0>,5:224]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:649 action-translator LogManager.java:25 translate  $p = expressions.NewStructAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $ID.text)  
2023-09-07 21:18:46:649 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,6:113]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 qattr [@-1,35:38='list',<0>,6:146].[@-1,40:44='start',<0>,6:151]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 qattr [@-1,58:61='list',<0>,6:169].[@-1,63:67='start',<0>,6:174]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 qattr [@-1,83:86='list',<0>,6:194].[@-1,88:88='p',<0>,6:199]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 qattr [@-1,92:93='ID',<0>,6:203].[@-1,95:98='text',<0>,6:206]
2023-09-07 21:18:46:649 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:649 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-09-07 21:18:46:652 action-translator LogManager.java:25 translate  $cfi = instructions.NewCall_Function($ID.line, $ID.pos, $ID.text, $listParams.l) 
2023-09-07 21:18:46:653 action-translator LogManager.java:25 attr [@-1,2:4='cfi',<0>,288:32]
2023-09-07 21:18:46:653 action-translator LogManager.java:25 qattr [@-1,39:40='ID',<0>,288:69].[@-1,42:45='line',<0>,288:72]
2023-09-07 21:18:46:653 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,288:79].[@-1,52:54='pos',<0>,288:82]
2023-09-07 21:18:46:653 action-translator LogManager.java:25 qattr [@-1,58:59='ID',<0>,288:88].[@-1,61:64='text',<0>,288:91]
2023-09-07 21:18:46:654 action-translator LogManager.java:25 qattr [@-1,68:77='listParams',<0>,288:98].[@-1,79:79='l',<0>,288:109]
2023-09-07 21:18:46:655 action-translator LogManager.java:25 translate  $cf = expressions.NewCallExp($ID.line, $ID.pos, $ID.text, $listParamsCall.l) 
2023-09-07 21:18:46:655 action-translator LogManager.java:25 attr [@-1,2:3='cf',<0>,292:36]
2023-09-07 21:18:46:655 action-translator LogManager.java:25 qattr [@-1,31:32='ID',<0>,292:65].[@-1,34:37='line',<0>,292:68]
2023-09-07 21:18:46:655 action-translator LogManager.java:25 qattr [@-1,41:42='ID',<0>,292:75].[@-1,44:46='pos',<0>,292:78]
2023-09-07 21:18:46:655 action-translator LogManager.java:25 qattr [@-1,50:51='ID',<0>,292:84].[@-1,53:56='text',<0>,292:87]
2023-09-07 21:18:46:655 action-translator LogManager.java:25 qattr [@-1,60:73='listParamsCall',<0>,292:94].[@-1,75:75='l',<0>,292:109]
2023-09-07 21:18:46:656 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:657 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-09-07 21:18:46:657 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-09-07 21:18:46:657 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-09-07 21:18:46:657 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-09-07 21:18:46:657 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-09-07 21:18:46:657 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-07 21:18:46:657 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,7:9]
2023-09-07 21:18:46:657 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:657 action-translator LogManager.java:25 translate 
                                              var arr []interface{}
                                              arr = append($list.l, $expr.e)
                                              $l = arr
                                          
2023-09-07 21:18:46:658 action-translator LogManager.java:25 qattr [@-1,131:134='list',<0>,13:60].[@-1,136:136='l',<0>,13:65]
2023-09-07 21:18:46:658 action-translator LogManager.java:25 qattr [@-1,140:143='expr',<0>,13:69].[@-1,145:145='e',<0>,13:74]
2023-09-07 21:18:46:658 action-translator LogManager.java:25 attr [@-1,196:196='l',<0>,14:47]
2023-09-07 21:18:46:658 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:659 action-translator LogManager.java:25 translate 
2023-09-07 21:18:46:659 action-translator LogManager.java:25 translate 
                    var arr []interface{}
                    StrExp := environment.NewStructContent($ID.text, $expr.e)
                    arr = append(arr, StrExp)
                    $l = arr
                
2023-09-07 21:18:46:660 action-translator LogManager.java:25 qattr [@-1,105:106='ID',<0>,4:60].[@-1,108:111='text',<0>,4:63]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 qattr [@-1,115:118='expr',<0>,4:70].[@-1,120:120='e',<0>,4:75]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 attr [@-1,192:192='l',<0>,6:21]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 translate 
        $l = []interface{}{}
    
2023-09-07 21:18:46:660 action-translator LogManager.java:25 attr [@-1,11:11='l',<0>,9:9]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:46:660 action-translator LogManager.java:25 translate 
                                                      var arr []interface{}
                                                      StrExp := environment.NewStructContent($ID.text, $expr.e)
                                                      arr = append($list.l, StrExp)
                                                      $l = arr
                                                  
2023-09-07 21:18:46:660 action-translator LogManager.java:25 qattr [@-1,173:174='ID',<0>,15:94].[@-1,176:179='text',<0>,15:97]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 qattr [@-1,183:186='expr',<0>,15:104].[@-1,188:188='e',<0>,15:109]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 qattr [@-1,260:263='list',<0>,16:68].[@-1,265:265='l',<0>,16:73]
2023-09-07 21:18:46:660 action-translator LogManager.java:25 attr [@-1,332:332='l',<0>,17:55]
2023-09-07 21:18:46:662 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 3)
2023-09-07 21:18:47:656 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 21:18:47:656 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 21:18:47:756 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-09-07 21:18:47:756 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

