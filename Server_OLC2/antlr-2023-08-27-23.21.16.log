2023-08-27 23:21:14:350 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-27 23:21:14:467 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-27 23:21:15:491 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-27 23:21:15:505 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-27 23:21:15:511 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-27 23:21:15:512 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-27 23:21:15:554 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=242>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=236> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-08-27 23:21:15:567 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 242))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 236))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-08-27 23:21:15:568 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=377>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=371> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-08-27 23:21:15:570 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 377))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 371))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-08-27 23:21:15:581 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=650> expr<tokenIndex=652> PARDER<tokenIndex=654> { $e = $expr.e } 
        | list=listArray<tokenIndex=662> { $e = $list.p} 
        | CORIZQ<tokenIndex=668> listParams<tokenIndex=670> CORDER<tokenIndex=672> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=678>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=684>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=690> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=696> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(MUL<tokenIndex=525>|DIV<tokenIndex=527>) right=expr<tokenIndex=532,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(ADD<tokenIndex=545>|SUB<tokenIndex=547>) right=expr<tokenIndex=552,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MAY_IG<tokenIndex=565>|MAYOR<tokenIndex=567>) right=expr<tokenIndex=572,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(MEN_IG<tokenIndex=585>|MENOR<tokenIndex=587>) right=expr<tokenIndex=592,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=(IG_IG<tokenIndex=605>|DIF<tokenIndex=607>) right=expr<tokenIndex=612,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=AND<tokenIndex=624> right=expr<tokenIndex=628,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 8)}?<p=8> op=OR<tokenIndex=640> right=expr<tokenIndex=644,p=9> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-27 23:21:15:604 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 650))) (expr (ELEMENT_OPTIONS (= tokenIndex 652))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 654))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 662)))) { $e = $list.p}) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 668))) (listParams (ELEMENT_OPTIONS (= tokenIndex 670))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 672))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 678))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 684))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 690))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 696))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 525))) (DIV (ELEMENT_OPTIONS (= tokenIndex 527))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 532) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 545))) (SUB (ELEMENT_OPTIONS (= tokenIndex 547))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 552) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 565))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 567))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 572) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 585))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 587))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 592) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 605))) (DIF (ELEMENT_OPTIONS (= tokenIndex 607))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 612) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 624)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 628) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 8)}? (ELEMENT_OPTIONS (= p 8))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 640)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 644) (= p 9)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-27 23:21:15:605 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=721> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=713> expr<tokenIndex=715> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-27 23:21:15:609 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 721))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 713))) (expr (ELEMENT_OPTIONS (= tokenIndex 715))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-27 23:21:15:609 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=750> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=740> expr<tokenIndex=742> CORDER<tokenIndex=744> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-27 23:21:15:615 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 750))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 740))) (expr (ELEMENT_OPTIONS (= tokenIndex 742))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 744))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-27 23:21:15:635 grammar LogManager.java:25 import INT=1
2023-08-27 23:21:15:635 grammar LogManager.java:25 import FLOAT=2
2023-08-27 23:21:15:635 grammar LogManager.java:25 import BOOL=3
2023-08-27 23:21:15:636 grammar LogManager.java:25 import STR=4
2023-08-27 23:21:15:636 grammar LogManager.java:25 import TRU=5
2023-08-27 23:21:15:636 grammar LogManager.java:25 import FAL=6
2023-08-27 23:21:15:636 grammar LogManager.java:25 import PRINT=7
2023-08-27 23:21:15:636 grammar LogManager.java:25 import IF=8
2023-08-27 23:21:15:636 grammar LogManager.java:25 import ELSE=9
2023-08-27 23:21:15:636 grammar LogManager.java:25 import WHILE=10
2023-08-27 23:21:15:637 grammar LogManager.java:25 import FOR=11
2023-08-27 23:21:15:637 grammar LogManager.java:25 import SWITCH=12
2023-08-27 23:21:15:637 grammar LogManager.java:25 import CASE=13
2023-08-27 23:21:15:637 grammar LogManager.java:25 import DEFAULT=14
2023-08-27 23:21:15:637 grammar LogManager.java:25 import IN=15
2023-08-27 23:21:15:637 grammar LogManager.java:25 import VAR=16
2023-08-27 23:21:15:637 grammar LogManager.java:25 import NUMBER=17
2023-08-27 23:21:15:637 grammar LogManager.java:25 import STRING=18
2023-08-27 23:21:15:637 grammar LogManager.java:25 import ID=19
2023-08-27 23:21:15:638 grammar LogManager.java:25 import DIF=20
2023-08-27 23:21:15:638 grammar LogManager.java:25 import IG_IG=21
2023-08-27 23:21:15:638 grammar LogManager.java:25 import NOT=22
2023-08-27 23:21:15:638 grammar LogManager.java:25 import OR=23
2023-08-27 23:21:15:638 grammar LogManager.java:25 import AND=24
2023-08-27 23:21:15:638 grammar LogManager.java:25 import IG=25
2023-08-27 23:21:15:639 grammar LogManager.java:25 import MAY_IG=26
2023-08-27 23:21:15:639 grammar LogManager.java:25 import MEN_IG=27
2023-08-27 23:21:15:639 grammar LogManager.java:25 import MAYOR=28
2023-08-27 23:21:15:639 grammar LogManager.java:25 import MENOR=29
2023-08-27 23:21:15:639 grammar LogManager.java:25 import MUL=30
2023-08-27 23:21:15:640 grammar LogManager.java:25 import DIV=31
2023-08-27 23:21:15:641 grammar LogManager.java:25 import ADD=32
2023-08-27 23:21:15:641 grammar LogManager.java:25 import SUB=33
2023-08-27 23:21:15:641 grammar LogManager.java:25 import PARIZQ=34
2023-08-27 23:21:15:642 grammar LogManager.java:25 import PARDER=35
2023-08-27 23:21:15:642 grammar LogManager.java:25 import LLAVEIZQ=36
2023-08-27 23:21:15:642 grammar LogManager.java:25 import LLAVEDER=37
2023-08-27 23:21:15:642 grammar LogManager.java:25 import D_PTS=38
2023-08-27 23:21:15:642 grammar LogManager.java:25 import CORIZQ=39
2023-08-27 23:21:15:642 grammar LogManager.java:25 import CORDER=40
2023-08-27 23:21:15:642 grammar LogManager.java:25 import COMA=41
2023-08-27 23:21:15:642 grammar LogManager.java:25 import PUNTO=42
2023-08-27 23:21:15:642 grammar LogManager.java:25 import WHITESPACE=43
2023-08-27 23:21:15:642 grammar LogManager.java:25 import COMMENT=44
2023-08-27 23:21:15:642 grammar LogManager.java:25 import LINE_COMMENT=45
2023-08-27 23:21:15:642 grammar LogManager.java:25 import 'Int'=1
2023-08-27 23:21:15:642 grammar LogManager.java:25 import 'Float'=2
2023-08-27 23:21:15:642 grammar LogManager.java:25 import 'Bool'=3
2023-08-27 23:21:15:642 grammar LogManager.java:25 import 'String'=4
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'true'=5
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'false'=6
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'print'=7
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'if'=8
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'else'=9
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'while'=10
2023-08-27 23:21:15:644 grammar LogManager.java:25 import 'for'=11
2023-08-27 23:21:15:645 grammar LogManager.java:25 import 'switch'=12
2023-08-27 23:21:15:645 grammar LogManager.java:25 import 'case'=13
2023-08-27 23:21:15:645 grammar LogManager.java:25 import 'default'=14
2023-08-27 23:21:15:645 grammar LogManager.java:25 import 'in'=15
2023-08-27 23:21:15:645 grammar LogManager.java:25 import 'var'=16
2023-08-27 23:21:15:645 grammar LogManager.java:25 import '!='=20
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '=='=21
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '!'=22
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '||'=23
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '&&'=24
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '='=25
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '>='=26
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '<='=27
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '>'=28
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '<'=29
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '*'=30
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '/'=31
2023-08-27 23:21:15:646 grammar LogManager.java:25 import '+'=32
2023-08-27 23:21:15:647 grammar LogManager.java:25 import '-'=33
2023-08-27 23:21:15:647 grammar LogManager.java:25 import '('=34
2023-08-27 23:21:15:647 grammar LogManager.java:25 import ')'=35
2023-08-27 23:21:15:647 grammar LogManager.java:25 import '{'=36
2023-08-27 23:21:15:647 grammar LogManager.java:25 import '}'=37
2023-08-27 23:21:15:647 grammar LogManager.java:25 import ':'=38
2023-08-27 23:21:15:647 grammar LogManager.java:25 import '['=39
2023-08-27 23:21:15:647 grammar LogManager.java:25 import ']'=40
2023-08-27 23:21:15:647 grammar LogManager.java:25 import ','=41
2023-08-27 23:21:15:647 grammar LogManager.java:25 import '.'=42
2023-08-27 23:21:15:648 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, MAY_IG=26, MEN_IG=27, MAYOR=28, MENOR=29, MUL=30, DIV=31, ADD=32, SUB=33, PARIZQ=34, PARDER=35, LLAVEIZQ=36, LLAVEDER=37, D_PTS=38, CORIZQ=39, CORDER=40, COMA=41, PUNTO=42, WHITESPACE=43, COMMENT=44, LINE_COMMENT=45, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '>='=26, '<='=27, '>'=28, '<'=29, '*'=30, '/'=31, '+'=32, '-'=33, '('=34, ')'=35, '{'=36, '}'=37, ':'=38, '['=39, ']'=40, ','=41, '.'=42}
2023-08-27 23:21:15:649 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, NUMBER=17, STRING=18, ID=19, DIF=20, IG_IG=21, NOT=22, OR=23, AND=24, IG=25, MAY_IG=26, MEN_IG=27, MAYOR=28, MENOR=29, MUL=30, DIV=31, ADD=32, SUB=33, PARIZQ=34, PARDER=35, LLAVEIZQ=36, LLAVEDER=37, D_PTS=38, CORIZQ=39, CORDER=40, COMA=41, PUNTO=42, WHITESPACE=43, COMMENT=44, LINE_COMMENT=45}
2023-08-27 23:21:15:649 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, '!='=20, '=='=21, '!'=22, '||'=23, '&&'=24, '='=25, '>='=26, '<='=27, '>'=28, '<'=29, '*'=30, '/'=31, '+'=32, '-'=33, '('=34, ')'=35, '{'=36, '}'=37, ':'=38, '['=39, ']'=40, ','=41, '.'=42}
2023-08-27 23:21:15:724 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-27 23:21:15:725 LL1 LogManager.java:25 look=[{7..8, 10..12, 16, 19}, null]
2023-08-27 23:21:15:725 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:725 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-27 23:21:15:726 LL1 LogManager.java:25 look=[7, 8, 16, 19, 10, 11, 12]
2023-08-27 23:21:15:726 LL1 LogManager.java:25 LL(1)? true
2023-08-27 23:21:15:726 LL1 LogManager.java:25 
DECISION 2 in rule forstmt
2023-08-27 23:21:15:726 LL1 LogManager.java:25 look=[11, 11]
2023-08-27 23:21:15:727 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:727 LL1 LogManager.java:25 
DECISION 3 in rule caselist
2023-08-27 23:21:15:727 LL1 LogManager.java:25 look=[null, 14]
2023-08-27 23:21:15:727 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:728 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-27 23:21:15:728 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-08-27 23:21:15:728 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:728 LL1 LogManager.java:25 
DECISION 5 in rule elseiflist
2023-08-27 23:21:15:729 LL1 LogManager.java:25 look=[null, null]
2023-08-27 23:21:15:729 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:729 LL1 LogManager.java:25 
DECISION 6 in rule types
2023-08-27 23:21:15:729 LL1 LogManager.java:25 look=[1, 2, 4, 3, 39]
2023-08-27 23:21:15:729 LL1 LogManager.java:25 LL(1)? true
2023-08-27 23:21:15:729 LL1 LogManager.java:25 
DECISION 7 in rule expr
2023-08-27 23:21:15:729 LL1 LogManager.java:25 look=[34, 19, 39, 17, 18, 5, 6]
2023-08-27 23:21:15:730 LL1 LogManager.java:25 LL(1)? true
2023-08-27 23:21:15:730 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-27 23:21:15:730 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-27 23:21:15:730 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:730 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-27 23:21:15:732 LL1 LogManager.java:25 look=[null, null]
2023-08-27 23:21:15:732 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:732 LL1 LogManager.java:25 
DECISION 10 in rule listParams
2023-08-27 23:21:15:734 LL1 LogManager.java:25 look=[null, 40]
2023-08-27 23:21:15:734 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:735 LL1 LogManager.java:25 
DECISION 11 in rule listArray
2023-08-27 23:21:15:738 LL1 LogManager.java:25 look=[null, null]
2023-08-27 23:21:15:738 LL1 LogManager.java:25 LL(1)? false
2023-08-27 23:21:15:748 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-27 23:21:15:765 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-27 23:21:15:766 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-27 23:21:15:767 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-27 23:21:15:768 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-27 23:21:15:768 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-27 23:21:15:770 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-27 23:21:15:770 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-27 23:21:15:770 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-27 23:21:15:771 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-27 23:21:15:771 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-27 23:21:15:771 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-27 23:21:15:772 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-27 23:21:15:772 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-27 23:21:15:773 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-27 23:21:15:774 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-27 23:21:15:774 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-27 23:21:15:774 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-27 23:21:15:775 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-08-27 23:21:15:775 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-08-27 23:21:15:775 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,42:23].[@-1,21:25='asign',<0>,42:34]
2023-08-27 23:21:15:776 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-08-27 23:21:15:776 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-27 23:21:15:777 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:25='whiles',<0>,43:32]
2023-08-27 23:21:15:777 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-08-27 23:21:15:778 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-08-27 23:21:15:778 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:21='fors',<0>,44:28]
2023-08-27 23:21:15:778 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-08-27 23:21:15:778 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-08-27 23:21:15:779 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,45:22].[@-1,20:24='swtch',<0>,45:32]
2023-08-27 23:21:15:780 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-27 23:21:15:781 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,49:29]
2023-08-27 23:21:15:781 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,49:59].[@-1,38:41='line',<0>,49:65]
2023-08-27 23:21:15:782 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,49:71].[@-1,50:52='pos',<0>,49:77]
2023-08-27 23:21:15:782 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,49:82].[@-1,60:60='e',<0>,49:87]
2023-08-27 23:21:15:789 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-08-27 23:21:15:790 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,55:74]
2023-08-27 23:21:15:790 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,55:102].[@-1,34:37='line',<0>,55:106]
2023-08-27 23:21:15:791 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,55:113].[@-1,45:47='pos',<0>,55:117]
2023-08-27 23:21:15:791 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,55:123].[@-1,54:57='text',<0>,55:126]
2023-08-27 23:21:15:792 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,55:133].[@-1,64:64='e',<0>,55:136]
2023-08-27 23:21:15:792 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,55:139].[@-1,70:70='e',<0>,55:142]
2023-08-27 23:21:15:792 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,55:152].[@-1,86:88='blk',<0>,55:158]
2023-08-27 23:21:15:795 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-08-27 23:21:15:795 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,56:56]
2023-08-27 23:21:15:795 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,56:84].[@-1,34:37='line',<0>,56:88]
2023-08-27 23:21:15:796 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,56:95].[@-1,45:47='pos',<0>,56:99]
2023-08-27 23:21:15:796 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,56:105].[@-1,54:57='text',<0>,56:108]
2023-08-27 23:21:15:797 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,56:124].[@-1,74:77='text',<0>,56:128]
2023-08-27 23:21:15:797 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,56:135].[@-1,87:89='blk',<0>,56:141]
2023-08-27 23:21:15:801 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-08-27 23:21:15:801 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,60:64]
2023-08-27 23:21:15:801 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,60:97].[@-1,42:45='line',<0>,60:104]
2023-08-27 23:21:15:802 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,60:111].[@-1,56:58='pos',<0>,60:118]
2023-08-27 23:21:15:802 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,60:124].[@-1,67:67='e',<0>,60:129]
2023-08-27 23:21:15:804 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,60:132].[@-1,79:83='cases',<0>,60:141]
2023-08-27 23:21:15:804 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,60:149].[@-1,93:95='blk',<0>,60:155]
2023-08-27 23:21:15:806 action-translator LogManager.java:25 translate 
2023-08-27 23:21:15:807 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-08-27 23:21:15:807 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-08-27 23:21:15:807 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-08-27 23:21:15:807 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-08-27 23:21:15:807 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-08-27 23:21:15:809 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:809 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-08-27 23:21:15:810 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-08-27 23:21:15:810 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-08-27 23:21:15:811 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-08-27 23:21:15:815 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:817 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-08-27 23:21:15:818 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,75:26]
2023-08-27 23:21:15:818 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,75:57].[@-1,38:41='line',<0>,75:62]
2023-08-27 23:21:15:818 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,75:69].[@-1,50:52='pos',<0>,75:74]
2023-08-27 23:21:15:818 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,75:79].[@-1,60:60='e',<0>,75:84]
2023-08-27 23:21:15:819 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,75:88].[@-1,70:72='blk',<0>,75:94]
2023-08-27 23:21:15:821 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-27 23:21:15:821 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,79:36]
2023-08-27 23:21:15:821 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,79:65].[@-1,34:37='line',<0>,79:68]
2023-08-27 23:21:15:822 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,79:75].[@-1,44:46='pos',<0>,79:78]
2023-08-27 23:21:15:822 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,79:84].[@-1,55:55='e',<0>,79:89]
2023-08-27 23:21:15:822 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,79:93].[@-1,65:67='blk',<0>,79:99]
2023-08-27 23:21:15:822 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-08-27 23:21:15:823 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,80:69]
2023-08-27 23:21:15:823 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,80:98].[@-1,33:36='line',<0>,80:101]
2023-08-27 23:21:15:823 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,80:108].[@-1,43:45='pos',<0>,80:111]
2023-08-27 23:21:15:823 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,80:117].[@-1,54:54='e',<0>,80:122]
2023-08-27 23:21:15:824 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,80:126].[@-1,61:63='blk',<0>,80:129]
2023-08-27 23:21:15:824 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,80:140].[@-1,75:77='blk',<0>,80:143]
2023-08-27 23:21:15:825 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-08-27 23:21:15:825 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,81:47]
2023-08-27 23:21:15:826 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,81:76].[@-1,34:37='line',<0>,81:79]
2023-08-27 23:21:15:826 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,81:86].[@-1,44:46='pos',<0>,81:89]
2023-08-27 23:21:15:827 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,81:95].[@-1,55:55='e',<0>,81:100]
2023-08-27 23:21:15:827 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,81:104].[@-1,65:67='blk',<0>,81:110]
2023-08-27 23:21:15:829 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,81:116].[@-1,82:93='else_if_list',<0>,81:127]
2023-08-27 23:21:15:831 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-08-27 23:21:15:831 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,82:82]
2023-08-27 23:21:15:831 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,82:111].[@-1,34:37='line',<0>,82:114]
2023-08-27 23:21:15:832 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,82:121].[@-1,44:46='pos',<0>,82:124]
2023-08-27 23:21:15:832 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,82:130].[@-1,55:55='e',<0>,82:135]
2023-08-27 23:21:15:833 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,82:139].[@-1,62:64='blk',<0>,82:142]
2023-08-27 23:21:15:833 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,82:148].[@-1,79:90='else_if_list',<0>,82:159]
2023-08-27 23:21:15:833 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,82:174].[@-1,97:99='blk',<0>,82:177]
2023-08-27 23:21:15:834 action-translator LogManager.java:25 translate 
2023-08-27 23:21:15:835 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-08-27 23:21:15:835 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-08-27 23:21:15:835 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-08-27 23:21:15:836 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-08-27 23:21:15:836 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-08-27 23:21:15:837 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:837 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-08-27 23:21:15:838 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-08-27 23:21:15:838 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-08-27 23:21:15:839 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-08-27 23:21:15:840 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:842 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-27 23:21:15:842 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,99:41]
2023-08-27 23:21:15:842 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,99:70].[@-1,34:37='line',<0>,99:73]
2023-08-27 23:21:15:844 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,99:80].[@-1,44:46='pos',<0>,99:83]
2023-08-27 23:21:15:844 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,99:89].[@-1,55:55='e',<0>,99:94]
2023-08-27 23:21:15:845 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,99:98].[@-1,65:67='blk',<0>,99:104]
2023-08-27 23:21:15:845 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-27 23:21:15:845 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,104:39]
2023-08-27 23:21:15:845 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,104:71].[@-1,40:43='line',<0>,104:77]
2023-08-27 23:21:15:845 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,104:84].[@-1,53:55='pos',<0>,104:90]
2023-08-27 23:21:15:846 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,104:96].[@-1,64:64='e',<0>,104:101]
2023-08-27 23:21:15:846 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,104:105].[@-1,74:76='blk',<0>,104:111]
2023-08-27 23:21:15:847 action-translator LogManager.java:25 translate 
            $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
        
2023-08-27 23:21:15:848 action-translator LogManager.java:25 setAttr [@-1,14:16='dec',<0>,110:13] [@-1,19:97=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)',<0>,110:18]
2023-08-27 23:21:15:848 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)
2023-08-27 23:21:15:848 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,109:38].[@-1,34:37='line',<0>,109:42]
2023-08-27 23:21:15:848 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,109:49].[@-1,45:47='pos',<0>,109:53]
2023-08-27 23:21:15:848 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,109:59].[@-1,54:57='text',<0>,109:62]
2023-08-27 23:21:15:849 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,109:69].[@-1,67:68='ty',<0>,109:75]
2023-08-27 23:21:15:849 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,109:80].[@-1,77:77='e',<0>,109:85]
2023-08-27 23:21:15:850 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-08-27 23:21:15:850 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,116:15]
2023-08-27 23:21:15:850 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,116:51].[@-1,41:44='line',<0>,116:54]
2023-08-27 23:21:15:850 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,116:61].[@-1,51:53='pos',<0>,116:64]
2023-08-27 23:21:15:851 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,116:70].[@-1,60:63='text',<0>,116:73]
2023-08-27 23:21:15:851 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,116:80].[@-1,72:72='e',<0>,116:85]
2023-08-27 23:21:15:852 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-27 23:21:15:855 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,122:8]
2023-08-27 23:21:15:857 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-27 23:21:15:857 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,123:10]
2023-08-27 23:21:15:858 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-27 23:21:15:858 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,124:8]
2023-08-27 23:21:15:858 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-27 23:21:15:859 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,125:9]
2023-08-27 23:21:15:859 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-27 23:21:15:859 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,126:18]
2023-08-27 23:21:15:862 action-translator LogManager.java:25 translate 
2023-08-27 23:21:15:862 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-27 23:21:15:862 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-27 23:21:15:863 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-27 23:21:15:864 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-27 23:21:15:864 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-27 23:21:15:864 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-27 23:21:15:864 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-27 23:21:15:864 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:85]
2023-08-27 23:21:15:864 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,4:111].[@-1,35:38='line',<0>,4:118]
2023-08-27 23:21:15:865 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,4:125].[@-1,49:51='pos',<0>,4:132]
2023-08-27 23:21:15:865 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,4:138].[@-1,66:66='l',<0>,4:149]
2023-08-27 23:21:15:867 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-27 23:21:15:867 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,7:30].[@-1,39:42='text',<0>,7:37]
2023-08-27 23:21:15:868 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,8:43].[@-1,102:105='text',<0>,8:50]
2023-08-27 23:21:15:868 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,12:13]
2023-08-27 23:21:15:868 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,12:43].[@-1,240:243='line',<0>,12:50]
2023-08-27 23:21:15:869 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,12:56].[@-1,253:255='pos',<0>,12:63]
2023-08-27 23:21:15:869 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,14:37].[@-1,341:344='text',<0>,14:44]
2023-08-27 23:21:15:870 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,18:13]
2023-08-27 23:21:15:870 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,18:43].[@-1,474:477='line',<0>,18:50]
2023-08-27 23:21:15:870 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,18:56].[@-1,487:489='pos',<0>,18:63]
2023-08-27 23:21:15:871 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-27 23:21:15:871 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,23:16].[@-1,25:28='text',<0>,23:23]
2023-08-27 23:21:15:871 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,24:9]
2023-08-27 23:21:15:871 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,24:39].[@-1,77:80='line',<0>,24:46]
2023-08-27 23:21:15:871 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,24:53].[@-1,91:93='pos',<0>,24:60]
2023-08-27 23:21:15:872 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-27 23:21:15:872 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,26:32]
2023-08-27 23:21:15:872 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,26:62].[@-1,36:39='line',<0>,26:66]
2023-08-27 23:21:15:872 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,26:73].[@-1,47:49='pos',<0>,26:77]
2023-08-27 23:21:15:874 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-27 23:21:15:874 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-27 23:21:15:874 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-27 23:21:15:874 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-27 23:21:15:874 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-27 23:21:15:875 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:875 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,30:139]
2023-08-27 23:21:15:875 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,30:169].[@-1,37:41='start',<0>,30:174]
2023-08-27 23:21:15:876 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,30:192].[@-1,60:64='start',<0>,30:197]
2023-08-27 23:21:15:876 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,30:217].[@-1,85:85='e',<0>,30:222]
2023-08-27 23:21:15:877 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,30:226].[@-1,92:95='text',<0>,30:229]
2023-08-27 23:21:15:877 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,30:236].[@-1,105:105='e',<0>,30:242]
2023-08-27 23:21:15:878 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-27 23:21:15:878 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:880 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:149]
2023-08-27 23:21:15:880 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:179].[@-1,37:41='start',<0>,31:184]
2023-08-27 23:21:15:881 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:202].[@-1,60:64='start',<0>,31:207]
2023-08-27 23:21:15:881 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:227].[@-1,85:85='e',<0>,31:232]
2023-08-27 23:21:15:882 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:236].[@-1,92:95='text',<0>,31:239]
2023-08-27 23:21:15:882 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:246].[@-1,105:105='e',<0>,31:252]
2023-08-27 23:21:15:882 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-27 23:21:15:884 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:884 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:154]
2023-08-27 23:21:15:885 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:184].[@-1,37:41='start',<0>,32:189]
2023-08-27 23:21:15:885 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:207].[@-1,60:64='start',<0>,32:212]
2023-08-27 23:21:15:885 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:232].[@-1,85:85='e',<0>,32:237]
2023-08-27 23:21:15:885 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:241].[@-1,92:95='text',<0>,32:244]
2023-08-27 23:21:15:886 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:251].[@-1,105:105='e',<0>,32:257]
2023-08-27 23:21:15:886 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-27 23:21:15:887 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:888 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-27 23:21:15:888 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-27 23:21:15:888 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-27 23:21:15:889 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-27 23:21:15:889 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-27 23:21:15:889 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-27 23:21:15:890 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-27 23:21:15:890 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:890 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:151]
2023-08-27 23:21:15:890 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:181].[@-1,37:41='start',<0>,34:186]
2023-08-27 23:21:15:891 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:204].[@-1,60:64='start',<0>,34:209]
2023-08-27 23:21:15:891 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:229].[@-1,85:85='e',<0>,34:234]
2023-08-27 23:21:15:891 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:238].[@-1,92:95='text',<0>,34:241]
2023-08-27 23:21:15:891 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:248].[@-1,105:105='e',<0>,34:254]
2023-08-27 23:21:15:892 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-27 23:21:15:892 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:892 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:125]
2023-08-27 23:21:15:893 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:155].[@-1,37:41='start',<0>,35:160]
2023-08-27 23:21:15:894 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:178].[@-1,60:64='start',<0>,35:183]
2023-08-27 23:21:15:894 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:203].[@-1,85:85='e',<0>,35:208]
2023-08-27 23:21:15:894 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:212].[@-1,92:95='text',<0>,35:215]
2023-08-27 23:21:15:894 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:222].[@-1,105:105='e',<0>,35:228]
2023-08-27 23:21:15:895 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-27 23:21:15:896 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-27 23:21:15:896 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:123]
2023-08-27 23:21:15:896 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:153].[@-1,37:41='start',<0>,36:158]
2023-08-27 23:21:15:896 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:176].[@-1,60:64='start',<0>,36:181]
2023-08-27 23:21:15:897 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:201].[@-1,85:85='e',<0>,36:206]
2023-08-27 23:21:15:897 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:210].[@-1,92:95='text',<0>,36:213]
2023-08-27 23:21:15:897 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:220].[@-1,105:105='e',<0>,36:226]
2023-08-27 23:21:15:897 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-27 23:21:15:897 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-27 23:21:15:898 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-27 23:21:15:898 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-27 23:21:15:898 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-27 23:21:15:898 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-27 23:21:15:898 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 8)
2023-08-27 23:21:15:899 action-translator LogManager.java:25 translate 
2023-08-27 23:21:15:899 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-27 23:21:15:899 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-27 23:21:15:900 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-27 23:21:15:900 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-27 23:21:15:900 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-27 23:21:15:900 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:900 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-27 23:21:15:901 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-27 23:21:15:901 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-27 23:21:15:901 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-27 23:21:15:901 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:902 action-translator LogManager.java:25 translate 
2023-08-27 23:21:15:902 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-27 23:21:15:902 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-27 23:21:15:902 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-27 23:21:15:902 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-27 23:21:15:902 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-27 23:21:15:904 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:15:904 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-27 23:21:15:904 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-27 23:21:15:905 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-27 23:21:15:905 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-27 23:21:15:905 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-27 23:21:15:905 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-27 23:21:15:905 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-27 23:21:16:385 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-27 23:21:16:386 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-27 23:21:16:472 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-27 23:21:16:472 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

