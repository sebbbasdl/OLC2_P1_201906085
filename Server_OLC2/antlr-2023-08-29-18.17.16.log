2023-08-29 18:17:15:065 grammar LogManager.java:25 before: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (BLOCK (ALT '\\') (ALT '@') (ALT '[') (ALT ']') (ALT '.') (ALT '#') (ALT '+') (ALT '-') (ALT '!') (ALT ':') (ALT ' ')))))))
2023-08-29 18:17:15:093 grammar LogManager.java:25 after: (LEXER_GRAMMAR SwiftLexer (RULES (RULE INT (BLOCK (ALT 'Int'))) (RULE FLOAT (BLOCK (ALT 'Float'))) (RULE BOOL (BLOCK (ALT 'Bool'))) (RULE STR (BLOCK (ALT 'String'))) (RULE TRU (BLOCK (ALT 'true'))) (RULE FAL (BLOCK (ALT 'false'))) (RULE PRINT (BLOCK (ALT 'print'))) (RULE IF (BLOCK (ALT 'if'))) (RULE ELSE (BLOCK (ALT 'else'))) (RULE WHILE (BLOCK (ALT 'while'))) (RULE FOR (BLOCK (ALT 'for'))) (RULE SWITCH (BLOCK (ALT 'switch'))) (RULE CASE (BLOCK (ALT 'case'))) (RULE DEFAULT (BLOCK (ALT 'default'))) (RULE IN (BLOCK (ALT 'in'))) (RULE VAR (BLOCK (ALT 'var'))) (RULE BREAK (BLOCK (ALT 'break'))) (RULE CONTINUE (BLOCK (ALT 'continue'))) (RULE RETURN (BLOCK (ALT 'return'))) (RULE NUMBER (BLOCK (ALT (+ (BLOCK (ALT [0-9]))) (? (BLOCK (ALT '.' (+ (BLOCK (ALT [0-9]))))))))) (RULE STRING (BLOCK (ALT '"' (* (BLOCK (ALT (~ (SET ["]))))) '"'))) (RULE ID (BLOCK (ALT (BLOCK (ALT [a-zA-Z])) (* (BLOCK (ALT [a-zA-Z0-9_])))))) (RULE DIF (BLOCK (ALT '!='))) (RULE IG_IG (BLOCK (ALT '=='))) (RULE NOT (BLOCK (ALT '!'))) (RULE OR (BLOCK (ALT '||'))) (RULE AND (BLOCK (ALT '&&'))) (RULE IG (BLOCK (ALT '='))) (RULE MAY_IG (BLOCK (ALT '>='))) (RULE MEN_IG (BLOCK (ALT '<='))) (RULE MAYOR (BLOCK (ALT '>'))) (RULE MENOR (BLOCK (ALT '<'))) (RULE MUL (BLOCK (ALT '*'))) (RULE DIV (BLOCK (ALT '/'))) (RULE ADD (BLOCK (ALT '+'))) (RULE SUB (BLOCK (ALT '-'))) (RULE PARIZQ (BLOCK (ALT '('))) (RULE PARDER (BLOCK (ALT ')'))) (RULE LLAVEIZQ (BLOCK (ALT '{'))) (RULE LLAVEDER (BLOCK (ALT '}'))) (RULE D_PTS (BLOCK (ALT ':'))) (RULE CORIZQ (BLOCK (ALT '['))) (RULE CORDER (BLOCK (ALT ']'))) (RULE COMA (BLOCK (ALT ','))) (RULE PUNTO (BLOCK (ALT '.'))) (RULE WHITESPACE (BLOCK (LEXER_ALT_ACTION (ALT (+ (BLOCK (ALT [ \\\r\n\t])))) skip))) (RULE COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '/*' (* (BLOCK (ALT .))) '*/') skip))) (RULE LINE_COMMENT (BLOCK (LEXER_ALT_ACTION (ALT '//' (* (BLOCK (ALT (~ (SET [\r\n])))))) skip))) (RULE ESC_SEQ (RULEMODIFIERS fragment) (BLOCK (ALT '\\' (SET '\\' '@' '[' ']' '.' '#' '+' '-' '!' ':' ' '))))))
2023-08-29 18:17:15:736 grammar LogManager.java:25 before: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT conversiones { $inst = $conversiones.conver }))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (BLOCK (ALT STRING) (ALT ID))) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }) (ALT VAR ID D_PTS types IG conversiones))) (RULE conversiones (returns interfaces.Instruction conver) (BLOCK (ALT INT PARIZQ expr PARDER { $conver = instructions.NewConversion($INT.line, $INT.pos, $expr.e) }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (BLOCK (ALT MUL) (ALT DIV))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT ADD) (ALT SUB))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MAY_IG) (ALT MAYOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT MEN_IG) (ALT MENOR))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (BLOCK (ALT IG_IG) (ALT DIF))) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, "Int") }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 18:17:15:754 grammar LogManager.java:25 after: (COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT conversiones { $inst = $conversiones.conver }))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }) (ALT VAR ID D_PTS types IG conversiones))) (RULE conversiones (returns interfaces.Instruction conver) (BLOCK (ALT INT PARIZQ expr PARDER { $conver = instructions.NewConversion($INT.line, $INT.pos, $expr.e) }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, "Int") }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 18:17:15:761 grammar LogManager.java:25 after extract implicit lexer =(COMBINED_GRAMMAR SwiftGrammar (OPTIONS (= tokenVocab SwiftLexer)) (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) (RULES (RULE s (returns []interface{} code) (BLOCK (ALT block EOF {   
        $code = $block.blk
    }))) (RULE block (returns []interface{} blk) (@ init {
    $blk = []interface{}{}
    var listInt []IInstructionContext
  }) (BLOCK (ALT (+ (BLOCK (ALT (+= ins instruction)))) {
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    }))) (RULE instruction (returns interfaces.Instruction inst) (BLOCK (ALT printstmt { $inst = $printstmt.prnt}) (ALT ifstmt { $inst = $ifstmt.ifinst }) (ALT declarationstmt { $inst = $declarationstmt.dec }) (ALT asignacion { $inst = $asignacion.asign}) (ALT whilestmt { $inst = $whilestmt.whiles }) (ALT forstmt { $inst = $forstmt.fors }) (ALT switchtmt { $inst = $switchtmt.swtch }) (ALT breaktmt { $inst = $breaktmt.break }) (ALT continuetmt { $inst = $continuetmt.continue }) (ALT conversiones { $inst = $conversiones.conver }))) (RULE breaktmt (returns interfaces.Instruction break) (BLOCK (ALT BREAK { $break = instructions.NewBreak($BREAK.line, $BREAK.pos)}))) (RULE continuetmt (returns interfaces.Instruction continue) (BLOCK (ALT CONTINUE { $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)}))) (RULE printstmt (returns interfaces.Instruction prnt) (BLOCK (ALT PRINT PARIZQ expr PARDER { $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)}))) (RULE forstmt (returns interfaces.Instruction fors) (BLOCK (ALT FOR ID IN (= e1 expr) PUNTO PUNTO PUNTO (= e2 expr) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) }) (ALT FOR ID IN (= ope (SET STRING ID)) LLAVEIZQ block LLAVEDER { $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) }))) (RULE switchtmt (returns interfaces.Instruction swtch) (BLOCK (ALT SWITCH expr LLAVEIZQ caselist DEFAULT D_PTS block LLAVEDER { $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) }))) (RULE caselist (returns []interface{} cases) (BLOCK (ALT (= listcases caselist) case { var arr3 []interface{}
                        arr3= append($listcases.cases, $case.swtch)
                        $cases= arr3
                        }) (ALT case {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        }))) (RULE case (returns interfaces.Instruction swtch) (BLOCK (ALT CASE expr D_PTS block { $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) }))) (RULE ifstmt (returns interfaces.Instruction ifinst) (BLOCK (ALT IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER ELSE LLAVEIZQ (= b2 block) LLAVEDER {$ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) }) (ALT IF expr LLAVEIZQ block LLAVEDER elseiflist { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) }) (ALT IF expr LLAVEIZQ (= b1 block) LLAVEDER elseiflist ELSE LLAVEIZQ (= b2 block) LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) }))) (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (= listif elseiflist) elseif {   var arr2 []interface{}
                        arr2 = append($listif.else_if_list, $elseif.ifinst)
                        $else_if_list = arr2
                    }) (ALT elseif {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            }))) (RULE elseif (returns interfaces.Instruction ifinst) (BLOCK (ALT ELSE IF expr LLAVEIZQ block LLAVEDER { $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) }))) (RULE whilestmt (returns interfaces.Instruction whiles) (BLOCK (ALT WHILE expr LLAVEIZQ block LLAVEDER { $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) }))) (RULE declarationstmt (returns interfaces.Instruction dec) (BLOCK (ALT VAR ID D_PTS types IG expr {
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    }) (ALT VAR ID D_PTS types IG conversiones))) (RULE conversiones (returns interfaces.Instruction conver) (BLOCK (ALT INT PARIZQ expr PARDER { $conver = instructions.NewConversion($INT.line, $INT.pos, $expr.e) }))) (RULE asignacion (returns interfaces.Instruction asign) (BLOCK (ALT ID IG expr { $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) }))) (RULE types (returns environment.TipoExpresion ty) (BLOCK (ALT INT { $ty = environment.INTEGER }) (ALT FLOAT { $ty = environment.FLOAT }) (ALT STR { $ty = environment.STRING }) (ALT BOOL { $ty = environment.BOOLEAN }) (ALT CORIZQ CORDER { $ty = environment.ARRAY }))) (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (= left expr) (= op (SET MUL DIV)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET ADD SUB)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MAY_IG MAYOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET MEN_IG MENOR)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op (SET IG_IG DIF)) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op AND) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT (= left expr) (= op OR) (= right expr) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT PARIZQ expr PARDER { $e = $expr.e }) (ALT (= list listArray) { $e = $list.p}) (ALT INT PARIZQ expr PARDER { $e = expressions.NewConversion($expr.e, "Int") }) (ALT CORIZQ listParams CORDER { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT NUMBER {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT STRING {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT TRU { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT FAL { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) }))) (RULE listParams (returns []interface{} l) (BLOCK (ALT (= list listParams) COMA expr {
                                var arr []interface{}
                                arr = append($list.l, $expr.e)
                                $l = arr
                            }) (ALT expr {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        }))) (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (= list listArray) CORIZQ expr CORDER { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }) (ALT ID { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})))))
2023-08-29 18:17:15:761 grammar LogManager.java:25 lexer =(LEXER_GRAMMAR SwiftGrammarLexer OPTIONS (@ header {
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"
}) RULES)
2023-08-29 18:17:15:802 left-recursion LogManager.java:25 caselist returns [[]interface{} cases]
    :   ( {} case<tokenIndex=287>                  {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> case<tokenIndex=281> { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }
        )*
    ;
2023-08-29 18:17:15:813 grammar LogManager.java:25 added: (RULE caselist (returns []interface{} cases) (BLOCK (ALT (BLOCK (ALT {} (case (ELEMENT_OPTIONS (= tokenIndex 287))) {
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (case (ELEMENT_OPTIONS (= tokenIndex 281))) { var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  }))))))
2023-08-29 18:17:15:814 left-recursion LogManager.java:25 elseiflist returns [[]interface{} else_if_list]
    :   ( {} elseif<tokenIndex=422>    {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> elseif<tokenIndex=416> {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }
        )*
    ;
2023-08-29 18:17:15:817 grammar LogManager.java:25 added: (RULE elseiflist (returns []interface{} else_if_list) (BLOCK (ALT (BLOCK (ALT {} (elseif (ELEMENT_OPTIONS (= tokenIndex 422))) {
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (elseif (ELEMENT_OPTIONS (= tokenIndex 416))) {   var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              }))))))
2023-08-29 18:17:15:824 left-recursion LogManager.java:25 expr returns [interfaces.Expression e]
    :   ( {} PARIZQ<tokenIndex=729> expr<tokenIndex=731> PARDER<tokenIndex=733> { $e = $expr.e } 
        | list=listArray<tokenIndex=741> { $e = $list.p} 
        | INT<tokenIndex=747> PARIZQ<tokenIndex=749> expr<tokenIndex=751> PARDER<tokenIndex=753> { $e = expressions.NewConversion($expr.e, "Int") } 
        | CORIZQ<tokenIndex=759> listParams<tokenIndex=761> CORDER<tokenIndex=763> { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) } 
        | NUMBER<tokenIndex=769>                             
    {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    } 
        | STRING<tokenIndex=775>
    {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    } 
        | TRU<tokenIndex=781> { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) } 
        | FAL<tokenIndex=787> { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 15)}?<p=15> op=(MUL<tokenIndex=604>|DIV<tokenIndex=606>) right=expr<tokenIndex=611,p=16> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 14)}?<p=14> op=(ADD<tokenIndex=624>|SUB<tokenIndex=626>) right=expr<tokenIndex=631,p=15> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 13)}?<p=13> op=(MAY_IG<tokenIndex=644>|MAYOR<tokenIndex=646>) right=expr<tokenIndex=651,p=14> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 12)}?<p=12> op=(MEN_IG<tokenIndex=664>|MENOR<tokenIndex=666>) right=expr<tokenIndex=671,p=13> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 11)}?<p=11> op=(IG_IG<tokenIndex=684>|DIF<tokenIndex=686>) right=expr<tokenIndex=691,p=12> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 10)}?<p=10> op=AND<tokenIndex=703> right=expr<tokenIndex=707,p=11> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
                  | {p.Precpred(p.GetParserRuleContext(), 9)}?<p=9> op=OR<tokenIndex=719> right=expr<tokenIndex=723,p=10> { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }
        )*
    ;
2023-08-29 18:17:15:847 grammar LogManager.java:25 added: (RULE expr (returns interfaces.Expression e) (BLOCK (ALT (BLOCK (ALT {} (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 729))) (expr (ELEMENT_OPTIONS (= tokenIndex 731))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 733))) { $e = $expr.e }) (ALT (= list (listArray (ELEMENT_OPTIONS (= tokenIndex 741)))) { $e = $list.p}) (ALT (INT (ELEMENT_OPTIONS (= tokenIndex 747))) (PARIZQ (ELEMENT_OPTIONS (= tokenIndex 749))) (expr (ELEMENT_OPTIONS (= tokenIndex 751))) (PARDER (ELEMENT_OPTIONS (= tokenIndex 753))) { $e = expressions.NewConversion($expr.e, "Int") }) (ALT (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 759))) (listParams (ELEMENT_OPTIONS (= tokenIndex 761))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 763))) { $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) }) (ALT (NUMBER (ELEMENT_OPTIONS (= tokenIndex 769))) {
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    }) (ALT (STRING (ELEMENT_OPTIONS (= tokenIndex 775))) {
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    }) (ALT (TRU (ELEMENT_OPTIONS (= tokenIndex 781))) { $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) }) (ALT (FAL (ELEMENT_OPTIONS (= tokenIndex 787))) { $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 15)}? (ELEMENT_OPTIONS (= p 15))) (= op (SET (MUL (ELEMENT_OPTIONS (= tokenIndex 604))) (DIV (ELEMENT_OPTIONS (= tokenIndex 606))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 611) (= p 16)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 14)}? (ELEMENT_OPTIONS (= p 14))) (= op (SET (ADD (ELEMENT_OPTIONS (= tokenIndex 624))) (SUB (ELEMENT_OPTIONS (= tokenIndex 626))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 631) (= p 15)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 13)}? (ELEMENT_OPTIONS (= p 13))) (= op (SET (MAY_IG (ELEMENT_OPTIONS (= tokenIndex 644))) (MAYOR (ELEMENT_OPTIONS (= tokenIndex 646))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 651) (= p 14)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 12)}? (ELEMENT_OPTIONS (= p 12))) (= op (SET (MEN_IG (ELEMENT_OPTIONS (= tokenIndex 664))) (MENOR (ELEMENT_OPTIONS (= tokenIndex 666))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 671) (= p 13)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 11)}? (ELEMENT_OPTIONS (= p 11))) (= op (SET (IG_IG (ELEMENT_OPTIONS (= tokenIndex 684))) (DIF (ELEMENT_OPTIONS (= tokenIndex 686))))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 691) (= p 12)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 10)}? (ELEMENT_OPTIONS (= p 10))) (= op (AND (ELEMENT_OPTIONS (= tokenIndex 703)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 707) (= p 11)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }) (ALT ({p.Precpred(p.GetParserRuleContext(), 9)}? (ELEMENT_OPTIONS (= p 9))) (= op (OR (ELEMENT_OPTIONS (= tokenIndex 719)))) (= right (expr (ELEMENT_OPTIONS (= tokenIndex 723) (= p 10)))) { $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) }))))))
2023-08-29 18:17:15:848 left-recursion LogManager.java:25 listParams returns [[]interface{} l]
    :   ( {} expr<tokenIndex=812> {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        } 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> COMA<tokenIndex=804> expr<tokenIndex=806> {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }
        )*
    ;
2023-08-29 18:17:15:852 grammar LogManager.java:25 added: (RULE listParams (returns []interface{} l) (BLOCK (ALT (BLOCK (ALT {} (expr (ELEMENT_OPTIONS (= tokenIndex 812))) {
            $l = []interface{}{}
            $l = append($l, $expr.e)
        })) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (COMA (ELEMENT_OPTIONS (= tokenIndex 804))) (expr (ELEMENT_OPTIONS (= tokenIndex 806))) {
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      }))))))
2023-08-29 18:17:15:853 left-recursion LogManager.java:25 listArray returns [interfaces.Expression p]
    :   ( {} ID<tokenIndex=841> { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)} 
        )
        (
          {p.Precpred(p.GetParserRuleContext(), 2)}?<p=2> CORIZQ<tokenIndex=831> expr<tokenIndex=833> CORDER<tokenIndex=835> { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }
        )*
    ;
2023-08-29 18:17:15:855 grammar LogManager.java:25 added: (RULE listArray (returns interfaces.Expression p) (BLOCK (ALT (BLOCK (ALT {} (ID (ELEMENT_OPTIONS (= tokenIndex 841))) { $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)})) (* (BLOCK (ALT ({p.Precpred(p.GetParserRuleContext(), 2)}? (ELEMENT_OPTIONS (= p 2))) (CORIZQ (ELEMENT_OPTIONS (= tokenIndex 831))) (expr (ELEMENT_OPTIONS (= tokenIndex 833))) (CORDER (ELEMENT_OPTIONS (= tokenIndex 835))) { $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) }))))))
2023-08-29 18:17:15:876 grammar LogManager.java:25 import INT=1
2023-08-29 18:17:15:876 grammar LogManager.java:25 import FLOAT=2
2023-08-29 18:17:15:876 grammar LogManager.java:25 import BOOL=3
2023-08-29 18:17:15:876 grammar LogManager.java:25 import STR=4
2023-08-29 18:17:15:876 grammar LogManager.java:25 import TRU=5
2023-08-29 18:17:15:876 grammar LogManager.java:25 import FAL=6
2023-08-29 18:17:15:877 grammar LogManager.java:25 import PRINT=7
2023-08-29 18:17:15:877 grammar LogManager.java:25 import IF=8
2023-08-29 18:17:15:877 grammar LogManager.java:25 import ELSE=9
2023-08-29 18:17:15:877 grammar LogManager.java:25 import WHILE=10
2023-08-29 18:17:15:878 grammar LogManager.java:25 import FOR=11
2023-08-29 18:17:15:878 grammar LogManager.java:25 import SWITCH=12
2023-08-29 18:17:15:878 grammar LogManager.java:25 import CASE=13
2023-08-29 18:17:15:878 grammar LogManager.java:25 import DEFAULT=14
2023-08-29 18:17:15:878 grammar LogManager.java:25 import IN=15
2023-08-29 18:17:15:878 grammar LogManager.java:25 import VAR=16
2023-08-29 18:17:15:879 grammar LogManager.java:25 import BREAK=17
2023-08-29 18:17:15:879 grammar LogManager.java:25 import CONTINUE=18
2023-08-29 18:17:15:879 grammar LogManager.java:25 import RETURN=19
2023-08-29 18:17:15:879 grammar LogManager.java:25 import NUMBER=20
2023-08-29 18:17:15:879 grammar LogManager.java:25 import STRING=21
2023-08-29 18:17:15:879 grammar LogManager.java:25 import ID=22
2023-08-29 18:17:15:879 grammar LogManager.java:25 import DIF=23
2023-08-29 18:17:15:879 grammar LogManager.java:25 import IG_IG=24
2023-08-29 18:17:15:879 grammar LogManager.java:25 import NOT=25
2023-08-29 18:17:15:879 grammar LogManager.java:25 import OR=26
2023-08-29 18:17:15:881 grammar LogManager.java:25 import AND=27
2023-08-29 18:17:15:881 grammar LogManager.java:25 import IG=28
2023-08-29 18:17:15:881 grammar LogManager.java:25 import MAY_IG=29
2023-08-29 18:17:15:881 grammar LogManager.java:25 import MEN_IG=30
2023-08-29 18:17:15:881 grammar LogManager.java:25 import MAYOR=31
2023-08-29 18:17:15:881 grammar LogManager.java:25 import MENOR=32
2023-08-29 18:17:15:881 grammar LogManager.java:25 import MUL=33
2023-08-29 18:17:15:881 grammar LogManager.java:25 import DIV=34
2023-08-29 18:17:15:881 grammar LogManager.java:25 import ADD=35
2023-08-29 18:17:15:881 grammar LogManager.java:25 import SUB=36
2023-08-29 18:17:15:882 grammar LogManager.java:25 import PARIZQ=37
2023-08-29 18:17:15:882 grammar LogManager.java:25 import PARDER=38
2023-08-29 18:17:15:882 grammar LogManager.java:25 import LLAVEIZQ=39
2023-08-29 18:17:15:882 grammar LogManager.java:25 import LLAVEDER=40
2023-08-29 18:17:15:882 grammar LogManager.java:25 import D_PTS=41
2023-08-29 18:17:15:882 grammar LogManager.java:25 import CORIZQ=42
2023-08-29 18:17:15:882 grammar LogManager.java:25 import CORDER=43
2023-08-29 18:17:15:882 grammar LogManager.java:25 import COMA=44
2023-08-29 18:17:15:883 grammar LogManager.java:25 import PUNTO=45
2023-08-29 18:17:15:883 grammar LogManager.java:25 import WHITESPACE=46
2023-08-29 18:17:15:883 grammar LogManager.java:25 import COMMENT=47
2023-08-29 18:17:15:883 grammar LogManager.java:25 import LINE_COMMENT=48
2023-08-29 18:17:15:883 grammar LogManager.java:25 import 'Int'=1
2023-08-29 18:17:15:884 grammar LogManager.java:25 import 'Float'=2
2023-08-29 18:17:15:884 grammar LogManager.java:25 import 'Bool'=3
2023-08-29 18:17:15:884 grammar LogManager.java:25 import 'String'=4
2023-08-29 18:17:15:884 grammar LogManager.java:25 import 'true'=5
2023-08-29 18:17:15:885 grammar LogManager.java:25 import 'false'=6
2023-08-29 18:17:15:885 grammar LogManager.java:25 import 'print'=7
2023-08-29 18:17:15:885 grammar LogManager.java:25 import 'if'=8
2023-08-29 18:17:15:885 grammar LogManager.java:25 import 'else'=9
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'while'=10
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'for'=11
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'switch'=12
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'case'=13
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'default'=14
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'in'=15
2023-08-29 18:17:15:886 grammar LogManager.java:25 import 'var'=16
2023-08-29 18:17:15:887 grammar LogManager.java:25 import 'break'=17
2023-08-29 18:17:15:887 grammar LogManager.java:25 import 'continue'=18
2023-08-29 18:17:15:887 grammar LogManager.java:25 import 'return'=19
2023-08-29 18:17:15:887 grammar LogManager.java:25 import '!='=23
2023-08-29 18:17:15:888 grammar LogManager.java:25 import '=='=24
2023-08-29 18:17:15:888 grammar LogManager.java:25 import '!'=25
2023-08-29 18:17:15:888 grammar LogManager.java:25 import '||'=26
2023-08-29 18:17:15:888 grammar LogManager.java:25 import '&&'=27
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '='=28
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '>='=29
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '<='=30
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '>'=31
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '<'=32
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '*'=33
2023-08-29 18:17:15:889 grammar LogManager.java:25 import '/'=34
2023-08-29 18:17:15:890 grammar LogManager.java:25 import '+'=35
2023-08-29 18:17:15:890 grammar LogManager.java:25 import '-'=36
2023-08-29 18:17:15:890 grammar LogManager.java:25 import '('=37
2023-08-29 18:17:15:890 grammar LogManager.java:25 import ')'=38
2023-08-29 18:17:15:890 grammar LogManager.java:25 import '{'=39
2023-08-29 18:17:15:891 grammar LogManager.java:25 import '}'=40
2023-08-29 18:17:15:891 grammar LogManager.java:25 import ':'=41
2023-08-29 18:17:15:891 grammar LogManager.java:25 import '['=42
2023-08-29 18:17:15:891 grammar LogManager.java:25 import ']'=43
2023-08-29 18:17:15:891 grammar LogManager.java:25 import ','=44
2023-08-29 18:17:15:892 grammar LogManager.java:25 import '.'=45
2023-08-29 18:17:15:892 grammar LogManager.java:25 tokens={INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, BREAK=17, CONTINUE=18, RETURN=19, NUMBER=20, STRING=21, ID=22, DIF=23, IG_IG=24, NOT=25, OR=26, AND=27, IG=28, MAY_IG=29, MEN_IG=30, MAYOR=31, MENOR=32, MUL=33, DIV=34, ADD=35, SUB=36, PARIZQ=37, PARDER=38, LLAVEIZQ=39, LLAVEDER=40, D_PTS=41, CORIZQ=42, CORDER=43, COMA=44, PUNTO=45, WHITESPACE=46, COMMENT=47, LINE_COMMENT=48, 'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'break'=17, 'continue'=18, 'return'=19, '!='=23, '=='=24, '!'=25, '||'=26, '&&'=27, '='=28, '>='=29, '<='=30, '>'=31, '<'=32, '*'=33, '/'=34, '+'=35, '-'=36, '('=37, ')'=38, '{'=39, '}'=40, ':'=41, '['=42, ']'=43, ','=44, '.'=45}
2023-08-29 18:17:15:893 semantics LogManager.java:25 tokens={EOF=-1, INT=1, FLOAT=2, BOOL=3, STR=4, TRU=5, FAL=6, PRINT=7, IF=8, ELSE=9, WHILE=10, FOR=11, SWITCH=12, CASE=13, DEFAULT=14, IN=15, VAR=16, BREAK=17, CONTINUE=18, RETURN=19, NUMBER=20, STRING=21, ID=22, DIF=23, IG_IG=24, NOT=25, OR=26, AND=27, IG=28, MAY_IG=29, MEN_IG=30, MAYOR=31, MENOR=32, MUL=33, DIV=34, ADD=35, SUB=36, PARIZQ=37, PARDER=38, LLAVEIZQ=39, LLAVEDER=40, D_PTS=41, CORIZQ=42, CORDER=43, COMA=44, PUNTO=45, WHITESPACE=46, COMMENT=47, LINE_COMMENT=48}
2023-08-29 18:17:15:893 semantics LogManager.java:25 strings={'Int'=1, 'Float'=2, 'Bool'=3, 'String'=4, 'true'=5, 'false'=6, 'print'=7, 'if'=8, 'else'=9, 'while'=10, 'for'=11, 'switch'=12, 'case'=13, 'default'=14, 'in'=15, 'var'=16, 'break'=17, 'continue'=18, 'return'=19, '!='=23, '=='=24, '!'=25, '||'=26, '&&'=27, '='=28, '>='=29, '<='=30, '>'=31, '<'=32, '*'=33, '/'=34, '+'=35, '-'=36, '('=37, ')'=38, '{'=39, '}'=40, ':'=41, '['=42, ']'=43, ','=44, '.'=45}
2023-08-29 18:17:15:950 LL1 LogManager.java:25 
DECISION 0 in rule block
2023-08-29 18:17:15:952 LL1 LogManager.java:25 look=[{1, 7..8, 10..12, 16..18, 22}, null]
2023-08-29 18:17:15:952 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:952 LL1 LogManager.java:25 
DECISION 1 in rule instruction
2023-08-29 18:17:15:953 LL1 LogManager.java:25 look=[7, 8, 16, 22, 10, 11, 12, 17, 18, 1]
2023-08-29 18:17:15:953 LL1 LogManager.java:25 LL(1)? true
2023-08-29 18:17:15:953 LL1 LogManager.java:25 
DECISION 2 in rule forstmt
2023-08-29 18:17:15:953 LL1 LogManager.java:25 look=[11, 11]
2023-08-29 18:17:15:953 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:953 LL1 LogManager.java:25 
DECISION 3 in rule caselist
2023-08-29 18:17:15:953 LL1 LogManager.java:25 look=[null, 14]
2023-08-29 18:17:15:953 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:954 LL1 LogManager.java:25 
DECISION 4 in rule ifstmt
2023-08-29 18:17:15:954 LL1 LogManager.java:25 look=[8, 8, 8, 8]
2023-08-29 18:17:15:954 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:954 LL1 LogManager.java:25 
DECISION 5 in rule elseiflist
2023-08-29 18:17:15:956 LL1 LogManager.java:25 look=[null, null]
2023-08-29 18:17:15:956 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:956 LL1 LogManager.java:25 
DECISION 6 in rule declarationstmt
2023-08-29 18:17:15:956 LL1 LogManager.java:25 look=[16, 16]
2023-08-29 18:17:15:956 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:956 LL1 LogManager.java:25 
DECISION 7 in rule types
2023-08-29 18:17:15:956 LL1 LogManager.java:25 look=[1, 2, 4, 3, 42]
2023-08-29 18:17:15:956 LL1 LogManager.java:25 LL(1)? true
2023-08-29 18:17:15:956 LL1 LogManager.java:25 
DECISION 8 in rule expr
2023-08-29 18:17:15:956 LL1 LogManager.java:25 look=[37, 22, 1, 42, 20, 21, 5, 6]
2023-08-29 18:17:15:956 LL1 LogManager.java:25 LL(1)? true
2023-08-29 18:17:15:956 LL1 LogManager.java:25 
DECISION 9 in rule expr
2023-08-29 18:17:15:956 LL1 LogManager.java:25 look=[null, null, null, null, null, null, null]
2023-08-29 18:17:15:956 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:956 LL1 LogManager.java:25 
DECISION 10 in rule expr
2023-08-29 18:17:15:957 LL1 LogManager.java:25 look=[null, null]
2023-08-29 18:17:15:957 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:958 LL1 LogManager.java:25 
DECISION 11 in rule listParams
2023-08-29 18:17:15:958 LL1 LogManager.java:25 look=[null, 43]
2023-08-29 18:17:15:958 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:958 LL1 LogManager.java:25 
DECISION 12 in rule listArray
2023-08-29 18:17:15:958 LL1 LogManager.java:25 look=[null, null]
2023-08-29 18:17:15:958 LL1 LogManager.java:25 LL(1)? false
2023-08-29 18:17:15:969 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 18:17:15:991 action-translator LogManager.java:25 translate    
        $code = $block.blk
    
2023-08-29 18:17:15:992 action-translator LogManager.java:25 attr [@-1,13:16='code',<0>,20:9]
2023-08-29 18:17:15:993 action-translator LogManager.java:25 qattr [@-1,21:25='block',<0>,20:17].[@-1,27:29='blk',<0>,20:23]
2023-08-29 18:17:15:995 action-translator LogManager.java:25 translate 
    $blk = []interface{}{}
    var listInt []IInstructionContext
  
2023-08-29 18:17:15:995 action-translator LogManager.java:25 attr [@-1,6:8='blk',<0>,26:5]
2023-08-29 18:17:15:998 action-translator LogManager.java:25 translate 
        listInt = localctx.(*BlockContext).GetIns()
        for _, e := range listInt {
            $blk = append($blk, e.GetInst())
        }
    
2023-08-29 18:17:15:998 action-translator LogManager.java:25 attr [@-1,102:104='blk',<0>,33:13]
2023-08-29 18:17:15:999 action-translator LogManager.java:25 attr [@-1,116:118='blk',<0>,33:27]
2023-08-29 18:17:16:001 action-translator LogManager.java:25 translate  $inst = $printstmt.prnt
2023-08-29 18:17:16:001 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,39:14]
2023-08-29 18:17:16:002 action-translator LogManager.java:25 qattr [@-1,10:18='printstmt',<0>,39:22].[@-1,20:23='prnt',<0>,39:32]
2023-08-29 18:17:16:002 action-translator LogManager.java:25 translate  $inst = $ifstmt.ifinst 
2023-08-29 18:17:16:003 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,40:11]
2023-08-29 18:17:16:003 action-translator LogManager.java:25 qattr [@-1,10:15='ifstmt',<0>,40:19].[@-1,17:22='ifinst',<0>,40:26]
2023-08-29 18:17:16:004 action-translator LogManager.java:25 translate  $inst = $declarationstmt.dec 
2023-08-29 18:17:16:004 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,41:20]
2023-08-29 18:17:16:004 action-translator LogManager.java:25 qattr [@-1,10:24='declarationstmt',<0>,41:28].[@-1,26:28='dec',<0>,41:44]
2023-08-29 18:17:16:004 action-translator LogManager.java:25 translate  $inst = $asignacion.asign
2023-08-29 18:17:16:005 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,42:15]
2023-08-29 18:17:16:005 action-translator LogManager.java:25 qattr [@-1,10:19='asignacion',<0>,42:23].[@-1,21:25='asign',<0>,42:34]
2023-08-29 18:17:16:005 action-translator LogManager.java:25 translate  $inst = $whilestmt.whiles 
2023-08-29 18:17:16:006 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,43:14]
2023-08-29 18:17:16:006 action-translator LogManager.java:25 qattr [@-1,10:18='whilestmt',<0>,43:22].[@-1,20:25='whiles',<0>,43:32]
2023-08-29 18:17:16:007 action-translator LogManager.java:25 translate  $inst = $forstmt.fors 
2023-08-29 18:17:16:007 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,44:12]
2023-08-29 18:17:16:008 action-translator LogManager.java:25 qattr [@-1,10:16='forstmt',<0>,44:20].[@-1,18:21='fors',<0>,44:28]
2023-08-29 18:17:16:008 action-translator LogManager.java:25 translate  $inst = $switchtmt.swtch 
2023-08-29 18:17:16:009 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,45:14]
2023-08-29 18:17:16:009 action-translator LogManager.java:25 qattr [@-1,10:18='switchtmt',<0>,45:22].[@-1,20:24='swtch',<0>,45:32]
2023-08-29 18:17:16:009 action-translator LogManager.java:25 translate  $inst = $breaktmt.break 
2023-08-29 18:17:16:009 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,46:13]
2023-08-29 18:17:16:009 action-translator LogManager.java:25 qattr [@-1,10:17='breaktmt',<0>,46:21].[@-1,19:23='break',<0>,46:30]
2023-08-29 18:17:16:009 action-translator LogManager.java:25 translate  $inst = $continuetmt.continue 
2023-08-29 18:17:16:009 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,47:15]
2023-08-29 18:17:16:011 action-translator LogManager.java:25 qattr [@-1,10:20='continuetmt',<0>,47:23].[@-1,22:29='continue',<0>,47:35]
2023-08-29 18:17:16:011 action-translator LogManager.java:25 translate  $inst = $conversiones.conver 
2023-08-29 18:17:16:011 action-translator LogManager.java:25 attr [@-1,2:5='inst',<0>,48:17]
2023-08-29 18:17:16:012 action-translator LogManager.java:25 qattr [@-1,10:21='conversiones',<0>,48:25].[@-1,23:28='conver',<0>,48:38]
2023-08-29 18:17:16:014 action-translator LogManager.java:25 translate  $break = instructions.NewBreak($BREAK.line, $BREAK.pos)
2023-08-29 18:17:16:014 action-translator LogManager.java:25 attr [@-1,2:6='break',<0>,52:10]
2023-08-29 18:17:16:014 action-translator LogManager.java:25 qattr [@-1,33:37='BREAK',<0>,52:41].[@-1,39:42='line',<0>,52:47]
2023-08-29 18:17:16:017 action-translator LogManager.java:25 qattr [@-1,46:50='BREAK',<0>,52:54].[@-1,52:54='pos',<0>,52:60]
2023-08-29 18:17:16:019 action-translator LogManager.java:25 translate  $continue = instructions.NewContinue($CONTINUE.line, $CONTINUE.pos)
2023-08-29 18:17:16:019 action-translator LogManager.java:25 attr [@-1,2:9='continue',<0>,56:13]
2023-08-29 18:17:16:019 action-translator LogManager.java:25 qattr [@-1,39:46='CONTINUE',<0>,56:50].[@-1,48:51='line',<0>,56:59]
2023-08-29 18:17:16:020 action-translator LogManager.java:25 qattr [@-1,55:62='CONTINUE',<0>,56:66].[@-1,64:66='pos',<0>,56:75]
2023-08-29 18:17:16:021 action-translator LogManager.java:25 translate  $prnt = instructions.NewPrint($PRINT.line,$PRINT.pos,$expr.e)
2023-08-29 18:17:16:021 action-translator LogManager.java:25 attr [@-1,2:5='prnt',<0>,60:29]
2023-08-29 18:17:16:021 action-translator LogManager.java:25 qattr [@-1,32:36='PRINT',<0>,60:59].[@-1,38:41='line',<0>,60:65]
2023-08-29 18:17:16:021 action-translator LogManager.java:25 qattr [@-1,44:48='PRINT',<0>,60:71].[@-1,50:52='pos',<0>,60:77]
2023-08-29 18:17:16:022 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,60:82].[@-1,60:60='e',<0>,60:87]
2023-08-29 18:17:16:026 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, $e1.e,$e2.e,"nil", $block.blk) 
2023-08-29 18:17:16:026 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,66:74]
2023-08-29 18:17:16:026 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,66:102].[@-1,34:37='line',<0>,66:106]
2023-08-29 18:17:16:026 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,66:113].[@-1,45:47='pos',<0>,66:117]
2023-08-29 18:17:16:026 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,66:123].[@-1,54:57='text',<0>,66:126]
2023-08-29 18:17:16:027 action-translator LogManager.java:25 qattr [@-1,61:62='e1',<0>,66:133].[@-1,64:64='e',<0>,66:136]
2023-08-29 18:17:16:027 action-translator LogManager.java:25 qattr [@-1,67:68='e2',<0>,66:139].[@-1,70:70='e',<0>,66:142]
2023-08-29 18:17:16:027 action-translator LogManager.java:25 qattr [@-1,80:84='block',<0>,66:152].[@-1,86:88='blk',<0>,66:158]
2023-08-29 18:17:16:031 action-translator LogManager.java:25 translate  $fors = instructions.NewFor($FOR.line, $FOR.pos, $ID.text, nil,nil, $ope.text ,$block.blk ) 
2023-08-29 18:17:16:031 action-translator LogManager.java:25 attr [@-1,2:5='fors',<0>,67:56]
2023-08-29 18:17:16:031 action-translator LogManager.java:25 qattr [@-1,30:32='FOR',<0>,67:84].[@-1,34:37='line',<0>,67:88]
2023-08-29 18:17:16:032 action-translator LogManager.java:25 qattr [@-1,41:43='FOR',<0>,67:95].[@-1,45:47='pos',<0>,67:99]
2023-08-29 18:17:16:032 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,67:105].[@-1,54:57='text',<0>,67:108]
2023-08-29 18:17:16:033 action-translator LogManager.java:25 qattr [@-1,70:72='ope',<0>,67:124].[@-1,74:77='text',<0>,67:128]
2023-08-29 18:17:16:033 action-translator LogManager.java:25 qattr [@-1,81:85='block',<0>,67:135].[@-1,87:89='blk',<0>,67:141]
2023-08-29 18:17:16:035 action-translator LogManager.java:25 translate  $swtch = instructions.NewSwitch( $SWITCH.line, $SWITCH.pos, $expr.e,$caselist.cases, $block.blk ) 
2023-08-29 18:17:16:035 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,71:64]
2023-08-29 18:17:16:035 action-translator LogManager.java:25 qattr [@-1,35:40='SWITCH',<0>,71:97].[@-1,42:45='line',<0>,71:104]
2023-08-29 18:17:16:035 action-translator LogManager.java:25 qattr [@-1,49:54='SWITCH',<0>,71:111].[@-1,56:58='pos',<0>,71:118]
2023-08-29 18:17:16:036 action-translator LogManager.java:25 qattr [@-1,62:65='expr',<0>,71:124].[@-1,67:67='e',<0>,71:129]
2023-08-29 18:17:16:036 action-translator LogManager.java:25 qattr [@-1,70:77='caselist',<0>,71:132].[@-1,79:83='cases',<0>,71:141]
2023-08-29 18:17:16:037 action-translator LogManager.java:25 qattr [@-1,87:91='block',<0>,71:149].[@-1,93:95='blk',<0>,71:155]
2023-08-29 18:17:16:039 action-translator LogManager.java:25 translate 
2023-08-29 18:17:16:040 action-translator LogManager.java:25 translate 
                            $cases= []interface{}{}
                            $cases = append($cases, $case.swtch)
                        
2023-08-29 18:17:16:040 action-translator LogManager.java:25 attr [@-1,31:35='cases',<0>,3:29]
2023-08-29 18:17:16:040 action-translator LogManager.java:25 attr [@-1,84:88='cases',<0>,4:29]
2023-08-29 18:17:16:040 action-translator LogManager.java:25 attr [@-1,100:104='cases',<0>,4:45]
2023-08-29 18:17:16:040 action-translator LogManager.java:25 qattr [@-1,108:111='case',<0>,4:53].[@-1,113:117='swtch',<0>,4:58]
2023-08-29 18:17:16:041 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:042 action-translator LogManager.java:25 translate  var arr3 []interface{}
                                  arr3= append($listcases.cases, $case.swtch)
                                  $cases= arr3
                                  
2023-08-29 18:17:16:042 action-translator LogManager.java:25 qattr [@-1,73:81='listcases',<0>,9:48].[@-1,83:87='cases',<0>,9:58]
2023-08-29 18:17:16:042 action-translator LogManager.java:25 qattr [@-1,91:94='case',<0>,9:66].[@-1,96:100='swtch',<0>,9:71]
2023-08-29 18:17:16:042 action-translator LogManager.java:25 attr [@-1,139:143='cases',<0>,10:35]
2023-08-29 18:17:16:044 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:045 action-translator LogManager.java:25 translate  $swtch = instructions.NewCase( $CASE.line, $CASE.pos,$expr.e, $block.blk ) 
2023-08-29 18:17:16:045 action-translator LogManager.java:25 attr [@-1,2:6='swtch',<0>,86:26]
2023-08-29 18:17:16:046 action-translator LogManager.java:25 qattr [@-1,33:36='CASE',<0>,86:57].[@-1,38:41='line',<0>,86:62]
2023-08-29 18:17:16:046 action-translator LogManager.java:25 qattr [@-1,45:48='CASE',<0>,86:69].[@-1,50:52='pos',<0>,86:74]
2023-08-29 18:17:16:047 action-translator LogManager.java:25 qattr [@-1,55:58='expr',<0>,86:79].[@-1,60:60='e',<0>,86:84]
2023-08-29 18:17:16:047 action-translator LogManager.java:25 qattr [@-1,64:68='block',<0>,86:88].[@-1,70:72='blk',<0>,86:94]
2023-08-29 18:17:16:052 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-29 18:17:16:052 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,90:36]
2023-08-29 18:17:16:052 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,90:65].[@-1,34:37='line',<0>,90:68]
2023-08-29 18:17:16:052 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,90:75].[@-1,44:46='pos',<0>,90:78]
2023-08-29 18:17:16:053 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,90:84].[@-1,55:55='e',<0>,90:89]
2023-08-29 18:17:16:053 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,90:93].[@-1,65:67='blk',<0>,90:99]
2023-08-29 18:17:16:055 action-translator LogManager.java:25 translate $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, nil, $b2.blk) 
2023-08-29 18:17:16:055 action-translator LogManager.java:25 attr [@-1,1:6='ifinst',<0>,91:69]
2023-08-29 18:17:16:055 action-translator LogManager.java:25 qattr [@-1,30:31='IF',<0>,91:98].[@-1,33:36='line',<0>,91:101]
2023-08-29 18:17:16:055 action-translator LogManager.java:25 qattr [@-1,40:41='IF',<0>,91:108].[@-1,43:45='pos',<0>,91:111]
2023-08-29 18:17:16:056 action-translator LogManager.java:25 qattr [@-1,49:52='expr',<0>,91:117].[@-1,54:54='e',<0>,91:122]
2023-08-29 18:17:16:056 action-translator LogManager.java:25 qattr [@-1,58:59='b1',<0>,91:126].[@-1,61:63='blk',<0>,91:129]
2023-08-29 18:17:16:056 action-translator LogManager.java:25 qattr [@-1,72:73='b2',<0>,91:140].[@-1,75:77='blk',<0>,91:143]
2023-08-29 18:17:16:057 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, $elseiflist.else_if_list, nil) 
2023-08-29 18:17:16:057 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,92:47]
2023-08-29 18:17:16:058 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,92:76].[@-1,34:37='line',<0>,92:79]
2023-08-29 18:17:16:058 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,92:86].[@-1,44:46='pos',<0>,92:89]
2023-08-29 18:17:16:059 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,92:95].[@-1,55:55='e',<0>,92:100]
2023-08-29 18:17:16:059 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,92:104].[@-1,65:67='blk',<0>,92:110]
2023-08-29 18:17:16:060 action-translator LogManager.java:25 qattr [@-1,71:80='elseiflist',<0>,92:116].[@-1,82:93='else_if_list',<0>,92:127]
2023-08-29 18:17:16:061 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $b1.blk, $elseiflist.else_if_list, $b2.blk) 
2023-08-29 18:17:16:061 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,93:82]
2023-08-29 18:17:16:062 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,93:111].[@-1,34:37='line',<0>,93:114]
2023-08-29 18:17:16:062 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,93:121].[@-1,44:46='pos',<0>,93:124]
2023-08-29 18:17:16:062 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,93:130].[@-1,55:55='e',<0>,93:135]
2023-08-29 18:17:16:063 action-translator LogManager.java:25 qattr [@-1,59:60='b1',<0>,93:139].[@-1,62:64='blk',<0>,93:142]
2023-08-29 18:17:16:063 action-translator LogManager.java:25 qattr [@-1,68:77='elseiflist',<0>,93:148].[@-1,79:90='else_if_list',<0>,93:159]
2023-08-29 18:17:16:063 action-translator LogManager.java:25 qattr [@-1,94:95='b2',<0>,93:174].[@-1,97:99='blk',<0>,93:177]
2023-08-29 18:17:16:064 action-translator LogManager.java:25 translate 
2023-08-29 18:17:16:065 action-translator LogManager.java:25 translate 
                $else_if_list = []interface{}{}
                $else_if_list = append($else_if_list, $elseif.ifinst)

            
2023-08-29 18:17:16:065 action-translator LogManager.java:25 attr [@-1,19:30='else_if_list',<0>,3:17]
2023-08-29 18:17:16:065 action-translator LogManager.java:25 attr [@-1,68:79='else_if_list',<0>,4:17]
2023-08-29 18:17:16:066 action-translator LogManager.java:25 attr [@-1,91:102='else_if_list',<0>,4:40]
2023-08-29 18:17:16:066 action-translator LogManager.java:25 qattr [@-1,106:111='elseif',<0>,4:55].[@-1,113:118='ifinst',<0>,4:62]
2023-08-29 18:17:16:067 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:067 action-translator LogManager.java:25 translate    var arr2 []interface{}
                                  arr2 = append($listif.else_if_list, $elseif.ifinst)
                                  $else_if_list = arr2
                              
2023-08-29 18:17:16:068 action-translator LogManager.java:25 qattr [@-1,76:81='listif',<0>,10:49].[@-1,83:94='else_if_list',<0>,10:56]
2023-08-29 18:17:16:068 action-translator LogManager.java:25 qattr [@-1,98:103='elseif',<0>,10:71].[@-1,105:110='ifinst',<0>,10:78]
2023-08-29 18:17:16:069 action-translator LogManager.java:25 attr [@-1,149:160='else_if_list',<0>,11:35]
2023-08-29 18:17:16:069 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:071 action-translator LogManager.java:25 translate  $ifinst = instructions.NewIf($IF.line, $IF.pos, $expr.e, $block.blk, nil, nil) 
2023-08-29 18:17:16:071 action-translator LogManager.java:25 attr [@-1,2:7='ifinst',<0>,110:41]
2023-08-29 18:17:16:071 action-translator LogManager.java:25 qattr [@-1,31:32='IF',<0>,110:70].[@-1,34:37='line',<0>,110:73]
2023-08-29 18:17:16:072 action-translator LogManager.java:25 qattr [@-1,41:42='IF',<0>,110:80].[@-1,44:46='pos',<0>,110:83]
2023-08-29 18:17:16:072 action-translator LogManager.java:25 qattr [@-1,50:53='expr',<0>,110:89].[@-1,55:55='e',<0>,110:94]
2023-08-29 18:17:16:072 action-translator LogManager.java:25 qattr [@-1,59:63='block',<0>,110:98].[@-1,65:67='blk',<0>,110:104]
2023-08-29 18:17:16:073 action-translator LogManager.java:25 translate  $whiles =instructions.NewWhiles($WHILE.line, $WHILE.pos, $expr.e, $block.blk) 
2023-08-29 18:17:16:074 action-translator LogManager.java:25 attr [@-1,2:7='whiles',<0>,115:39]
2023-08-29 18:17:16:074 action-translator LogManager.java:25 qattr [@-1,34:38='WHILE',<0>,115:71].[@-1,40:43='line',<0>,115:77]
2023-08-29 18:17:16:074 action-translator LogManager.java:25 qattr [@-1,47:51='WHILE',<0>,115:84].[@-1,53:55='pos',<0>,115:90]
2023-08-29 18:17:16:074 action-translator LogManager.java:25 qattr [@-1,59:62='expr',<0>,115:96].[@-1,64:64='e',<0>,115:101]
2023-08-29 18:17:16:074 action-translator LogManager.java:25 qattr [@-1,68:72='block',<0>,115:105].[@-1,74:76='blk',<0>,115:111]
2023-08-29 18:17:16:076 action-translator LogManager.java:25 translate 
        $dec = instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e);
    
2023-08-29 18:17:16:077 action-translator LogManager.java:25 setAttr [@-1,10:12='dec',<0>,121:9] [@-1,15:93=' instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)',<0>,121:14]
2023-08-29 18:17:16:077 action-translator LogManager.java:25 translate  instructions.NewDeclaration($VAR.line, $VAR.pos, $ID.text, $types.ty, $expr.e)
2023-08-29 18:17:16:078 action-translator LogManager.java:25 qattr [@-1,30:32='VAR',<0>,120:34].[@-1,34:37='line',<0>,120:38]
2023-08-29 18:17:16:078 action-translator LogManager.java:25 qattr [@-1,41:43='VAR',<0>,120:45].[@-1,45:47='pos',<0>,120:49]
2023-08-29 18:17:16:078 action-translator LogManager.java:25 qattr [@-1,51:52='ID',<0>,120:55].[@-1,54:57='text',<0>,120:58]
2023-08-29 18:17:16:079 action-translator LogManager.java:25 qattr [@-1,61:65='types',<0>,120:65].[@-1,67:68='ty',<0>,120:71]
2023-08-29 18:17:16:079 action-translator LogManager.java:25 qattr [@-1,72:75='expr',<0>,120:76].[@-1,77:77='e',<0>,120:81]
2023-08-29 18:17:16:081 action-translator LogManager.java:25 translate  $conver = instructions.NewConversion($INT.line, $INT.pos, $expr.e) 
2023-08-29 18:17:16:081 action-translator LogManager.java:25 attr [@-1,2:7='conver',<0>,127:27]
2023-08-29 18:17:16:081 action-translator LogManager.java:25 qattr [@-1,39:41='INT',<0>,127:64].[@-1,43:46='line',<0>,127:68]
2023-08-29 18:17:16:081 action-translator LogManager.java:25 qattr [@-1,50:52='INT',<0>,127:75].[@-1,54:56='pos',<0>,127:79]
2023-08-29 18:17:16:081 action-translator LogManager.java:25 qattr [@-1,60:63='expr',<0>,127:85].[@-1,65:65='e',<0>,127:90]
2023-08-29 18:17:16:082 action-translator LogManager.java:25 translate  $asign = instructions.NewAsignacion($ID.line ,$ID.pos ,$ID.text, $expr.e) 
2023-08-29 18:17:16:082 action-translator LogManager.java:25 attr [@-1,2:6='asign',<0>,133:15]
2023-08-29 18:17:16:083 action-translator LogManager.java:25 qattr [@-1,38:39='ID',<0>,133:51].[@-1,41:44='line',<0>,133:54]
2023-08-29 18:17:16:083 action-translator LogManager.java:25 qattr [@-1,48:49='ID',<0>,133:61].[@-1,51:53='pos',<0>,133:64]
2023-08-29 18:17:16:083 action-translator LogManager.java:25 qattr [@-1,57:58='ID',<0>,133:70].[@-1,60:63='text',<0>,133:73]
2023-08-29 18:17:16:084 action-translator LogManager.java:25 qattr [@-1,67:70='expr',<0>,133:80].[@-1,72:72='e',<0>,133:85]
2023-08-29 18:17:16:085 action-translator LogManager.java:25 translate  $ty = environment.INTEGER 
2023-08-29 18:17:16:085 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,139:8]
2023-08-29 18:17:16:085 action-translator LogManager.java:25 translate  $ty = environment.FLOAT 
2023-08-29 18:17:16:086 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,140:10]
2023-08-29 18:17:16:087 action-translator LogManager.java:25 translate  $ty = environment.STRING 
2023-08-29 18:17:16:087 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,141:8]
2023-08-29 18:17:16:087 action-translator LogManager.java:25 translate  $ty = environment.BOOLEAN 
2023-08-29 18:17:16:087 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,142:9]
2023-08-29 18:17:16:088 action-translator LogManager.java:25 translate  $ty = environment.ARRAY 
2023-08-29 18:17:16:088 action-translator LogManager.java:25 attr [@-1,2:3='ty',<0>,143:18]
2023-08-29 18:17:16:092 action-translator LogManager.java:25 translate 
2023-08-29 18:17:16:092 action-translator LogManager.java:25 translate  $e = $expr.e 
2023-08-29 18:17:16:092 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,2:82]
2023-08-29 18:17:16:092 action-translator LogManager.java:25 qattr [@-1,7:10='expr',<0>,2:87].[@-1,12:12='e',<0>,2:92]
2023-08-29 18:17:16:093 action-translator LogManager.java:25 translate  $e = $list.p
2023-08-29 18:17:16:093 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,3:43]
2023-08-29 18:17:16:093 action-translator LogManager.java:25 qattr [@-1,7:10='list',<0>,3:48].[@-1,12:12='p',<0>,3:53]
2023-08-29 18:17:16:094 action-translator LogManager.java:25 translate  $e = expressions.NewConversion($expr.e, "Int") 
2023-08-29 18:17:16:094 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,4:99]
2023-08-29 18:17:16:094 action-translator LogManager.java:25 qattr [@-1,33:36='expr',<0>,4:130].[@-1,38:38='e',<0>,4:135]
2023-08-29 18:17:16:094 action-translator LogManager.java:25 translate  $e = expressions.NewArray($CORIZQ.line, $CORIZQ.pos, $listParams.l) 
2023-08-29 18:17:16:094 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,5:85]
2023-08-29 18:17:16:094 action-translator LogManager.java:25 qattr [@-1,28:33='CORIZQ',<0>,5:111].[@-1,35:38='line',<0>,5:118]
2023-08-29 18:17:16:095 action-translator LogManager.java:25 qattr [@-1,42:47='CORIZQ',<0>,5:125].[@-1,49:51='pos',<0>,5:132]
2023-08-29 18:17:16:095 action-translator LogManager.java:25 qattr [@-1,55:64='listParams',<0>,5:138].[@-1,66:66='l',<0>,5:149]
2023-08-29 18:17:16:095 action-translator LogManager.java:25 translate 
        if (strings.Contains($NUMBER.text,".")){
            num,err := strconv.ParseFloat($NUMBER.text, 64);
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.FLOAT)
        }else{
            num,err := strconv.Atoi($NUMBER.text)
            if err!= nil{
                fmt.Println(err)
            }
            $e = expressions.NewPrimitive($NUMBER.line,$NUMBER.pos,num,environment.INTEGER)
        }
    
2023-08-29 18:17:16:095 action-translator LogManager.java:25 qattr [@-1,32:37='NUMBER',<0>,8:30].[@-1,39:42='text',<0>,8:37]
2023-08-29 18:17:16:095 action-translator LogManager.java:25 qattr [@-1,95:100='NUMBER',<0>,9:43].[@-1,102:105='text',<0>,9:50]
2023-08-29 18:17:16:095 action-translator LogManager.java:25 attr [@-1,203:203='e',<0>,13:13]
2023-08-29 18:17:16:095 action-translator LogManager.java:25 qattr [@-1,233:238='NUMBER',<0>,13:43].[@-1,240:243='line',<0>,13:50]
2023-08-29 18:17:16:096 action-translator LogManager.java:25 qattr [@-1,246:251='NUMBER',<0>,13:56].[@-1,253:255='pos',<0>,13:63]
2023-08-29 18:17:16:096 action-translator LogManager.java:25 qattr [@-1,334:339='NUMBER',<0>,15:37].[@-1,341:344='text',<0>,15:44]
2023-08-29 18:17:16:096 action-translator LogManager.java:25 attr [@-1,437:437='e',<0>,19:13]
2023-08-29 18:17:16:096 action-translator LogManager.java:25 qattr [@-1,467:472='NUMBER',<0>,19:43].[@-1,474:477='line',<0>,19:50]
2023-08-29 18:17:16:096 action-translator LogManager.java:25 qattr [@-1,480:485='NUMBER',<0>,19:56].[@-1,487:489='pos',<0>,19:63]
2023-08-29 18:17:16:097 action-translator LogManager.java:25 translate 
        str := $STRING.text
        $e = expressions.NewPrimitive($STRING.line, $STRING.pos, str[1:len(str)-1],environment.STRING)
    
2023-08-29 18:17:16:097 action-translator LogManager.java:25 qattr [@-1,18:23='STRING',<0>,24:16].[@-1,25:28='text',<0>,24:23]
2023-08-29 18:17:16:097 action-translator LogManager.java:25 attr [@-1,40:40='e',<0>,25:9]
2023-08-29 18:17:16:097 action-translator LogManager.java:25 qattr [@-1,70:75='STRING',<0>,25:39].[@-1,77:80='line',<0>,25:46]
2023-08-29 18:17:16:097 action-translator LogManager.java:25 qattr [@-1,84:89='STRING',<0>,25:53].[@-1,91:93='pos',<0>,25:60]
2023-08-29 18:17:16:098 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($TRU.line, $TRU.pos, true, environment.BOOLEAN) 
2023-08-29 18:17:16:098 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,27:32]
2023-08-29 18:17:16:098 action-translator LogManager.java:25 qattr [@-1,32:34='TRU',<0>,27:62].[@-1,36:39='line',<0>,27:66]
2023-08-29 18:17:16:098 action-translator LogManager.java:25 qattr [@-1,43:45='TRU',<0>,27:73].[@-1,47:49='pos',<0>,27:77]
2023-08-29 18:17:16:098 action-translator LogManager.java:25 translate  $e = expressions.NewPrimitive($FAL.line, $FAL.pos, false, environment.BOOLEAN) 
2023-08-29 18:17:16:098 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,28:32]
2023-08-29 18:17:16:098 action-translator LogManager.java:25 qattr [@-1,32:34='FAL',<0>,28:62].[@-1,36:39='line',<0>,28:66]
2023-08-29 18:17:16:099 action-translator LogManager.java:25 qattr [@-1,43:45='FAL',<0>,28:73].[@-1,47:49='pos',<0>,28:77]
2023-08-29 18:17:16:099 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 18:17:16:099 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:099 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,31:139]
2023-08-29 18:17:16:099 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,31:169].[@-1,37:41='start',<0>,31:174]
2023-08-29 18:17:16:100 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,31:192].[@-1,60:64='start',<0>,31:197]
2023-08-29 18:17:16:100 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,31:217].[@-1,85:85='e',<0>,31:222]
2023-08-29 18:17:16:100 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,31:226].[@-1,92:95='text',<0>,31:229]
2023-08-29 18:17:16:100 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,31:236].[@-1,105:105='e',<0>,31:242]
2023-08-29 18:17:16:100 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 18:17:16:101 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:101 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,32:149]
2023-08-29 18:17:16:101 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,32:179].[@-1,37:41='start',<0>,32:184]
2023-08-29 18:17:16:101 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,32:202].[@-1,60:64='start',<0>,32:207]
2023-08-29 18:17:16:101 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,32:227].[@-1,85:85='e',<0>,32:232]
2023-08-29 18:17:16:101 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,32:236].[@-1,92:95='text',<0>,32:239]
2023-08-29 18:17:16:101 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,32:246].[@-1,105:105='e',<0>,32:252]
2023-08-29 18:17:16:101 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 18:17:16:102 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:102 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,33:154]
2023-08-29 18:17:16:102 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,33:184].[@-1,37:41='start',<0>,33:189]
2023-08-29 18:17:16:102 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,33:207].[@-1,60:64='start',<0>,33:212]
2023-08-29 18:17:16:102 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,33:232].[@-1,85:85='e',<0>,33:237]
2023-08-29 18:17:16:102 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,33:241].[@-1,92:95='text',<0>,33:244]
2023-08-29 18:17:16:102 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,33:251].[@-1,105:105='e',<0>,33:257]
2023-08-29 18:17:16:102 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-29 18:17:16:103 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:103 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,34:154]
2023-08-29 18:17:16:103 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,34:184].[@-1,37:41='start',<0>,34:189]
2023-08-29 18:17:16:103 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,34:207].[@-1,60:64='start',<0>,34:212]
2023-08-29 18:17:16:103 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,34:232].[@-1,85:85='e',<0>,34:237]
2023-08-29 18:17:16:104 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,34:241].[@-1,92:95='text',<0>,34:244]
2023-08-29 18:17:16:104 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,34:251].[@-1,105:105='e',<0>,34:257]
2023-08-29 18:17:16:104 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-29 18:17:16:104 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:104 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,35:151]
2023-08-29 18:17:16:104 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,35:181].[@-1,37:41='start',<0>,35:186]
2023-08-29 18:17:16:104 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,35:204].[@-1,60:64='start',<0>,35:209]
2023-08-29 18:17:16:104 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,35:229].[@-1,85:85='e',<0>,35:234]
2023-08-29 18:17:16:105 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,35:238].[@-1,92:95='text',<0>,35:241]
2023-08-29 18:17:16:105 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,35:248].[@-1,105:105='e',<0>,35:254]
2023-08-29 18:17:16:105 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-29 18:17:16:105 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:106 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,36:127]
2023-08-29 18:17:16:106 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,36:157].[@-1,37:41='start',<0>,36:162]
2023-08-29 18:17:16:106 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,36:180].[@-1,60:64='start',<0>,36:185]
2023-08-29 18:17:16:107 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,36:205].[@-1,85:85='e',<0>,36:210]
2023-08-29 18:17:16:107 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,36:214].[@-1,92:95='text',<0>,36:217]
2023-08-29 18:17:16:107 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,36:224].[@-1,105:105='e',<0>,36:230]
2023-08-29 18:17:16:107 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-29 18:17:16:108 action-translator LogManager.java:25 translate  $e = expressions.NewOperation($left.start.GetLine(), $left.start.GetColumn(), $left.e, $op.text, $right.e) 
2023-08-29 18:17:16:108 action-translator LogManager.java:25 attr [@-1,2:2='e',<0>,37:124]
2023-08-29 18:17:16:108 action-translator LogManager.java:25 qattr [@-1,32:35='left',<0>,37:154].[@-1,37:41='start',<0>,37:159]
2023-08-29 18:17:16:109 action-translator LogManager.java:25 qattr [@-1,55:58='left',<0>,37:177].[@-1,60:64='start',<0>,37:182]
2023-08-29 18:17:16:109 action-translator LogManager.java:25 qattr [@-1,80:83='left',<0>,37:202].[@-1,85:85='e',<0>,37:207]
2023-08-29 18:17:16:109 action-translator LogManager.java:25 qattr [@-1,89:90='op',<0>,37:211].[@-1,92:95='text',<0>,37:214]
2023-08-29 18:17:16:109 action-translator LogManager.java:25 qattr [@-1,99:103='right',<0>,37:221].[@-1,105:105='e',<0>,37:227]
2023-08-29 18:17:16:110 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 15)
2023-08-29 18:17:16:110 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 14)
2023-08-29 18:17:16:111 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 13)
2023-08-29 18:17:16:111 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 12)
2023-08-29 18:17:16:111 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 11)
2023-08-29 18:17:16:111 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 10)
2023-08-29 18:17:16:111 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 9)
2023-08-29 18:17:16:112 action-translator LogManager.java:25 translate 
2023-08-29 18:17:16:113 action-translator LogManager.java:25 translate 
            $l = []interface{}{}
            $l = append($l, $expr.e)
        
2023-08-29 18:17:16:113 action-translator LogManager.java:25 attr [@-1,15:15='l',<0>,3:13]
2023-08-29 18:17:16:113 action-translator LogManager.java:25 attr [@-1,49:49='l',<0>,4:13]
2023-08-29 18:17:16:113 action-translator LogManager.java:25 attr [@-1,61:61='l',<0>,4:25]
2023-08-29 18:17:16:114 action-translator LogManager.java:25 qattr [@-1,65:68='expr',<0>,4:29].[@-1,70:70='e',<0>,4:34]
2023-08-29 18:17:16:114 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:114 action-translator LogManager.java:25 translate 
                                          var arr []interface{}
                                          arr = append($list.l, $expr.e)
                                          $l = arr
                                      
2023-08-29 18:17:16:114 action-translator LogManager.java:25 qattr [@-1,123:126='list',<0>,10:56].[@-1,128:128='l',<0>,10:61]
2023-08-29 18:17:16:114 action-translator LogManager.java:25 qattr [@-1,132:135='expr',<0>,10:65].[@-1,137:137='e',<0>,10:70]
2023-08-29 18:17:16:115 action-translator LogManager.java:25 attr [@-1,184:184='l',<0>,11:43]
2023-08-29 18:17:16:115 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:115 action-translator LogManager.java:25 translate 
2023-08-29 18:17:16:115 action-translator LogManager.java:25 translate  $p = expressions.NewCallVar($ID.line, $ID.pos, $ID.text)
2023-08-29 18:17:16:116 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,2:34]
2023-08-29 18:17:16:116 action-translator LogManager.java:25 qattr [@-1,30:31='ID',<0>,2:62].[@-1,33:36='line',<0>,2:65]
2023-08-29 18:17:16:116 action-translator LogManager.java:25 qattr [@-1,40:41='ID',<0>,2:72].[@-1,43:45='pos',<0>,2:75]
2023-08-29 18:17:16:116 action-translator LogManager.java:25 qattr [@-1,49:50='ID',<0>,2:81].[@-1,52:55='text',<0>,2:84]
2023-08-29 18:17:16:117 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:117 action-translator LogManager.java:25 translate  $p = expressions.NewArrayAccess($list.start.GetLine(), $list.start.GetColumn(), $list.p, $expr.e) 
2023-08-29 18:17:16:117 action-translator LogManager.java:25 attr [@-1,2:2='p',<0>,5:127]
2023-08-29 18:17:16:117 action-translator LogManager.java:25 qattr [@-1,34:37='list',<0>,5:159].[@-1,39:43='start',<0>,5:164]
2023-08-29 18:17:16:118 action-translator LogManager.java:25 qattr [@-1,57:60='list',<0>,5:182].[@-1,62:66='start',<0>,5:187]
2023-08-29 18:17:16:118 action-translator LogManager.java:25 qattr [@-1,82:85='list',<0>,5:207].[@-1,87:87='p',<0>,5:212]
2023-08-29 18:17:16:118 action-translator LogManager.java:25 qattr [@-1,91:94='expr',<0>,5:216].[@-1,96:96='e',<0>,5:221]
2023-08-29 18:17:16:119 action-translator LogManager.java:25 translate p.Precpred(p.GetParserRuleContext(), 2)
2023-08-29 18:17:16:513 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 18:17:16:513 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 18:17:16:613 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

2023-08-29 18:17:16:613 action-translator LogManager.java:25 translate 
    import "Server2/interfaces"
    import "Server2/environment"
    import "Server2/expressions"
    import "Server2/instructions"
    import "strings"

